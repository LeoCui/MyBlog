{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"source/pictures/git教程2.jpg","path":"pictures/git教程2.jpg","modified":0,"renderable":0},{"_id":"themes/themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/pictures/git教程1.jpg","path":"pictures/git教程1.jpg","modified":0,"renderable":0},{"_id":"themes/themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"source/about/PersonalResume.png","path":"about/PersonalResume.png","modified":0,"renderable":0},{"_id":"themes/themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/pictures/计网学习笔记1.jpg","path":"pictures/计网学习笔记1.jpg","modified":0,"renderable":0},{"_id":"source/search.xml","path":"search.xml","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"a228b94b6dd5a9564b3e7f75a7eea342a711120a","modified":1516261272000},{"_id":"source/baidu_verify_WTBJDSEkfg.html","hash":"7d84acb8ddb726779d84b0f3ef840eaeba7fdea1","modified":1477033040000},{"_id":"source/google449ef8878e3fef9c.html","hash":"44b4ac6974f7aeefc3bd9e6e16aeefbf3533f1a5","modified":1477034012000},{"_id":"themes/themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1516257296000},{"_id":"themes/themes/next/.DS_Store","hash":"89c591033d424253f68896362c764e55f5b1ad67","modified":1516257460000},{"_id":"themes/themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1516257296000},{"_id":"themes/themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1516257296000},{"_id":"themes/themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1516257296000},{"_id":"themes/themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1516257296000},{"_id":"themes/themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1516257296000},{"_id":"themes/themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1516257296000},{"_id":"themes/themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1516257296000},{"_id":"themes/themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1516257296000},{"_id":"themes/themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1516257296000},{"_id":"themes/themes/next/_config.yml","hash":"5ccf9b0fef641571ebbb6b70e23c55ce7ce76dc4","modified":1516267998000},{"_id":"themes/themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1516257296000},{"_id":"themes/themes/next/README.cn.md","hash":"5d8af3d8de8d3926126a738519e97c8442b0effe","modified":1516257296000},{"_id":"themes/themes/next/README.md","hash":"44b28d995681a7c48bfe3d0577d6203812d07e59","modified":1516257296000},{"_id":"themes/themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1516257296000},{"_id":"themes/themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1516257296000},{"_id":"source/about/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1505748867000},{"_id":"source/about/index.md","hash":"2e1e9bf1a167a8998e31d61ed44f7ac9d7c2511d","modified":1505749986000},{"_id":"source/categories/index.md","hash":"a42f1d5245b7a1b210232f28f4152c9ec84f277b","modified":1516261104000},{"_id":"source/_posts/Hello-hexo.md","hash":"eba30ffd44dd2d71899649dfbccb98f9c2e6b162","modified":1479878577000},{"_id":"source/_posts/Leetcode常见技巧.md","hash":"5f844a67b996dc36ac29af73131b6c55a492224e","modified":1505574268000},{"_id":"source/_posts/Linux-Windows环境变量那些事.md","hash":"95b02ec2e39d8c02c31c152705edd041b29b7605","modified":1477029327000},{"_id":"source/_posts/Vim中的常见操作.md","hash":"3fdb1340feaea8b3f515d2f3ed6c9ca8252f2dad","modified":1510761154000},{"_id":"source/_posts/Windows-Linux进程控制实验.md","hash":"6268ebb4e302a124b9d2e95ea7c2ba93526be6c6","modified":1477028860000},{"_id":"source/_posts/c++基础-长期更新.md","hash":"a6c8f97733d8e2f242be6d986a032543a21c1217","modified":1510761318000},{"_id":"source/_posts/c语言gets和scanf的区别.md","hash":"e5a33dbcb679e6bc7b600bf77642643414bfe1ea","modified":1478169314000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1510762045000},{"_id":"source/_posts/BFS的一般写法.md","hash":"830a30f4825849b7be16a29a2b65cdd440208556","modified":1516264119000},{"_id":"source/_posts/c语言基础，长期更新.md","hash":"8d99cd6e43e7ce4147fce04254d9c464b844bd78","modified":1505628912000},{"_id":"source/_posts/c语言字符串处理函数.md","hash":"556a3cf900d70503fcc9b2fd492ba5e5c8ab69ca","modified":1503643123000},{"_id":"source/_posts/c语言时间函数全攻略.md","hash":"4189e7d049349ec30748a3111116099681b3a9ba","modified":1477029266000},{"_id":"source/_posts/gdb命令总结.md","hash":"c5d25094bce9b9e0a9f0f3e39d1d4edefe0127fc","modified":1503645365000},{"_id":"source/_posts/git教程.md","hash":"9a7201570b7148d602f92590beb06af420e0fb8a","modified":1515315185000},{"_id":"source/_posts/java语言基础，长期更新.md","hash":"34bb456269557519128d940184108200bbb5d5e9","modified":1477029546000},{"_id":"source/_posts/linux命令.md","hash":"c2e1452322de837ab9829893928309a973c9c359","modified":1510761221000},{"_id":"source/_posts/linux基础知识.md","hash":"b72cd8c209cca7f1f9c71e528b58ae1127b27952","modified":1503644557000},{"_id":"source/_posts/c语言的指针易错点.md","hash":"8fe7ccbf07ce6d55fbd0011f36f13ee3fcded925","modified":1477029604000},{"_id":"source/_posts/makefile示例.md","hash":"889d45a0c6ff3f0144405d2cfa2331fb308965a6","modified":1503584305000},{"_id":"source/_posts/python-pip多个版本共存混乱的解决.md","hash":"094aa9d3231eeb3291733f504d6be92eb703525f","modified":1505816521000},{"_id":"source/_posts/python基本用法.md","hash":"0e79933cd07f3ef44cff6031c0cfa145411b46d1","modified":1515572657000},{"_id":"source/_posts/中文编码那些事.md","hash":"1f82c4dde802bb7dec989182beacad5ee36c42e0","modified":1477029476000},{"_id":"source/_posts/markdown语法-长期更新.md","hash":"75dfd5e33cf07ff42852cec06542d5b0877f0e6b","modified":1505551447000},{"_id":"source/_posts/今天我又把服务器搞挂了.md","hash":"cbc0c24ae031240908f5cb2ff8e99cfccd48eba2","modified":1484278802000},{"_id":"source/_posts/mysql数据导入导出.md","hash":"18e3acda910c99e114cf094f81f4e5616daa8aec","modified":1496072282000},{"_id":"source/_posts/信息安全的一些问题.md","hash":"c3298d51dc6e02dc3fd490a8c45611f53c7a4a8b","modified":1514104976000},{"_id":"source/_posts/入组培训code-review总结.md","hash":"23550b552436689631c7499937debb935c7597b2","modified":1503579330000},{"_id":"source/_posts/几种web服务器.md","hash":"475936a2d167f4221aaa97a96e0864f3cfb8bebf","modified":1510761983000},{"_id":"source/_posts/变量的声明和定义.md","hash":"7321f1038d0d9c466cfebff71d7649a9cd86881d","modified":1477029108000},{"_id":"source/_posts/图片像素和分辨率的一些知识.md","hash":"a4ce4005e92d8c63c4ca57d54c96c24577f491ed","modified":1483279900000},{"_id":"source/_posts/尝试用AE做年会视频.md","hash":"7ef2347935d4f319971268af5eba7977ec31d945","modified":1483279715000},{"_id":"source/_posts/并行，并发和锁.md","hash":"bfc5acd8fc81b1b82e08185738b30ff1d26e4a42","modified":1477029526000},{"_id":"source/_posts/数据库基础知识.md","hash":"982c5e32bf8b2fffe7545eebb2a38a8656c37aeb","modified":1515159597000},{"_id":"source/_posts/编译过程.md","hash":"5646cdbea8126a042b9e74fc4e800e75a4e5d22b","modified":1478169249000},{"_id":"source/_posts/网络代理调研.md","hash":"5c985590363264db3fbe12f97747b8d7bf0cf492","modified":1510390780000},{"_id":"source/_posts/百度内容生态质量部测试实习面试.md","hash":"dfb292d3034e11a2759d7be1032d955e47ac1c91","modified":1499756284000},{"_id":"source/_posts/百度地图交通路线部门实习面试.md","hash":"409d9cb851fd8b39d1e42269422fa616f5016d70","modified":1499756506000},{"_id":"source/_posts/百度实习体验.md","hash":"c87ff394cf8b67aecc8c88ac886eeb0bbd7bcd9f","modified":1503651463000},{"_id":"source/_posts/计算机组成原理基础.md","hash":"4a49f75e79917a57525106e784a4e0520f378887","modified":1478166771000},{"_id":"source/_posts/计网学习笔记.md","hash":"8ebffc2bd14ab2844a2f55f336d84e2e164d0fd6","modified":1503580955000},{"_id":"source/_posts/面试经典编程题.md","hash":"94bca6f00820ee8ea4c393b9bfd29bd7d5476569","modified":1515054624000},{"_id":"source/tags/index.md","hash":"932b6669968045dd95685b375920b2f4fddc3c51","modified":1516262639000},{"_id":"source/pictures/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1477275247000},{"_id":"themes/themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1516257296000},{"_id":"themes/themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1516257296000},{"_id":"themes/themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1516257286000},{"_id":"themes/themes/next/.git/index","hash":"c947ad21942209b182d9be7c547177753d7e6ad5","modified":1516257307000},{"_id":"themes/themes/next/.git/packed-refs","hash":"339779e225d913a344c5e6210617badd049c4434","modified":1516257296000},{"_id":"themes/themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1516257296000},{"_id":"themes/themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1516257296000},{"_id":"themes/themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1516257296000},{"_id":"themes/themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1516257296000},{"_id":"themes/themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1516257296000},{"_id":"themes/themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1516257296000},{"_id":"themes/themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1516257296000},{"_id":"themes/themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1516257296000},{"_id":"themes/themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1516257296000},{"_id":"themes/themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1516257296000},{"_id":"themes/themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1516257296000},{"_id":"themes/themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1516257296000},{"_id":"themes/themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1516257296000},{"_id":"themes/themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1516257296000},{"_id":"themes/themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1516257296000},{"_id":"themes/themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1516257296000},{"_id":"themes/themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1516257296000},{"_id":"themes/themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1516257296000},{"_id":"themes/themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1516257296000},{"_id":"themes/themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1516257296000},{"_id":"themes/themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1516257296000},{"_id":"themes/themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1516257296000},{"_id":"themes/themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1516257296000},{"_id":"themes/themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1516257296000},{"_id":"themes/themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1516257296000},{"_id":"themes/themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1516257296000},{"_id":"themes/themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1516257296000},{"_id":"themes/themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1516257296000},{"_id":"themes/themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1516257296000},{"_id":"themes/themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1516257296000},{"_id":"themes/themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1516257296000},{"_id":"themes/themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1516257296000},{"_id":"themes/themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1516257296000},{"_id":"source/images/avatar.png","hash":"d5620290e215dc62895e98c07f2b7ca1213b9b73","modified":1516261785000},{"_id":"source/pictures/git教程2.jpg","hash":"e0bf74b7b055ca66250c59f7d264dc4a7ac976d3","modified":1477275274000},{"_id":"themes/themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516257296000},{"_id":"themes/themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1516257286000},{"_id":"themes/themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1516257286000},{"_id":"themes/themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1516257286000},{"_id":"themes/themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1516257286000},{"_id":"themes/themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1516257286000},{"_id":"themes/themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1516257286000},{"_id":"themes/themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1516257286000},{"_id":"themes/themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1516257286000},{"_id":"themes/themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1516257286000},{"_id":"themes/themes/next/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1516257286000},{"_id":"themes/themes/next/.git/logs/HEAD","hash":"b79b6ed0efab828a24769ec80575c0edd484a4ee","modified":1516257296000},{"_id":"themes/themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1516257296000},{"_id":"themes/themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1516257296000},{"_id":"themes/themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1516257296000},{"_id":"themes/themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1516257296000},{"_id":"themes/themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1516257296000},{"_id":"themes/themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1516257296000},{"_id":"themes/themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1516257296000},{"_id":"themes/themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1516257296000},{"_id":"themes/themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1516257296000},{"_id":"themes/themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1516257296000},{"_id":"themes/themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1516257296000},{"_id":"themes/themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1516257296000},{"_id":"themes/themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1516257296000},{"_id":"themes/themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1516257296000},{"_id":"themes/themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1516257296000},{"_id":"themes/themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1516257296000},{"_id":"themes/themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1516257296000},{"_id":"themes/themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1516257296000},{"_id":"themes/themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1516257296000},{"_id":"themes/themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1516257296000},{"_id":"themes/themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1516257296000},{"_id":"themes/themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1516257296000},{"_id":"themes/themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1516257296000},{"_id":"themes/themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1516257296000},{"_id":"themes/themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1516257296000},{"_id":"themes/themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1516257296000},{"_id":"themes/themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1516257296000},{"_id":"themes/themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1516257296000},{"_id":"themes/themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1516257296000},{"_id":"themes/themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1516257296000},{"_id":"themes/themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1516257296000},{"_id":"themes/themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1516257296000},{"_id":"themes/themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1516257296000},{"_id":"themes/themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1516257296000},{"_id":"themes/themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1516257296000},{"_id":"themes/themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1516257296000},{"_id":"themes/themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1516257296000},{"_id":"themes/themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1516257296000},{"_id":"themes/themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1516257296000},{"_id":"themes/themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1516257296000},{"_id":"themes/themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1516257296000},{"_id":"themes/themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1516257296000},{"_id":"themes/themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1516257296000},{"_id":"themes/themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1516257296000},{"_id":"themes/themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1516257296000},{"_id":"themes/themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1516257296000},{"_id":"source/pictures/git教程1.jpg","hash":"3ba23d752e732fb030b9a7a7583f45cdff4b274a","modified":1477274666000},{"_id":"themes/themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516257296000},{"_id":"themes/themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516257296000},{"_id":"themes/themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516257296000},{"_id":"themes/themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516257296000},{"_id":"themes/themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516257296000},{"_id":"themes/themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516257296000},{"_id":"themes/themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516257296000},{"_id":"themes/themes/next/.git/refs/heads/master","hash":"f4d9f6f8bc79e9bc071cf29324a74a1d78158ab9","modified":1516257296000},{"_id":"themes/themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1516257296000},{"_id":"themes/themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1516257296000},{"_id":"themes/themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1516257296000},{"_id":"themes/themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1516257296000},{"_id":"themes/themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1516257296000},{"_id":"themes/themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1516257296000},{"_id":"themes/themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1516257296000},{"_id":"themes/themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1516257296000},{"_id":"themes/themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1516257296000},{"_id":"themes/themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1516257296000},{"_id":"themes/themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1516257296000},{"_id":"themes/themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1516257296000},{"_id":"themes/themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1516257296000},{"_id":"themes/themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1516257296000},{"_id":"themes/themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1516257296000},{"_id":"themes/themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1516257296000},{"_id":"themes/themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1516257296000},{"_id":"themes/themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1516257296000},{"_id":"themes/themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1516257296000},{"_id":"themes/themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1516257296000},{"_id":"themes/themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1516257296000},{"_id":"themes/themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1516257296000},{"_id":"themes/themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1516257296000},{"_id":"themes/themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1516257296000},{"_id":"themes/themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1516257296000},{"_id":"themes/themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1516257296000},{"_id":"themes/themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1516257296000},{"_id":"themes/themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1516257296000},{"_id":"themes/themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1516257296000},{"_id":"themes/themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1516257296000},{"_id":"themes/themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1516257296000},{"_id":"themes/themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1516257296000},{"_id":"themes/themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1516257296000},{"_id":"themes/themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1516257296000},{"_id":"themes/themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1516257296000},{"_id":"themes/themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1516257296000},{"_id":"themes/themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1516257296000},{"_id":"themes/themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1516257296000},{"_id":"themes/themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1516257296000},{"_id":"themes/themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1516257296000},{"_id":"themes/themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1516257296000},{"_id":"themes/themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1516257296000},{"_id":"themes/themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1516257296000},{"_id":"themes/themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1516257296000},{"_id":"themes/themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1516257296000},{"_id":"themes/themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1516257296000},{"_id":"themes/themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1516257296000},{"_id":"themes/themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1516257296000},{"_id":"themes/themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1516257296000},{"_id":"themes/themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1516257296000},{"_id":"themes/themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1516257296000},{"_id":"themes/themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1516257296000},{"_id":"themes/themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1516257296000},{"_id":"themes/themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1516257296000},{"_id":"themes/themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1516257296000},{"_id":"themes/themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1516257296000},{"_id":"themes/themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1516257296000},{"_id":"themes/themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1516257296000},{"_id":"themes/themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1516257296000},{"_id":"themes/themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1516257296000},{"_id":"themes/themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1516257296000},{"_id":"themes/themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1516257296000},{"_id":"themes/themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1516257296000},{"_id":"themes/themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1516257296000},{"_id":"themes/themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1516257296000},{"_id":"themes/themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1516257296000},{"_id":"themes/themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1516257296000},{"_id":"themes/themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1516257296000},{"_id":"themes/themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1516257296000},{"_id":"themes/themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1516257296000},{"_id":"themes/themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1516257296000},{"_id":"themes/themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1516257296000},{"_id":"themes/themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1516257296000},{"_id":"themes/themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1516257296000},{"_id":"themes/themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1516257296000},{"_id":"themes/themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1516257296000},{"_id":"themes/themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1516257296000},{"_id":"themes/themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1516257296000},{"_id":"themes/themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1516257296000},{"_id":"themes/themes/next/.git/logs/refs/heads/master","hash":"b79b6ed0efab828a24769ec80575c0edd484a4ee","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1516257296000},{"_id":"themes/themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1516257296000},{"_id":"themes/themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1516257296000},{"_id":"themes/themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1516257296000},{"_id":"themes/themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1516257296000},{"_id":"themes/themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1516257296000},{"_id":"themes/themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1516257296000},{"_id":"themes/themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1516257296000},{"_id":"themes/themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1516257296000},{"_id":"themes/themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1516257296000},{"_id":"themes/themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1516257296000},{"_id":"themes/themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1516257296000},{"_id":"themes/themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1516257296000},{"_id":"themes/themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1516257296000},{"_id":"themes/themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1516257296000},{"_id":"themes/themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1516257296000},{"_id":"themes/themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1516257296000},{"_id":"themes/themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1516257296000},{"_id":"themes/themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1516257296000},{"_id":"themes/themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1516257296000},{"_id":"themes/themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1516257296000},{"_id":"themes/themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1516257296000},{"_id":"themes/themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1516257296000},{"_id":"themes/themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1516257296000},{"_id":"themes/themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1516257296000},{"_id":"themes/themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1516257296000},{"_id":"themes/themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1516257296000},{"_id":"themes/themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1516257296000},{"_id":"themes/themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1516257296000},{"_id":"themes/themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1516257296000},{"_id":"themes/themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1516257296000},{"_id":"themes/themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1516257296000},{"_id":"themes/themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1516257296000},{"_id":"themes/themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1516257296000},{"_id":"themes/themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1516257296000},{"_id":"themes/themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1516257296000},{"_id":"themes/themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1516257296000},{"_id":"themes/themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1516257296000},{"_id":"themes/themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1516257296000},{"_id":"themes/themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1516257296000},{"_id":"themes/themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1516257296000},{"_id":"themes/themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1516257296000},{"_id":"themes/themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1516257296000},{"_id":"themes/themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1516257296000},{"_id":"themes/themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1516257296000},{"_id":"source/about/PersonalResume.png","hash":"c08a37534d402ba9379d09a72a1afc7efd700736","modified":1505748827000},{"_id":"themes/themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"b79b6ed0efab828a24769ec80575c0edd484a4ee","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1516257296000},{"_id":"themes/themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1516257296000},{"_id":"themes/themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1516257296000},{"_id":"themes/themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1516257296000},{"_id":"themes/themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1516257296000},{"_id":"themes/themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1516257296000},{"_id":"themes/themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1516257296000},{"_id":"themes/themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1516257296000},{"_id":"themes/themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1516257296000},{"_id":"themes/themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1516257296000},{"_id":"themes/themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1516257296000},{"_id":"themes/themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1516257296000},{"_id":"themes/themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1516257296000},{"_id":"themes/themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1516257296000},{"_id":"themes/themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1516257296000},{"_id":"themes/themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1516257296000},{"_id":"themes/themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1516257296000},{"_id":"themes/themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1516257296000},{"_id":"themes/themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1516257296000},{"_id":"themes/themes/next/.git/objects/pack/pack-43ca19f05a7eafaedc751ec6ae895cd343f93cae.idx","hash":"c637758f1196f2aeae22bf87c40dee268b82109e","modified":1516257296000},{"_id":"themes/themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1516257296000},{"_id":"themes/themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1516257296000},{"_id":"themes/themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1516257296000},{"_id":"source/pictures/计网学习笔记1.jpg","hash":"027f262f7d4bcda1c9b36aa8b2c02301864569b8","modified":1479125516000},{"_id":"themes/themes/next/.git/objects/pack/pack-43ca19f05a7eafaedc751ec6ae895cd343f93cae.pack","hash":"886bc64f4f16bf15797490c12a53f33b839e38f5","modified":1516257296000},{"_id":"public/baidusitemap.xml","hash":"2454cf77f67f78c7b4e8e7ad7cb3e15d3acef911","modified":1516268028560},{"_id":"public/search.xml","hash":"bf217e64e93ca89dd670991fb6fc87b4839c4cd5","modified":1516268028769},{"_id":"public/sitemap.xml","hash":"b47291cf4468cac25cc17d2c45257da9e4affe33","modified":1516268028769},{"_id":"public/baidu_verify_WTBJDSEkfg.html","hash":"c46b2ac746f5216436cae1d6b0e38b5119892b7c","modified":1516268029144},{"_id":"public/google449ef8878e3fef9c.html","hash":"07b6e0ce01fe179b022d172d96afc09fb76d9396","modified":1516268029146},{"_id":"public/about/index.html","hash":"33a1e332c0f1ac8af89c8cf5574c261bf0fa7452","modified":1516268029146},{"_id":"public/categories/index.html","hash":"44b494a19ab4356975ce506bef4e15fc88726f14","modified":1516268029146},{"_id":"public/tags/index.html","hash":"84e6722d1870f726be2a74a8f094a773f4b045f8","modified":1516268029146},{"_id":"public/2018/01/06/python基本用法/index.html","hash":"c0c66a8f6ea966bdb3b1083772d6f3004fdf6f30","modified":1516268029147},{"_id":"public/2017/11/16/几种web服务器/index.html","hash":"f6366989b9ddbea164471474166a358615c0ef6c","modified":1516268029147},{"_id":"public/2017/11/11/数据库基础知识/index.html","hash":"de6063d0885bf4666f810b691d10cb6a737e7c2a","modified":1516268029147},{"_id":"public/2017/11/11/网络代理调研/index.html","hash":"0bc414e1d8eecbf1e8186e08c19dad0c330b645d","modified":1516268029147},{"_id":"public/2017/09/19/python-pip多个版本共存混乱的解决/index.html","hash":"a3c84610a1051cc9d4917d62fc4482865b17b5ad","modified":1516268029147},{"_id":"public/2017/09/10/BFS的一般写法/index.html","hash":"659c28ee6ba844b1fe13db3143857f15f9c76505","modified":1516268029147},{"_id":"public/2017/08/24/c语言字符串处理函数/index.html","hash":"a5fbbf57c16df148999acfa83611c34cbcc7ee0d","modified":1516268029147},{"_id":"public/2017/08/24/makefile示例/index.html","hash":"c7fa9ea9e358a15193b1a08e5ca0deabb94b6d7d","modified":1516268029147},{"_id":"public/2017/08/24/信息安全的一些问题/index.html","hash":"69d6966f39adb62fb690a801ac37a91116b5ceb6","modified":1516268029147},{"_id":"public/2017/08/21/入组培训code-review总结/index.html","hash":"63bfae271de9c27836bd418a960e4c8fd6f5465d","modified":1516268029147},{"_id":"public/2017/07/10/百度实习体验/index.html","hash":"2a678e587a3483408fedd45a03c1df2af06629c4","modified":1516268029147},{"_id":"public/2017/05/29/mysql数据导入导出/index.html","hash":"6d97fb6590a5532536f24e3d41da78bc8764567e","modified":1516268029147},{"_id":"public/2017/03/03/百度地图交通路线部门实习面试/index.html","hash":"60ec1775993cab6953b9aa84656c6e27c61d1adf","modified":1516268029147},{"_id":"public/2017/03/01/百度内容生态质量部测试实习面试/index.html","hash":"25d1f75b7ffca53fc27fa15ed6d381ca2d6e5bcb","modified":1516268029147},{"_id":"public/2017/01/11/今天我又把服务器搞挂了/index.html","hash":"73d42e1dd0a9cf680f8267d9f04c784f1331c2d6","modified":1516268029147},{"_id":"public/2017/01/01/图片像素和分辨率的一些知识/index.html","hash":"19d301b60b1c0c14eba7e9b5daa9951682c055cc","modified":1516268029147},{"_id":"public/2017/01/01/尝试用AE做年会视频/index.html","hash":"0094fd8699a3d7b558443de140bd5f9d7d244456","modified":1516268029147},{"_id":"public/2017/01/01/Vim中的常见操作/index.html","hash":"df1bec72cb8f2522296472e255bf4735de75bc6b","modified":1516268029147},{"_id":"public/2016/11/25/面试经典编程题/index.html","hash":"542b936ee6f075c2d6bedde1f5f20a5d98def889","modified":1516268029147},{"_id":"public/2016/11/14/linux基础知识/index.html","hash":"bc408568cefc68532846d8b52a47c69d12a73abf","modified":1516268029147},{"_id":"public/2016/11/03/gdb命令总结/index.html","hash":"3f60e91498021a925c4c9df7f389caf00aa1493c","modified":1516268029147},{"_id":"public/2016/11/03/Leetcode常见技巧/index.html","hash":"a35d6dc273d698356a1c43a5f6171eef449611ce","modified":1516268029147},{"_id":"public/2016/11/03/c语言gets和scanf的区别/index.html","hash":"56a63bff0ada9d4fc716fd7ea60d9c5ccdbdac1a","modified":1516268029147},{"_id":"public/2016/10/24/linux命令/index.html","hash":"d47e4361f622aefb03721a78fb119103059847cc","modified":1516268029147},{"_id":"public/2016/10/24/计网学习笔记/index.html","hash":"ce97f3839f2de8399af6ef9be0bf11b694806a56","modified":1516268029148},{"_id":"public/2016/10/24/markdown语法-长期更新/index.html","hash":"dd0081d059fac6322ac3af88cb9d069b4935320b","modified":1516268029148},{"_id":"public/2016/10/24/git教程/index.html","hash":"cab92b5c4f30e7c461d55ab49c5d01d0c2e824e4","modified":1516268029148},{"_id":"public/2016/10/20/java语言基础，长期更新/index.html","hash":"8d69eaa3172dedaa0768b153509448499f9d8ce0","modified":1516268029148},{"_id":"public/2016/10/20/c语言基础，长期更新/index.html","hash":"d5023c917a52f7013569bfb2311cbb1614214fbc","modified":1516268029148},{"_id":"public/2016/10/20/并行，并发和锁/index.html","hash":"2948106ee79731d2ba1cf39122bcd90cf93be8b6","modified":1516268029148},{"_id":"public/2016/10/20/c++基础-长期更新/index.html","hash":"3b57ed3bf2919367176001b6d48cea6c7fa3ddbf","modified":1516268029148},{"_id":"public/2016/10/19/Hello-hexo/index.html","hash":"7f65d9b8d2e254809fea2aa29319b560e4109ae3","modified":1516268029148},{"_id":"public/2016/10/19/c语言的指针易错点/index.html","hash":"d704a89072df6587acf5a385075fbc9fcea88a56","modified":1516268029148},{"_id":"public/2016/04/11/Linux-Windows环境变量那些事/index.html","hash":"7d4d67d3e8210b4b771b9c098d6f1ec54832c82d","modified":1516268029148},{"_id":"public/2016/04/11/Windows-Linux进程控制实验/index.html","hash":"eabf797417f25aaf67aa2e656d7c5027cea8bdfc","modified":1516268029148},{"_id":"public/2016/04/10/c语言时间函数全攻略/index.html","hash":"3b72dd94118abceffc86a5d3e06e06603aef53c8","modified":1516268029148},{"_id":"public/2015/11/03/计算机组成原理基础/index.html","hash":"a8dd33cc8b3e5866635513b2af48582d9890ab05","modified":1516268029148},{"_id":"public/2015/10/15/中文编码那些事/index.html","hash":"2a0006e6223b4e172574ebfdf0c78c077f1919b6","modified":1516268029148},{"_id":"public/2015/10/10/编译过程/index.html","hash":"faa004b3983078b2f107637b94ffb4fd906abc34","modified":1516268029148},{"_id":"public/2015/05/19/变量的声明和定义/index.html","hash":"39f2e9d544b4457d2e322a28b1110c0cd4d73173","modified":1516268029148},{"_id":"public/archives/index.html","hash":"27ba94ae2d7a51fbc7e8ba5a8cf8351807e7e333","modified":1516268029148},{"_id":"public/archives/page/2/index.html","hash":"8558b7ca93424c959d02d42c4ac00752fc8c8302","modified":1516268029148},{"_id":"public/archives/page/3/index.html","hash":"a9c5a07a280dfcbf13482b370ecf80ef0093c236","modified":1516268029148},{"_id":"public/archives/page/4/index.html","hash":"9c50c9c11de60598190dcb83318b9e3379be44c4","modified":1516268029149},{"_id":"public/archives/2015/index.html","hash":"19ca6c60b12ae3843df8802a80743a5c8e0bd7c7","modified":1516268029149},{"_id":"public/archives/2015/05/index.html","hash":"cf28e8e14cd312754428e1f51d076c9cbd357109","modified":1516268029149},{"_id":"public/archives/2015/10/index.html","hash":"1c1df37a4b2fcedd3ad96c2398bed9fe46b6e63d","modified":1516268029149},{"_id":"public/archives/2015/11/index.html","hash":"683952c657d60684f927f26d633fdce348cb118b","modified":1516268029149},{"_id":"public/archives/2016/index.html","hash":"fccca91cbba2abd272d906ac2684a2cdc1d580ea","modified":1516268029149},{"_id":"public/archives/2016/page/2/index.html","hash":"7cbd22dcc20d3c2c72ad8a3e03cbc7fec6b03a31","modified":1516268029149},{"_id":"public/archives/2016/04/index.html","hash":"3f14296ce88b6fbe487500516709ef5d4a5f307f","modified":1516268029149},{"_id":"public/archives/2016/10/index.html","hash":"03b17655183823faad53958c292b476247925a09","modified":1516268029149},{"_id":"public/archives/2016/11/index.html","hash":"68d95248f57da1289fa1133d618ea12058b0c26e","modified":1516268029149},{"_id":"public/archives/2017/index.html","hash":"f059c1d8c16ceba3b460b0ead56eee06ba9169b1","modified":1516268029149},{"_id":"public/archives/2017/page/2/index.html","hash":"83f878fd7444bd3b4c267b000a8e4ad80afcea84","modified":1516268029149},{"_id":"public/archives/2017/01/index.html","hash":"9e8692bbd9c50e378827d32dc467dd18a66dab84","modified":1516268029149},{"_id":"public/archives/2017/03/index.html","hash":"052da06426ca1ede9b6ac606779dd6e7086d6a3b","modified":1516268029149},{"_id":"public/archives/2017/05/index.html","hash":"24d3a6baafa154e73a7fd1d2070d9109f0308747","modified":1516268029149},{"_id":"public/archives/2017/07/index.html","hash":"ad09b2d40c5e5f777e359356a91ccd86af5950bd","modified":1516268029149},{"_id":"public/archives/2017/08/index.html","hash":"dbfa01482f7f7ced6f37e8d27747af4886108475","modified":1516268029149},{"_id":"public/archives/2017/09/index.html","hash":"d6cdb2ae692d437f222d60c32e1bd7718de47b04","modified":1516268029149},{"_id":"public/archives/2017/11/index.html","hash":"e83009dc786281ba1330929112da7526fa94738a","modified":1516268029149},{"_id":"public/archives/2018/index.html","hash":"dbd4a999b142673268ca44ff95e16925fd77e70c","modified":1516268029149},{"_id":"public/archives/2018/01/index.html","hash":"5165140f902dbaddd46227816f96e86e0debd00f","modified":1516268029149},{"_id":"public/categories/hexo/index.html","hash":"0709e331cf5cb8b8e29bc7f541a9a8f346526c0a","modified":1516268029149},{"_id":"public/categories/c-c/index.html","hash":"b7fb008a77956fa4b9c41eee5f84e1c800e3b44b","modified":1516268029149},{"_id":"public/categories/操作系统/index.html","hash":"53467c5293ff422b3357431945a33dbb7d2a5a57","modified":1516268029149},{"_id":"public/categories/Vim/index.html","hash":"76a2fa3e5be1a66bbaa0aa9778fff092247cd865","modified":1516268029149},{"_id":"public/categories/面试题/index.html","hash":"ae40a27d3c7b78269f8b2e20be5724fcad5e50fd","modified":1516268029149},{"_id":"public/categories/Linux/index.html","hash":"057aed04175f13db36aa9f68e49d3f3099973e38","modified":1516268029149},{"_id":"public/categories/计算机基础/index.html","hash":"f56d49b5b31e4a580462d96218e2fa66bff2e6df","modified":1516268029149},{"_id":"public/categories/java/index.html","hash":"ddfd0095e316e04436663635a74d6098e9fbedf0","modified":1516268029150},{"_id":"public/categories/python/index.html","hash":"ba7e6c8a23d201bb3044d376dd07f869c9cbd83b","modified":1516268029150},{"_id":"public/categories/信息安全/index.html","hash":"472082b0fa1950c4f2a131101fdbe6e5e57229bd","modified":1516268029150},{"_id":"public/categories/其他/index.html","hash":"e1813a27bb182c740f662b127afbdcd14fdf3c4e","modified":1516268029150},{"_id":"public/categories/实习/index.html","hash":"664c70247f4d13cd38fa6badc1278ba7a6f940d8","modified":1516268029150},{"_id":"public/categories/计算机网络/index.html","hash":"5216d6800c1e38a49936963a078bfba35b4be912","modified":1516268029150},{"_id":"public/index.html","hash":"c29751052c56d238c27737adcddca81c1ede3391","modified":1516268029150},{"_id":"public/page/2/index.html","hash":"ed6b423e70fcf0fe75eda6bdcc3865eb1a405dee","modified":1516268029150},{"_id":"public/page/3/index.html","hash":"0d29f491b4821b9c89a39aeb57770f79f76d6ef2","modified":1516268029150},{"_id":"public/page/4/index.html","hash":"fac0729ac2a99ce9d76643e524fc256ddc2ab8a0","modified":1516268029150},{"_id":"public/tags/hello-hexo/index.html","hash":"2465dcdf12ae0ee4a09c59c8e15eed242ef72c57","modified":1516268029150},{"_id":"public/tags/leetcode/index.html","hash":"a471ce7aef6e8c72f10929678f3bce362c6dcc9a","modified":1516268029150},{"_id":"public/tags/stl/index.html","hash":"e3ba0bf489b0a2bfb5fa6a524f2f9eedb202f1bf","modified":1516268029150},{"_id":"public/tags/环境变量/index.html","hash":"ca4d34ea9257bf8dbe3e252b37e205702c7a8fff","modified":1516268029150},{"_id":"public/tags/Linux/index.html","hash":"bcce6a698a6490362f42a03108a9a64f6a9de321","modified":1516268029150},{"_id":"public/tags/Vim/index.html","hash":"779fe5c0de4c3a30e2a8ccd51e45e0f76890979a","modified":1516268029150},{"_id":"public/tags/操作系统/index.html","hash":"a8913bf4e5089786b684e5abc218284cf2a9727a","modified":1516268029150},{"_id":"public/tags/进程控制/index.html","hash":"66d0317f4bb2bd3c808f624a3ecc966bbdb87f0b","modified":1516268029150},{"_id":"public/tags/c-c/index.html","hash":"e1af04fee448c392299b1d2fbd02c8abb2d477a1","modified":1516268029150},{"_id":"public/tags/c语言/index.html","hash":"933a3eae96cc8537a667e38b2905a6621e9953a2","modified":1516268029150},{"_id":"public/tags/gets/index.html","hash":"b13c8418c9f6a71101ab068deb9b058e47ec6bb9","modified":1516268029150},{"_id":"public/tags/scanf/index.html","hash":"fd9a3cb626ffff58ea011c1ff4d00682bf6de230","modified":1516268029150},{"_id":"public/tags/BFS/index.html","hash":"5632f8d1adb2ee83c44d5b720695c96a50453cfe","modified":1516268029150},{"_id":"public/tags/时间函数/index.html","hash":"36c2ce939ba17803df99a6a2a8f8b934fe39cbdd","modified":1516268029150},{"_id":"public/tags/gdb命令/index.html","hash":"1bbafeb5d6f2380aca340022c0b7d2e4edcefaf8","modified":1516268029150},{"_id":"public/tags/git/index.html","hash":"8e6aec9c932c45cba1df75e80c980bbf80e72e40","modified":1516268029151},{"_id":"public/tags/github/index.html","hash":"2c68459770e8b9a1cb28d76f43533627a308c9e8","modified":1516268029151},{"_id":"public/tags/java/index.html","hash":"fc235e64ce27d500c86515704b33c8f90f43ce97","modified":1516268029151},{"_id":"public/tags/linux命令/index.html","hash":"211f61d754bf7caa90be88716a907870035788be","modified":1516268029151},{"_id":"public/tags/linux/index.html","hash":"47179cdee67834e29c32acac797f393243967161","modified":1516268029151},{"_id":"public/tags/指针/index.html","hash":"14f1e9d0baafae2ada6409f97a5610388a6aefe8","modified":1516268029151},{"_id":"public/tags/makefile/index.html","hash":"24e3435a2bd0c7ec0ec71a23e6c510fc920ccffe","modified":1516268029151},{"_id":"public/tags/python/index.html","hash":"9e835e82daf082105e121d18f2f26958cfc6e4ec","modified":1516268029151},{"_id":"public/tags/编码/index.html","hash":"e8e43a7a2241309a2ce4026115769e0c2401e720","modified":1516268029151},{"_id":"public/tags/utf-8/index.html","hash":"ff0ffeb7569d0deca743b9d91c79ea166675c38d","modified":1516268029151},{"_id":"public/tags/unicode/index.html","hash":"25304c3a295cd85a7529cd2b23c45c79201402f8","modified":1516268029151},{"_id":"public/tags/GB2312/index.html","hash":"31a6b8a9a5b825a91ed799f697147abfa763128d","modified":1516268029151},{"_id":"public/tags/markdown/index.html","hash":"c98f54e46a2a2692372cfdfd6cac08ecc4c6d673","modified":1516268029151},{"_id":"public/tags/服务器/index.html","hash":"5f18abd57667cd8bfb497237e599fc252e467708","modified":1516268029151},{"_id":"public/tags/教训/index.html","hash":"74cfb62b004efd5e4e422005ad54a77f7cb792bf","modified":1516268029151},{"_id":"public/tags/信息安全/index.html","hash":"0a89beb1b728cbe56173d49839a6ede1443e1606","modified":1516268029151},{"_id":"public/tags/ssh/index.html","hash":"d7fc8586683662a401b71d4608eda4e837388e2f","modified":1516268029151},{"_id":"public/tags/mysql/index.html","hash":"e5cbfc7e7140f4d6cf22a7a32f70c0d5c37e0044","modified":1516268029151},{"_id":"public/tags/CR/index.html","hash":"5f2a053f958baeae6859a2a7c30c7050696922d9","modified":1516268029151},{"_id":"public/tags/nginx/index.html","hash":"99f99bd5f74e8189fa1424a123c254e78f12f13f","modified":1516268029151},{"_id":"public/tags/tomcat/index.html","hash":"97bef1db95ca266e02194c2ababdf808bbba053b","modified":1516268029151},{"_id":"public/tags/apache/index.html","hash":"a91811991acea54ad5975cfb7cb9d97df70cc2d7","modified":1516268029151},{"_id":"public/tags/jvm/index.html","hash":"3e7ec8bd470c9df4f894982590577a7e2a9b9beb","modified":1516268029151},{"_id":"public/tags/声明和定义/index.html","hash":"40e846c50f86f6f461c3f9ffa28148b77b48d188","modified":1516268029151},{"_id":"public/tags/外部变量/index.html","hash":"5c3f9120380886c1ee1af442e2117de0022c4252","modified":1516268029151},{"_id":"public/tags/分辨率/index.html","hash":"096ea364cddcfa16cafc5063f93d9329f38e7db9","modified":1516268029151},{"_id":"public/tags/像素/index.html","hash":"a68201637e5a5052e41ce092dae4b2e5c77273e3","modified":1516268029151},{"_id":"public/tags/AE/index.html","hash":"2c5e40fdaf9f9aef5fab70a5529f17227f53db2f","modified":1516268029152},{"_id":"public/tags/多线程/index.html","hash":"4ab006ee8b96b245f2e8d1e6b050376ef948b573","modified":1516268029152},{"_id":"public/tags/锁/index.html","hash":"24423b59a3d458b475fd5df568e3da84d92afb3d","modified":1516268029153},{"_id":"public/tags/并发/index.html","hash":"9e11cc085092ce8656eb8cbe3f9a4e860ad77873","modified":1516268029153},{"_id":"public/tags/数据库/index.html","hash":"1ee5648f7ab3774ccdbac3db48cef93f73246d84","modified":1516268029153},{"_id":"public/tags/编译原理/index.html","hash":"39704e4d79859298af4f8da9f066bd503010654f","modified":1516268029153},{"_id":"public/tags/百度/index.html","hash":"66f78314494e14317f2d0ca7470dfc11b1170e13","modified":1516268029153},{"_id":"public/tags/内容生态质量部/index.html","hash":"29e58a0a3d62393345d3009c331fae02d115bb09","modified":1516268029153},{"_id":"public/tags/测试开发/index.html","hash":"087444292308c636e221eed4aa6b3e22fec9b0bc","modified":1516268029154},{"_id":"public/tags/实习/index.html","hash":"523db2260cd45240e9f4d9909ded391ee1720b92","modified":1516268029154},{"_id":"public/tags/代理/index.html","hash":"a5a8793ccb8d9600c78a652e8340d4a07c321c74","modified":1516268029154},{"_id":"public/tags/百度地图-实习生-面试/index.html","hash":"3a4f02e030e6439073c13f19fa5b8ac515efc03c","modified":1516268029154},{"_id":"public/tags/总线/index.html","hash":"314c63c78e6f5ce577438c5b012c573c74bdb29b","modified":1516268029154},{"_id":"public/tags/cpu位数/index.html","hash":"b0e2f04244f1e6486f31b983a42b6a5511cd32f1","modified":1516268029154},{"_id":"public/tags/计算机组成原理/index.html","hash":"3db909f89848d4797e7edbf8dd37c549708e44a9","modified":1516268029154},{"_id":"public/tags/arp/index.html","hash":"8cf131ac329f811ab4dd7253f8671633f9605d97","modified":1516268029166},{"_id":"public/tags/网络/index.html","hash":"89ef53feefeaa00cb400c90cdd0c21c33e8a027f","modified":1516268029166},{"_id":"public/tags/面试/index.html","hash":"3dd1367a37d974dc505c1d307bb90b9f90ea6496","modified":1516268029166},{"_id":"public/tags/编程题/index.html","hash":"b9f196f6f672dd4d52a7f91ae7b75c6916c48ffd","modified":1516268029166},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1516268029166},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1516268029166},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1516268029166},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1516268029166},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1516268029166},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1516268029166},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1516268029166},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1516268029166},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1516268029166},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1516268029166},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1516268029166},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1516268029166},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1516268029166},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1516268029166},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1516268029166},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1516268029166},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1516268029166},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1516268029166},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1516268029167},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1516268029167},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1516268029167},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1516268029167},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1516268029167},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1516268029167},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1516268029167},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1516268029167},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1516268029167},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1516268029167},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1516268029167},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1516268029167},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1516268029167},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1516268029167},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1516268029167},{"_id":"public/images/avatar.png","hash":"d5620290e215dc62895e98c07f2b7ca1213b9b73","modified":1516268030285},{"_id":"public/pictures/git教程2.jpg","hash":"e0bf74b7b055ca66250c59f7d264dc4a7ac976d3","modified":1516268030287},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1516268030323},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1516268030323},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1516268030334},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1516268030334},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1516268030335},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1516268030335},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1516268030335},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1516268030335},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1516268030335},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1516268030335},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1516268030335},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1516268030335},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1516268030335},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1516268030335},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1516268030335},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1516268030335},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1516268030335},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1516268030335},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1516268030335},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1516268030335},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1516268030335},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1516268030335},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1516268030335},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1516268030335},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1516268030335},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1516268030335},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1516268030335},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1516268030335},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1516268030335},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1516268030335},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1516268030335},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1516268030335},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1516268030335},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1516268030335},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1516268030335},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1516268030335},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1516268030336},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1516268030336},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1516268030336},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1516268030336},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1516268030336},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1516268030336},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1516268030336},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1516268030336},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1516268030336},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1516268030336},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1516268030336},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1516268030336},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1516268030336},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1516268030336},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1516268030336},{"_id":"public/css/main.css","hash":"adf4f18213d852b53ec47a1612ece5b0abaad16c","modified":1516268030336},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1516268030336},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1516268030336},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1516268030336},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1516268030336},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1516268030336},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1516268030336},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1516268030336},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1516268030336},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1516268030336},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1516268030336},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1516268030336},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1516268030336},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1516268030336},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1516268030337},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1516268030337},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1516268030337},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1516268030337},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1516268030337},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1516268030337},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1516268030337},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1516268030337},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1516268030338},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1516268030338},{"_id":"public/pictures/git教程1.jpg","hash":"3ba23d752e732fb030b9a7a7583f45cdff4b274a","modified":1516268030352},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1516268030369},{"_id":"public/about/PersonalResume.png","hash":"c08a37534d402ba9379d09a72a1afc7efd700736","modified":1516268030468},{"_id":"public/pictures/计网学习笔记1.jpg","hash":"027f262f7d4bcda1c9b36aa8b2c02301864569b8","modified":1516268030562},{"_id":"source/search.xml","hash":"bef4f5b334c65020d04fb736806d21e639644046","modified":1516268230000}],"Category":[{"name":"hexo","_id":"cjckatu190006hb58njk4021z"},{"name":"c/c++","_id":"cjckatu1n000chb58yjfofhzg"},{"name":"操作系统","_id":"cjckatu1t000ihb58m8rp22v6"},{"name":"Vim","_id":"cjckatu1y000nhb580uzxaf34"},{"name":"面试题","_id":"cjckatu2a0012hb58yrqowemo"},{"name":"Linux","_id":"cjckatu2i001bhb58f1mr5twx"},{"name":"计算机基础","_id":"cjckatu2m001ihb581s3a3gk7"},{"name":"java","_id":"cjckatu2s001nhb582pcqg9z7"},{"name":"python","_id":"cjckatu3b002ahb584ef7y6my"},{"name":"信息安全","_id":"cjckatu3j002hhb58koa97xzc"},{"name":"其他","_id":"cjckatu3n002nhb58hf8jkiz5"},{"name":"实习","_id":"cjckatu45003dhb587irx53d9"},{"name":"计算机网络","_id":"cjckatu49003lhb58rbeijri8"}],"Data":[],"Page":[{"_content":"WTBJDSEkfg","source":"baidu_verify_WTBJDSEkfg.html","raw":"WTBJDSEkfg","date":"2016-10-21T06:57:55.000Z","updated":"2016-10-21T06:57:20.000Z","path":"baidu_verify_WTBJDSEkfg.html","title":"","comments":1,"layout":"page","_id":"cjckattyl0000hb585dqdmvsl","content":"WTBJDSEkfg","excerpt":"","more":"WTBJDSEkfg"},{"_content":"google-site-verification: google449ef8878e3fef9c.html","source":"google449ef8878e3fef9c.html","raw":"google-site-verification: google449ef8878e3fef9c.html","date":"2016-10-21T07:13:53.000Z","updated":"2016-10-21T07:13:32.000Z","path":"google449ef8878e3fef9c.html","title":"","comments":1,"layout":"page","_id":"cjckattyo0001hb58om3hbk2x","content":"google-site-verification: google449ef8878e3fef9c.html","excerpt":"","more":"google-site-verification: google449ef8878e3fef9c.html"},{"title":"About me","date":"2016-10-21T02:44:25.000Z","type":"about","_content":"\n![](PersonalResume.png)   \n　　　[简历下载](https://github.com/LeoCui/PersonalResume/)\n\n　　　[github地址](https://github.com/LeoCui)","source":"about/index.md","raw":"---\ntitle: About me\ndate: 2016-10-21 10:44:25\ntype: \"about\"\n---\n\n![](PersonalResume.png)   \n　　　[简历下载](https://github.com/LeoCui/PersonalResume/)\n\n　　　[github地址](https://github.com/LeoCui)","updated":"2017-09-18T15:53:06.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjckatu0z0002hb58bu9q6sky","content":"<p><img src=\"PersonalResume.png\" alt=\"\"><br>　　　<a href=\"https://github.com/LeoCui/PersonalResume/\" target=\"_blank\" rel=\"external\">简历下载</a></p>\n<p>　　　<a href=\"https://github.com/LeoCui\" target=\"_blank\" rel=\"external\">github地址</a></p>\n","excerpt":"","more":"<p><img src=\"PersonalResume.png\" alt=\"\"><br>　　　<a href=\"https://github.com/LeoCui/PersonalResume/\">简历下载</a></p>\n<p>　　　<a href=\"https://github.com/LeoCui\">github地址</a></p>\n"},{"type":"categories","title":"分类","date":"2018-01-18T07:35:19.000Z","_content":"","source":"categories/index.md","raw":"---\ntype: categories\ntitle: 分类\ndate: 2018-01-18 15:35:19\n---\n","updated":"2018-01-18T07:38:24.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjckatu150004hb58yl6k44u6","content":"","excerpt":"","more":""},{"title":"标签","type":"tags","date":"2018-01-18T07:54:55.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ntype: \"tags\"\ndate: 2018-01-18 15:54:55\n---\n","updated":"2018-01-18T08:03:59.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjckatu1d0008hb58cktynxqv","content":"","excerpt":"","more":""}],"Post":[{"title":"Hello,hexo","date":"2016-10-19T08:33:06.000Z","_content":"\n\n听实验室的师兄说，面试的时候如果有自己的博客或者github，是很好的加分项。我想起了被我丢弃很久的csdn博客，可是csdn还是太乱了，加上自己一直就想自己搭建个自己的博客，然后这几天也没有什么事情，所以就花了一天的时间来利用hexo+github弄了个自己的博客。\n以后要坚持写博客，恩，一定。\n\n几个坑：\n    \n* hexo new 等命令要在hexo_blog目录下进行    \n* 文件命名的时候要加上后缀，否则引用文件的时候找不到  \n* public是你部署到网站上的东西\n* 有时候修改完了之后并没有改变，可能需要删掉public相应的模块重新生成\n* 有时候图片加载不出来，右键查看链接，将图片加到对应的目录中即可\n\n     \n\n参考的博客：http://maoxiangyu.com/Hexo/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97-Next/\n\nhexo官网：https://hexo.io/zh-cn/docs/writing.html\n\n","source":"_posts/Hello-hexo.md","raw":"---\ntitle: 'Hello,hexo'\ndate: 2016-10-19 16:33:06\ntags: hello hexo\ncategories: hexo\n---\n\n\n听实验室的师兄说，面试的时候如果有自己的博客或者github，是很好的加分项。我想起了被我丢弃很久的csdn博客，可是csdn还是太乱了，加上自己一直就想自己搭建个自己的博客，然后这几天也没有什么事情，所以就花了一天的时间来利用hexo+github弄了个自己的博客。\n以后要坚持写博客，恩，一定。\n\n几个坑：\n    \n* hexo new 等命令要在hexo_blog目录下进行    \n* 文件命名的时候要加上后缀，否则引用文件的时候找不到  \n* public是你部署到网站上的东西\n* 有时候修改完了之后并没有改变，可能需要删掉public相应的模块重新生成\n* 有时候图片加载不出来，右键查看链接，将图片加到对应的目录中即可\n\n     \n\n参考的博客：http://maoxiangyu.com/Hexo/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97-Next/\n\nhexo官网：https://hexo.io/zh-cn/docs/writing.html\n\n","slug":"Hello-hexo","published":1,"updated":"2016-11-23T05:22:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu110003hb581ng9ol97","content":"<p>听实验室的师兄说，面试的时候如果有自己的博客或者github，是很好的加分项。我想起了被我丢弃很久的csdn博客，可是csdn还是太乱了，加上自己一直就想自己搭建个自己的博客，然后这几天也没有什么事情，所以就花了一天的时间来利用hexo+github弄了个自己的博客。<br>以后要坚持写博客，恩，一定。</p>\n<p>几个坑：</p>\n<ul>\n<li>hexo new 等命令要在hexo_blog目录下进行    </li>\n<li>文件命名的时候要加上后缀，否则引用文件的时候找不到  </li>\n<li>public是你部署到网站上的东西</li>\n<li>有时候修改完了之后并没有改变，可能需要删掉public相应的模块重新生成</li>\n<li>有时候图片加载不出来，右键查看链接，将图片加到对应的目录中即可</li>\n</ul>\n<p>参考的博客：<a href=\"http://maoxiangyu.com/Hexo/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97-Next/\" target=\"_blank\" rel=\"external\">http://maoxiangyu.com/Hexo/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97-Next/</a></p>\n<p>hexo官网：<a href=\"https://hexo.io/zh-cn/docs/writing.html\" target=\"_blank\" rel=\"external\">https://hexo.io/zh-cn/docs/writing.html</a></p>\n","excerpt":"","more":"<p>听实验室的师兄说，面试的时候如果有自己的博客或者github，是很好的加分项。我想起了被我丢弃很久的csdn博客，可是csdn还是太乱了，加上自己一直就想自己搭建个自己的博客，然后这几天也没有什么事情，所以就花了一天的时间来利用hexo+github弄了个自己的博客。<br>以后要坚持写博客，恩，一定。</p>\n<p>几个坑：</p>\n<ul>\n<li>hexo new 等命令要在hexo_blog目录下进行    </li>\n<li>文件命名的时候要加上后缀，否则引用文件的时候找不到  </li>\n<li>public是你部署到网站上的东西</li>\n<li>有时候修改完了之后并没有改变，可能需要删掉public相应的模块重新生成</li>\n<li>有时候图片加载不出来，右键查看链接，将图片加到对应的目录中即可</li>\n</ul>\n<p>参考的博客：<a href=\"http://maoxiangyu.com/Hexo/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97-Next/\">http://maoxiangyu.com/Hexo/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97-Next/</a></p>\n<p>hexo官网：<a href=\"https://hexo.io/zh-cn/docs/writing.html\">https://hexo.io/zh-cn/docs/writing.html</a></p>\n"},{"title":"Leetcode常用技巧","date":"2016-11-03T10:22:42.000Z","_content":"* return NULL和return 一个空的数组不是一回事\n* unordered_set 和unordered_map和map,set的区别在于前者内部实现是hash，后者是红黑树\n* 常见STL：\n\t* string: push\\_back()，pop\\_back()，+，length()，empty()，s.append(n,c);\n\t* vector: push\\_back()，pop\\_back()，size()，empty()，\n\t\t* vector<int> vector1;\n\t\t* vector<int> vector1(n);//包含n个默认初始化的值\n\t\t* vector<int> vector1(n,val); //包含n个数，默认值val\n\t\t* vector<int> vector1(vector2);\n\t\t* vector<int> vector1=vector2;\n\t\t* vector<int> vector1{1,2,3,4,5};\n\t\t* vector<int> vector1={1,2,3,4,5};\n\t* queue: pop，front，size()，empty()，\n* 经常需要用到匿名对象：比如\n\t* vector\\<vector\\<bool\\>\\> vec(m,vector<bool>(n,false));\n\t* vector.push_back(Test(1,2));Test是一个类\n* earse的删除操作:\n\n```\nfor(iter=vector.begin();iter!=vector.end();){\n\tif(*iter==val){\n\t\titer=iter.erase();\n\t\t//erase返回被删除元素后一个或者vector.end()\n\t}\n\telse{\n\t\titer++;\n\t}\n}\n```\n\n* erase的sort()\n\n```\n\tsort(vector.begin(),vertor.end(),cmp);\n\tbool cmp(type a,type b){\n\t\t\n\t} //cmp函数的意义：如果返回true,就保持a,b这样的顺序\n```\n* 在处理一些边界条件不好处理时，比如处理矩阵时要看四周，这时对于边界情况就不好处理，常见的方法是在周围加一圈，但是现在有更好的办法。   \n\t* 在边界时不成立： （j不在边界）&&（）----在边界为0，后面不用算\n\t* 在边界时成立：（j在边界）||（）---在边界时直接为1\n* 常用的reverse(x.begin(),x.end())在库algorithm中\n* INT_MIN,INT_MAX\n* 二分法的时候：常用mid=left+(right-left)/2,我之前一直以为和mid=(left+right)/2一样。今天才发现不是这样的：   \n\n         \n```\nleft=1;\nright=INT_MAX;\nwhile(left<=right){\n\tmid=(left+right)/2;  //错误，整数溢出了，mid算成负数了\n\tmid=left+(right-left)/2;  //正确\n}\n```\n* 子串：必须连续 \t\t\t\t\t\t\t\t                  \n  子序列：不必连续","source":"_posts/Leetcode常见技巧.md","raw":"---\ntitle: Leetcode常用技巧\ndate: 2016-11-03 18:22:42\ntags:  \n  - leetcode\n  - stl\ncategories: c/c++\n---\n* return NULL和return 一个空的数组不是一回事\n* unordered_set 和unordered_map和map,set的区别在于前者内部实现是hash，后者是红黑树\n* 常见STL：\n\t* string: push\\_back()，pop\\_back()，+，length()，empty()，s.append(n,c);\n\t* vector: push\\_back()，pop\\_back()，size()，empty()，\n\t\t* vector<int> vector1;\n\t\t* vector<int> vector1(n);//包含n个默认初始化的值\n\t\t* vector<int> vector1(n,val); //包含n个数，默认值val\n\t\t* vector<int> vector1(vector2);\n\t\t* vector<int> vector1=vector2;\n\t\t* vector<int> vector1{1,2,3,4,5};\n\t\t* vector<int> vector1={1,2,3,4,5};\n\t* queue: pop，front，size()，empty()，\n* 经常需要用到匿名对象：比如\n\t* vector\\<vector\\<bool\\>\\> vec(m,vector<bool>(n,false));\n\t* vector.push_back(Test(1,2));Test是一个类\n* earse的删除操作:\n\n```\nfor(iter=vector.begin();iter!=vector.end();){\n\tif(*iter==val){\n\t\titer=iter.erase();\n\t\t//erase返回被删除元素后一个或者vector.end()\n\t}\n\telse{\n\t\titer++;\n\t}\n}\n```\n\n* erase的sort()\n\n```\n\tsort(vector.begin(),vertor.end(),cmp);\n\tbool cmp(type a,type b){\n\t\t\n\t} //cmp函数的意义：如果返回true,就保持a,b这样的顺序\n```\n* 在处理一些边界条件不好处理时，比如处理矩阵时要看四周，这时对于边界情况就不好处理，常见的方法是在周围加一圈，但是现在有更好的办法。   \n\t* 在边界时不成立： （j不在边界）&&（）----在边界为0，后面不用算\n\t* 在边界时成立：（j在边界）||（）---在边界时直接为1\n* 常用的reverse(x.begin(),x.end())在库algorithm中\n* INT_MIN,INT_MAX\n* 二分法的时候：常用mid=left+(right-left)/2,我之前一直以为和mid=(left+right)/2一样。今天才发现不是这样的：   \n\n         \n```\nleft=1;\nright=INT_MAX;\nwhile(left<=right){\n\tmid=(left+right)/2;  //错误，整数溢出了，mid算成负数了\n\tmid=left+(right-left)/2;  //正确\n}\n```\n* 子串：必须连续 \t\t\t\t\t\t\t\t                  \n  子序列：不必连续","slug":"Leetcode常见技巧","published":1,"updated":"2017-09-16T15:04:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu160005hb58at9ibud1","content":"<ul>\n<li>return NULL和return 一个空的数组不是一回事</li>\n<li>unordered_set 和unordered_map和map,set的区别在于前者内部实现是hash，后者是红黑树</li>\n<li>常见STL：<ul>\n<li>string: push_back()，pop_back()，+，length()，empty()，s.append(n,c);</li>\n<li>vector: push_back()，pop_back()，size()，empty()，<ul>\n<li>vector<int> vector1;</int></li>\n<li>vector<int> vector1(n);//包含n个默认初始化的值</int></li>\n<li>vector<int> vector1(n,val); //包含n个数，默认值val</int></li>\n<li>vector<int> vector1(vector2);</int></li>\n<li>vector<int> vector1=vector2;</int></li>\n<li>vector<int> vector1{1,2,3,4,5};</int></li>\n<li>vector<int> vector1={1,2,3,4,5};</int></li>\n</ul>\n</li>\n<li>queue: pop，front，size()，empty()，</li>\n</ul>\n</li>\n<li>经常需要用到匿名对象：比如<ul>\n<li>vector\\<vector\\<bool\\>> vec(m,vector<bool>(n,false));</bool></vector\\<bool\\></li>\n<li>vector.push_back(Test(1,2));Test是一个类</li>\n</ul>\n</li>\n<li>earse的删除操作:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">for(iter=vector.begin();iter!=vector.end();)&#123;</div><div class=\"line\">\tif(*iter==val)&#123;</div><div class=\"line\">\t\titer=iter.erase();</div><div class=\"line\">\t\t//erase返回被删除元素后一个或者vector.end()</div><div class=\"line\">\t&#125;</div><div class=\"line\">\telse&#123;</div><div class=\"line\">\t\titer++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>erase的sort()</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sort(vector.begin(),vertor.end(),cmp);</div><div class=\"line\">bool cmp(type a,type b)&#123;</div><div class=\"line\">\t</div><div class=\"line\">&#125; //cmp函数的意义：如果返回true,就保持a,b这样的顺序</div></pre></td></tr></table></figure>\n<ul>\n<li>在处理一些边界条件不好处理时，比如处理矩阵时要看四周，这时对于边界情况就不好处理，常见的方法是在周围加一圈，但是现在有更好的办法。   <ul>\n<li>在边界时不成立： （j不在边界）&amp;&amp;（）—-在边界为0，后面不用算</li>\n<li>在边界时成立：（j在边界）||（）—在边界时直接为1</li>\n</ul>\n</li>\n<li>常用的reverse(x.begin(),x.end())在库algorithm中</li>\n<li>INT_MIN,INT_MAX</li>\n<li>二分法的时候：常用mid=left+(right-left)/2,我之前一直以为和mid=(left+right)/2一样。今天才发现不是这样的：   </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">left=1;</div><div class=\"line\">right=INT_MAX;</div><div class=\"line\">while(left&lt;=right)&#123;</div><div class=\"line\">\tmid=(left+right)/2;  //错误，整数溢出了，mid算成负数了</div><div class=\"line\">\tmid=left+(right-left)/2;  //正确</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>子串：必须连续<br>子序列：不必连续</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>return NULL和return 一个空的数组不是一回事</li>\n<li>unordered_set 和unordered_map和map,set的区别在于前者内部实现是hash，后者是红黑树</li>\n<li>常见STL：<ul>\n<li>string: push_back()，pop_back()，+，length()，empty()，s.append(n,c);</li>\n<li>vector: push_back()，pop_back()，size()，empty()，<ul>\n<li>vector<int> vector1;</li>\n<li>vector<int> vector1(n);//包含n个默认初始化的值</li>\n<li>vector<int> vector1(n,val); //包含n个数，默认值val</li>\n<li>vector<int> vector1(vector2);</li>\n<li>vector<int> vector1=vector2;</li>\n<li>vector<int> vector1{1,2,3,4,5};</li>\n<li>vector<int> vector1={1,2,3,4,5};</li>\n</ul>\n</li>\n<li>queue: pop，front，size()，empty()，</li>\n</ul>\n</li>\n<li>经常需要用到匿名对象：比如<ul>\n<li>vector\\<vector\\<bool\\>> vec(m,vector<bool>(n,false));</li>\n<li>vector.push_back(Test(1,2));Test是一个类</li>\n</ul>\n</li>\n<li>earse的删除操作:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">for(iter=vector.begin();iter!=vector.end();)&#123;</div><div class=\"line\">\tif(*iter==val)&#123;</div><div class=\"line\">\t\titer=iter.erase();</div><div class=\"line\">\t\t//erase返回被删除元素后一个或者vector.end()</div><div class=\"line\">\t&#125;</div><div class=\"line\">\telse&#123;</div><div class=\"line\">\t\titer++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>erase的sort()</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sort(vector.begin(),vertor.end(),cmp);</div><div class=\"line\">bool cmp(type a,type b)&#123;</div><div class=\"line\">\t</div><div class=\"line\">&#125; //cmp函数的意义：如果返回true,就保持a,b这样的顺序</div></pre></td></tr></table></figure>\n<ul>\n<li>在处理一些边界条件不好处理时，比如处理矩阵时要看四周，这时对于边界情况就不好处理，常见的方法是在周围加一圈，但是现在有更好的办法。   <ul>\n<li>在边界时不成立： （j不在边界）&amp;&amp;（）—-在边界为0，后面不用算</li>\n<li>在边界时成立：（j在边界）||（）—在边界时直接为1</li>\n</ul>\n</li>\n<li>常用的reverse(x.begin(),x.end())在库algorithm中</li>\n<li>INT_MIN,INT_MAX</li>\n<li>二分法的时候：常用mid=left+(right-left)/2,我之前一直以为和mid=(left+right)/2一样。今天才发现不是这样的：   </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">left=1;</div><div class=\"line\">right=INT_MAX;</div><div class=\"line\">while(left&lt;=right)&#123;</div><div class=\"line\">\tmid=(left+right)/2;  //错误，整数溢出了，mid算成负数了</div><div class=\"line\">\tmid=left+(right-left)/2;  //正确</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>子串：必须连续<br>子序列：不必连续</li>\n</ul>\n"},{"title":"Linux/Windows环境变量那些事","date":"2016-04-11T12:17:39.000Z","_content":"变量：相当于别名，举个例子：linux 中，HOME就是一个变量，它一般指的是/home/leo,leo是我的用户名。   \n变量名不能单独出现,必须加上 “美元符”(linux)\n或%%(windows)表示引用它的值。   \n在linux中:   可以通过echo $HOME查看变量的值   \n在windows中： echo %HOME%\n\n环境变量：path ,path实质上是一种特殊的变量。它等于一系列路径（windows用;隔开,linux用：隔开）。   \nLinux的命令实质上就是在执行程序，执行程序时，系统会到当前目录寻找程序路径，找不到就到环境变量对应的路径中去寻找              \n环境变量的作用是当执行或者链接某个程序的时候，不需要切换到具体的目录下在执行。\n\n顺便说一下：命令行中执行某个程序，只要写出路径即可，之前我还一直以为./是执行的意思呢，真是too young!!\nupdate:今天才发现要想执行某程序：   \n1.输入完整路径 如/home/leo/test   \n2.输入当前目录 ./test ,在当前目录下只输入test 是不行的。  \n3.只输入文件名，这种要求必须设置环境变量\n\n\n那么怎么设置环境变量呢？\nwindows:  直接搜索“环境变量”，在path路径下添加要添加的目录(不要忘记;)\nlinux下，在/etc下找到profile文件，用gedit 打开，export PATH=自己路径：$PATH，保存\n\n\nlinux还有一个命令：alias\nalias看起来仿佛跟变量很像，其实是不同的。alias可以看成是一种批处理，它可以将一个或多个命令重命名为一个命令。\nalias:  查看alias内容\nalias  test=\"cd /home;ls;\" ，可以将一系列命令命名成一个。(临时命名，当前窗口有效)   \n如果想永远命名：在home/leo中找到.bashrc文件，然后找到alias部分，添加自定义命名，如alias  test=\"cd /home;ls;\" \n那么可能有人问？怎么在windows中实现alias呢，可以通过批处理实现。举个例子，在windows中想用ls,就可以创建ls.bat,内容为dir. 然后ls就可以用了。    \ntips:  alias 后面可以跟参数。\nbat文件后面好像不可以跟参数。\n\n\n","source":"_posts/Linux-Windows环境变量那些事.md","raw":"---\ntitle: Linux/Windows环境变量那些事\ndate: 2016-04-11 20:17:39\ntags: \n  - 环境变量\n  - Linux\ncategories: 操作系统\n---\n变量：相当于别名，举个例子：linux 中，HOME就是一个变量，它一般指的是/home/leo,leo是我的用户名。   \n变量名不能单独出现,必须加上 “美元符”(linux)\n或%%(windows)表示引用它的值。   \n在linux中:   可以通过echo $HOME查看变量的值   \n在windows中： echo %HOME%\n\n环境变量：path ,path实质上是一种特殊的变量。它等于一系列路径（windows用;隔开,linux用：隔开）。   \nLinux的命令实质上就是在执行程序，执行程序时，系统会到当前目录寻找程序路径，找不到就到环境变量对应的路径中去寻找              \n环境变量的作用是当执行或者链接某个程序的时候，不需要切换到具体的目录下在执行。\n\n顺便说一下：命令行中执行某个程序，只要写出路径即可，之前我还一直以为./是执行的意思呢，真是too young!!\nupdate:今天才发现要想执行某程序：   \n1.输入完整路径 如/home/leo/test   \n2.输入当前目录 ./test ,在当前目录下只输入test 是不行的。  \n3.只输入文件名，这种要求必须设置环境变量\n\n\n那么怎么设置环境变量呢？\nwindows:  直接搜索“环境变量”，在path路径下添加要添加的目录(不要忘记;)\nlinux下，在/etc下找到profile文件，用gedit 打开，export PATH=自己路径：$PATH，保存\n\n\nlinux还有一个命令：alias\nalias看起来仿佛跟变量很像，其实是不同的。alias可以看成是一种批处理，它可以将一个或多个命令重命名为一个命令。\nalias:  查看alias内容\nalias  test=\"cd /home;ls;\" ，可以将一系列命令命名成一个。(临时命名，当前窗口有效)   \n如果想永远命名：在home/leo中找到.bashrc文件，然后找到alias部分，添加自定义命名，如alias  test=\"cd /home;ls;\" \n那么可能有人问？怎么在windows中实现alias呢，可以通过批处理实现。举个例子，在windows中想用ls,就可以创建ls.bat,内容为dir. 然后ls就可以用了。    \ntips:  alias 后面可以跟参数。\nbat文件后面好像不可以跟参数。\n\n\n","slug":"Linux-Windows环境变量那些事","published":1,"updated":"2016-10-21T05:55:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu1h0009hb585hzm9gy4","content":"<p>变量：相当于别名，举个例子：linux 中，HOME就是一个变量，它一般指的是/home/leo,leo是我的用户名。<br>变量名不能单独出现,必须加上 “美元符”(linux)<br>或%%(windows)表示引用它的值。<br>在linux中:   可以通过echo $HOME查看变量的值<br>在windows中： echo %HOME%</p>\n<p>环境变量：path ,path实质上是一种特殊的变量。它等于一系列路径（windows用;隔开,linux用：隔开）。<br>Linux的命令实质上就是在执行程序，执行程序时，系统会到当前目录寻找程序路径，找不到就到环境变量对应的路径中去寻找<br>环境变量的作用是当执行或者链接某个程序的时候，不需要切换到具体的目录下在执行。</p>\n<p>顺便说一下：命令行中执行某个程序，只要写出路径即可，之前我还一直以为./是执行的意思呢，真是too young!!<br>update:今天才发现要想执行某程序：<br>1.输入完整路径 如/home/leo/test<br>2.输入当前目录 ./test ,在当前目录下只输入test 是不行的。<br>3.只输入文件名，这种要求必须设置环境变量</p>\n<p>那么怎么设置环境变量呢？<br>windows:  直接搜索“环境变量”，在path路径下添加要添加的目录(不要忘记;)<br>linux下，在/etc下找到profile文件，用gedit 打开，export PATH=自己路径：$PATH，保存</p>\n<p>linux还有一个命令：alias<br>alias看起来仿佛跟变量很像，其实是不同的。alias可以看成是一种批处理，它可以将一个或多个命令重命名为一个命令。<br>alias:  查看alias内容<br>alias  test=”cd /home;ls;” ，可以将一系列命令命名成一个。(临时命名，当前窗口有效)<br>如果想永远命名：在home/leo中找到.bashrc文件，然后找到alias部分，添加自定义命名，如alias  test=”cd /home;ls;”<br>那么可能有人问？怎么在windows中实现alias呢，可以通过批处理实现。举个例子，在windows中想用ls,就可以创建ls.bat,内容为dir. 然后ls就可以用了。<br>tips:  alias 后面可以跟参数。<br>bat文件后面好像不可以跟参数。</p>\n","excerpt":"","more":"<p>变量：相当于别名，举个例子：linux 中，HOME就是一个变量，它一般指的是/home/leo,leo是我的用户名。<br>变量名不能单独出现,必须加上 “美元符”(linux)<br>或%%(windows)表示引用它的值。<br>在linux中:   可以通过echo $HOME查看变量的值<br>在windows中： echo %HOME%</p>\n<p>环境变量：path ,path实质上是一种特殊的变量。它等于一系列路径（windows用;隔开,linux用：隔开）。<br>Linux的命令实质上就是在执行程序，执行程序时，系统会到当前目录寻找程序路径，找不到就到环境变量对应的路径中去寻找<br>环境变量的作用是当执行或者链接某个程序的时候，不需要切换到具体的目录下在执行。</p>\n<p>顺便说一下：命令行中执行某个程序，只要写出路径即可，之前我还一直以为./是执行的意思呢，真是too young!!<br>update:今天才发现要想执行某程序：<br>1.输入完整路径 如/home/leo/test<br>2.输入当前目录 ./test ,在当前目录下只输入test 是不行的。<br>3.只输入文件名，这种要求必须设置环境变量</p>\n<p>那么怎么设置环境变量呢？<br>windows:  直接搜索“环境变量”，在path路径下添加要添加的目录(不要忘记;)<br>linux下，在/etc下找到profile文件，用gedit 打开，export PATH=自己路径：$PATH，保存</p>\n<p>linux还有一个命令：alias<br>alias看起来仿佛跟变量很像，其实是不同的。alias可以看成是一种批处理，它可以将一个或多个命令重命名为一个命令。<br>alias:  查看alias内容<br>alias  test=”cd /home;ls;” ，可以将一系列命令命名成一个。(临时命名，当前窗口有效)<br>如果想永远命名：在home/leo中找到.bashrc文件，然后找到alias部分，添加自定义命名，如alias  test=”cd /home;ls;”<br>那么可能有人问？怎么在windows中实现alias呢，可以通过批处理实现。举个例子，在windows中想用ls,就可以创建ls.bat,内容为dir. 然后ls就可以用了。<br>tips:  alias 后面可以跟参数。<br>bat文件后面好像不可以跟参数。</p>\n"},{"title":"Vim中的常见操作","date":"2017-01-01T11:24:10.000Z","_content":"\n* 几种模式\n\t* Normal模式：按Esc进入\n\t* Insert模式：按i进入\n\t* Visual模式：按v进入\n* Vim 中复制粘贴：\n\t* 选中，然后右键，这种缺点会将行号也复制进去\n\t* Visual模式下，用上下箭头选中，然后按y复制，按p粘贴\n\t* Normal模式下，输入row1,row2+y，表示复制从row1到row2的行，然后找到指定位置按p粘贴\n\n* vim 中复制粘贴（简单方法）\n\t* yy + p :复制一行粘贴\n\t* set mouse=v : 然后选择即复制，可以在任何地方粘贴（强烈推荐）\n* set paste:解决从其他地方粘贴过来乱码的问题\n* dd: 删除某一行\n* G: 跳到末尾，gg:跳到开头\n* fn+home:跳到一行开头\n* fn+end: 跳到一行末尾\n* %s/word1/word2/g:批量将word1替换成word2,%表示全文搜索，g表示全文替换，转义字符是\\\n* set mouse=*: 表示只在 * 模式下使用鼠标功能。使用鼠标功能的话vim的光标会随着鼠标移动，但是缺点是无法复制。默认情况下set mouse=a，无法复制。set mouse=v的话，也就是只在v模式下使用鼠标功能，其他模式下则可以右键复制。\n\n* 批量缩进： visual模式下 > <号","source":"_posts/Vim中的常见操作.md","raw":"---\ntitle: Vim中的常见操作\ndate: 2017-01-01 19:24:10\ntags:\n  - Vim\ncategories: Vim\n---\n\n* 几种模式\n\t* Normal模式：按Esc进入\n\t* Insert模式：按i进入\n\t* Visual模式：按v进入\n* Vim 中复制粘贴：\n\t* 选中，然后右键，这种缺点会将行号也复制进去\n\t* Visual模式下，用上下箭头选中，然后按y复制，按p粘贴\n\t* Normal模式下，输入row1,row2+y，表示复制从row1到row2的行，然后找到指定位置按p粘贴\n\n* vim 中复制粘贴（简单方法）\n\t* yy + p :复制一行粘贴\n\t* set mouse=v : 然后选择即复制，可以在任何地方粘贴（强烈推荐）\n* set paste:解决从其他地方粘贴过来乱码的问题\n* dd: 删除某一行\n* G: 跳到末尾，gg:跳到开头\n* fn+home:跳到一行开头\n* fn+end: 跳到一行末尾\n* %s/word1/word2/g:批量将word1替换成word2,%表示全文搜索，g表示全文替换，转义字符是\\\n* set mouse=*: 表示只在 * 模式下使用鼠标功能。使用鼠标功能的话vim的光标会随着鼠标移动，但是缺点是无法复制。默认情况下set mouse=a，无法复制。set mouse=v的话，也就是只在v模式下使用鼠标功能，其他模式下则可以右键复制。\n\n* 批量缩进： visual模式下 > <号","slug":"Vim中的常见操作","published":1,"updated":"2017-11-15T15:52:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu1j000ahb58cphgmhve","content":"<ul>\n<li>几种模式<ul>\n<li>Normal模式：按Esc进入</li>\n<li>Insert模式：按i进入</li>\n<li>Visual模式：按v进入</li>\n</ul>\n</li>\n<li><p>Vim 中复制粘贴：</p>\n<ul>\n<li>选中，然后右键，这种缺点会将行号也复制进去</li>\n<li>Visual模式下，用上下箭头选中，然后按y复制，按p粘贴</li>\n<li>Normal模式下，输入row1,row2+y，表示复制从row1到row2的行，然后找到指定位置按p粘贴</li>\n</ul>\n</li>\n<li><p>vim 中复制粘贴（简单方法）</p>\n<ul>\n<li>yy + p :复制一行粘贴</li>\n<li>set mouse=v : 然后选择即复制，可以在任何地方粘贴（强烈推荐）</li>\n</ul>\n</li>\n<li>set paste:解决从其他地方粘贴过来乱码的问题</li>\n<li>dd: 删除某一行</li>\n<li>G: 跳到末尾，gg:跳到开头</li>\n<li>fn+home:跳到一行开头</li>\n<li>fn+end: 跳到一行末尾</li>\n<li>%s/word1/word2/g:批量将word1替换成word2,%表示全文搜索，g表示全文替换，转义字符是\\</li>\n<li><p>set mouse=<em>: 表示只在 </em> 模式下使用鼠标功能。使用鼠标功能的话vim的光标会随着鼠标移动，但是缺点是无法复制。默认情况下set mouse=a，无法复制。set mouse=v的话，也就是只在v模式下使用鼠标功能，其他模式下则可以右键复制。</p>\n</li>\n<li><p>批量缩进： visual模式下 &gt; &lt;号</p>\n</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>几种模式<ul>\n<li>Normal模式：按Esc进入</li>\n<li>Insert模式：按i进入</li>\n<li>Visual模式：按v进入</li>\n</ul>\n</li>\n<li><p>Vim 中复制粘贴：</p>\n<ul>\n<li>选中，然后右键，这种缺点会将行号也复制进去</li>\n<li>Visual模式下，用上下箭头选中，然后按y复制，按p粘贴</li>\n<li>Normal模式下，输入row1,row2+y，表示复制从row1到row2的行，然后找到指定位置按p粘贴</li>\n</ul>\n</li>\n<li><p>vim 中复制粘贴（简单方法）</p>\n<ul>\n<li>yy + p :复制一行粘贴</li>\n<li>set mouse=v : 然后选择即复制，可以在任何地方粘贴（强烈推荐）</li>\n</ul>\n</li>\n<li>set paste:解决从其他地方粘贴过来乱码的问题</li>\n<li>dd: 删除某一行</li>\n<li>G: 跳到末尾，gg:跳到开头</li>\n<li>fn+home:跳到一行开头</li>\n<li>fn+end: 跳到一行末尾</li>\n<li>%s/word1/word2/g:批量将word1替换成word2,%表示全文搜索，g表示全文替换，转义字符是\\</li>\n<li><p>set mouse=<em>: 表示只在 </em> 模式下使用鼠标功能。使用鼠标功能的话vim的光标会随着鼠标移动，但是缺点是无法复制。默认情况下set mouse=a，无法复制。set mouse=v的话，也就是只在v模式下使用鼠标功能，其他模式下则可以右键复制。</p>\n</li>\n<li><p>批量缩进： visual模式下 &gt; &lt;号</p>\n</li>\n</ul>\n"},{"title":"Windows/Linux进程控制实验","date":"2016-04-11T12:11:16.000Z","_content":"\n最近做了操作系统的实验，进程控制，踩了不少坑。现在总结下。\nLiunx：先放代码\n\n```\n#include<iostream>\n#include<cstdlib>     //sleep()\n#include<unistd.h>    //fork\n#include<sys/time.h>  //gettimeofday\n#include<sys/wait.h>  //wait\n#include<ctime>       //localtime\nvoid outputTime(struct tm*time,int ms);\nusing namespace std;\nint main(int argc,char*argv[])\n{\n    struct timeval startTime;\n    struct timeval endTime;\n    struct timezone zone;\n    time_t startTime_t;\n    time_t endTime_t;\n    struct tm *startTime_tm;\n    struct tm *endTime_tm;\n    int pid=fork();\n    if(pid<0){\n        cout<<\"error\"<<endl;\n        exit(0);\n    }\n    if(pid==0){   //子进程\n        execvp(argv[1],NULL); \n\tcout<<\"execv error!\"<<endl;\n\texit(0);\n    }\n    if(pid>0){    //父进程\n        gettimeofday(&startTime,&zone);\n        wait(0);   //等待子进程结束\n        gettimeofday(&endTime, &zone);\n        long long int durtion=(endTime.tv_sec-startTime.tv_sec)*1000+endTime.tv_usec-startTime.tv_usec;\n        startTime_t=(time_t)startTime.tv_sec;  //转换成time_t格式\n        endTime_t=(time_t)endTime.tv_sec;\n        startTime_tm=localtime(&startTime_t);  //转换成struct tm格式\n        endTime_tm=localtime(&endTime_t);\n        cout<<\"The start time is:  \";\n        outputTime(startTime_tm,startTime.tv_usec/1000);\n        cout<<\"The end time is:    \";\n        outputTime(endTime_tm,endTime.tv_usec/1000);\n        cout<<\"the durtion is \"<<durtion<<\"ms\"<<endl;\n    }\n    return 0;\n}\n\nvoid outputTime(struct tm*time,int ms){\n    cout<<(*time).tm_year+1900<<\"/\"<<(*time).tm_mon+1<<\"/\"<<(*time).tm_mday<<\"  \"<<(*time).tm_hour<<\":\"<<(*time).tm_min<<\":\"<<(*time).tm_sec<<\":\"<<ms<<endl;\n}\n\n```\n几个坑：   \n1.之前一直不知道主函数要什么参数，这下知道了。主要是在命令行运行中可能需要传入参数。比如启动一个子进程。     \n2. 每个函数对应的头文件要搞清楚。    \n3.execvp: exec类的函数都是杀死现有进程，用新进程代替，进程号不变。但是execvp()，可以识别环境变量，其他不可以。换句话说：如果传入参数是有环境变量的，而且用的是execvp()，那么只传函数名是可以的。两个条件缺一不可。   \n4.wait(0)可以，wait(NULL)本来应该是可以的，但是不知道为什么在linux中不可以。\n\n\nwindows:\n\n```\n#include<iostream>\n#include<string>\n#include<windows.h>\nusing namespace std;\nvoid  outputTime(SYSTEMTIME&time);\nint getDurtion(SYSTEMTIME&startTime, SYSTEMTIME&endTime);\nint main(int argc, char* argv[]) {               //L表示unicode编码，c++和java不同，内部可能有几种编码，烦。。\n\tSYSTEMTIME startTime;   //LP表示指针的意思\n\tSYSTEMTIME endTime;     \n\tGetSystemTime(&startTime);\n\tSTARTUPINFOA si;  //后面有A表示char,否则是wchar\n\tPROCESS_INFORMATION pi;\n\tmemset(&si,0, sizeof(si));         \n\tsi.cb = sizeof(STARTUPINFO);\n\tsi.dwFlags = STARTF_USESHOWWINDOW;  // dwflags参数表明子进程是否用wshowWindow这个参数\n\tsi.wShowWindow = TRUE;           // 当创建一个进程，wshowWindows作为参数传递给main函数,true 表示显示子进程的窗口\n\tbool flag=CreateProcessA(NULL,argv[1], NULL, NULL, FALSE, CREATE_NEW_CONSOLE, NULL, NULL, &si, &pi);\n\tif (flag) {                  //createProcessA表示第二个参数是char[],createProcess表示wchar[](unicode)\n\t\tGetLocalTime(&startTime);\n\t\tWaitForSingleObject(pi.hProcess, INFINITE);  //等待子进程结束\n\t\tGetLocalTime(&endTime);\n\t\tint durtion = getDurtion(startTime, endTime);\n\t\tcout << \"The start time is: \";\n\t\toutputTime(startTime);\n\t\tcout << \"The end time is:   \";\n\t\toutputTime(endTime);\n\t\tcout << \"The durtion is \" << durtion << \"ms\" << endl;\n\t}\n\telse {\n\t\tcout << \"The chiidProcess failed to be created!!\";\n\t}\n\tgetchar();\n}\nvoid  outputTime(SYSTEMTIME&time){\n\tcout << time.wYear << \"/\" << time.wMonth << \"/\" << time.wDay << \"  \" << time.wHour << \":\" << time.wMinute <<\n\t\t\":\" << time.wSecond << \":\" << time.wMilliseconds<<endl;\n}\nint getDurtion(SYSTEMTIME&startTime, SYSTEMTIME&endTime) {\n\tint tempHour = endTime.wHour - startTime.wHour;\n\tint tempMinute = endTime.wMinute - startTime.wMinute;\n\tint tempSecond = endTime.wSecond - startTime.wSecond;\n\tint tempMillSecond = endTime.wMilliseconds - startTime.wMilliseconds;\n\tint duration = ((tempHour * 60 + tempMinute) * 60 + tempSecond) * 1000 + tempMillSecond;\n\treturn duration;\n}\n```\n\n几个坑：        \n1.编码：c++ 编码是乱的，没有一个统一的编码，有char,wchar 涉及到中文的时候就很容易出错。   \n解决方法：createProcessA(),STARTUPINFOA,这样就都是char,路径也别设成中文就可以。  \n2. 配环境的时候，经常缺头文件，需要找到头文件的目录，然后将其添加到path 中就可以。   \nlib: 库文件，具体实现   \ninclude: 头文件，声明和定义     \n3.手动编译：cl  test.cpp   \n编译命令：\ngcc,g++: 是linux\nmicrosoft: cl","source":"_posts/Windows-Linux进程控制实验.md","raw":"---\ntitle: Windows/Linux进程控制实验\ndate: 2016-04-11 20:11:16\ntags: \n  - 操作系统\n  - 进程控制\n  - Linux\ncategories: 操作系统\n---\n\n最近做了操作系统的实验，进程控制，踩了不少坑。现在总结下。\nLiunx：先放代码\n\n```\n#include<iostream>\n#include<cstdlib>     //sleep()\n#include<unistd.h>    //fork\n#include<sys/time.h>  //gettimeofday\n#include<sys/wait.h>  //wait\n#include<ctime>       //localtime\nvoid outputTime(struct tm*time,int ms);\nusing namespace std;\nint main(int argc,char*argv[])\n{\n    struct timeval startTime;\n    struct timeval endTime;\n    struct timezone zone;\n    time_t startTime_t;\n    time_t endTime_t;\n    struct tm *startTime_tm;\n    struct tm *endTime_tm;\n    int pid=fork();\n    if(pid<0){\n        cout<<\"error\"<<endl;\n        exit(0);\n    }\n    if(pid==0){   //子进程\n        execvp(argv[1],NULL); \n\tcout<<\"execv error!\"<<endl;\n\texit(0);\n    }\n    if(pid>0){    //父进程\n        gettimeofday(&startTime,&zone);\n        wait(0);   //等待子进程结束\n        gettimeofday(&endTime, &zone);\n        long long int durtion=(endTime.tv_sec-startTime.tv_sec)*1000+endTime.tv_usec-startTime.tv_usec;\n        startTime_t=(time_t)startTime.tv_sec;  //转换成time_t格式\n        endTime_t=(time_t)endTime.tv_sec;\n        startTime_tm=localtime(&startTime_t);  //转换成struct tm格式\n        endTime_tm=localtime(&endTime_t);\n        cout<<\"The start time is:  \";\n        outputTime(startTime_tm,startTime.tv_usec/1000);\n        cout<<\"The end time is:    \";\n        outputTime(endTime_tm,endTime.tv_usec/1000);\n        cout<<\"the durtion is \"<<durtion<<\"ms\"<<endl;\n    }\n    return 0;\n}\n\nvoid outputTime(struct tm*time,int ms){\n    cout<<(*time).tm_year+1900<<\"/\"<<(*time).tm_mon+1<<\"/\"<<(*time).tm_mday<<\"  \"<<(*time).tm_hour<<\":\"<<(*time).tm_min<<\":\"<<(*time).tm_sec<<\":\"<<ms<<endl;\n}\n\n```\n几个坑：   \n1.之前一直不知道主函数要什么参数，这下知道了。主要是在命令行运行中可能需要传入参数。比如启动一个子进程。     \n2. 每个函数对应的头文件要搞清楚。    \n3.execvp: exec类的函数都是杀死现有进程，用新进程代替，进程号不变。但是execvp()，可以识别环境变量，其他不可以。换句话说：如果传入参数是有环境变量的，而且用的是execvp()，那么只传函数名是可以的。两个条件缺一不可。   \n4.wait(0)可以，wait(NULL)本来应该是可以的，但是不知道为什么在linux中不可以。\n\n\nwindows:\n\n```\n#include<iostream>\n#include<string>\n#include<windows.h>\nusing namespace std;\nvoid  outputTime(SYSTEMTIME&time);\nint getDurtion(SYSTEMTIME&startTime, SYSTEMTIME&endTime);\nint main(int argc, char* argv[]) {               //L表示unicode编码，c++和java不同，内部可能有几种编码，烦。。\n\tSYSTEMTIME startTime;   //LP表示指针的意思\n\tSYSTEMTIME endTime;     \n\tGetSystemTime(&startTime);\n\tSTARTUPINFOA si;  //后面有A表示char,否则是wchar\n\tPROCESS_INFORMATION pi;\n\tmemset(&si,0, sizeof(si));         \n\tsi.cb = sizeof(STARTUPINFO);\n\tsi.dwFlags = STARTF_USESHOWWINDOW;  // dwflags参数表明子进程是否用wshowWindow这个参数\n\tsi.wShowWindow = TRUE;           // 当创建一个进程，wshowWindows作为参数传递给main函数,true 表示显示子进程的窗口\n\tbool flag=CreateProcessA(NULL,argv[1], NULL, NULL, FALSE, CREATE_NEW_CONSOLE, NULL, NULL, &si, &pi);\n\tif (flag) {                  //createProcessA表示第二个参数是char[],createProcess表示wchar[](unicode)\n\t\tGetLocalTime(&startTime);\n\t\tWaitForSingleObject(pi.hProcess, INFINITE);  //等待子进程结束\n\t\tGetLocalTime(&endTime);\n\t\tint durtion = getDurtion(startTime, endTime);\n\t\tcout << \"The start time is: \";\n\t\toutputTime(startTime);\n\t\tcout << \"The end time is:   \";\n\t\toutputTime(endTime);\n\t\tcout << \"The durtion is \" << durtion << \"ms\" << endl;\n\t}\n\telse {\n\t\tcout << \"The chiidProcess failed to be created!!\";\n\t}\n\tgetchar();\n}\nvoid  outputTime(SYSTEMTIME&time){\n\tcout << time.wYear << \"/\" << time.wMonth << \"/\" << time.wDay << \"  \" << time.wHour << \":\" << time.wMinute <<\n\t\t\":\" << time.wSecond << \":\" << time.wMilliseconds<<endl;\n}\nint getDurtion(SYSTEMTIME&startTime, SYSTEMTIME&endTime) {\n\tint tempHour = endTime.wHour - startTime.wHour;\n\tint tempMinute = endTime.wMinute - startTime.wMinute;\n\tint tempSecond = endTime.wSecond - startTime.wSecond;\n\tint tempMillSecond = endTime.wMilliseconds - startTime.wMilliseconds;\n\tint duration = ((tempHour * 60 + tempMinute) * 60 + tempSecond) * 1000 + tempMillSecond;\n\treturn duration;\n}\n```\n\n几个坑：        \n1.编码：c++ 编码是乱的，没有一个统一的编码，有char,wchar 涉及到中文的时候就很容易出错。   \n解决方法：createProcessA(),STARTUPINFOA,这样就都是char,路径也别设成中文就可以。  \n2. 配环境的时候，经常缺头文件，需要找到头文件的目录，然后将其添加到path 中就可以。   \nlib: 库文件，具体实现   \ninclude: 头文件，声明和定义     \n3.手动编译：cl  test.cpp   \n编译命令：\ngcc,g++: 是linux\nmicrosoft: cl","slug":"Windows-Linux进程控制实验","published":1,"updated":"2016-10-21T05:47:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu1l000bhb58c3j6w559","content":"<p>最近做了操作系统的实验，进程控制，踩了不少坑。现在总结下。<br>Liunx：先放代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include&lt;iostream&gt;</div><div class=\"line\">#include&lt;cstdlib&gt;     //sleep()</div><div class=\"line\">#include&lt;unistd.h&gt;    //fork</div><div class=\"line\">#include&lt;sys/time.h&gt;  //gettimeofday</div><div class=\"line\">#include&lt;sys/wait.h&gt;  //wait</div><div class=\"line\">#include&lt;ctime&gt;       //localtime</div><div class=\"line\">void outputTime(struct tm*time,int ms);</div><div class=\"line\">using namespace std;</div><div class=\"line\">int main(int argc,char*argv[])</div><div class=\"line\">&#123;</div><div class=\"line\">    struct timeval startTime;</div><div class=\"line\">    struct timeval endTime;</div><div class=\"line\">    struct timezone zone;</div><div class=\"line\">    time_t startTime_t;</div><div class=\"line\">    time_t endTime_t;</div><div class=\"line\">    struct tm *startTime_tm;</div><div class=\"line\">    struct tm *endTime_tm;</div><div class=\"line\">    int pid=fork();</div><div class=\"line\">    if(pid&lt;0)&#123;</div><div class=\"line\">        cout&lt;&lt;&quot;error&quot;&lt;&lt;endl;</div><div class=\"line\">        exit(0);</div><div class=\"line\">    &#125;</div><div class=\"line\">    if(pid==0)&#123;   //子进程</div><div class=\"line\">        execvp(argv[1],NULL); </div><div class=\"line\">\tcout&lt;&lt;&quot;execv error!&quot;&lt;&lt;endl;</div><div class=\"line\">\texit(0);</div><div class=\"line\">    &#125;</div><div class=\"line\">    if(pid&gt;0)&#123;    //父进程</div><div class=\"line\">        gettimeofday(&amp;startTime,&amp;zone);</div><div class=\"line\">        wait(0);   //等待子进程结束</div><div class=\"line\">        gettimeofday(&amp;endTime, &amp;zone);</div><div class=\"line\">        long long int durtion=(endTime.tv_sec-startTime.tv_sec)*1000+endTime.tv_usec-startTime.tv_usec;</div><div class=\"line\">        startTime_t=(time_t)startTime.tv_sec;  //转换成time_t格式</div><div class=\"line\">        endTime_t=(time_t)endTime.tv_sec;</div><div class=\"line\">        startTime_tm=localtime(&amp;startTime_t);  //转换成struct tm格式</div><div class=\"line\">        endTime_tm=localtime(&amp;endTime_t);</div><div class=\"line\">        cout&lt;&lt;&quot;The start time is:  &quot;;</div><div class=\"line\">        outputTime(startTime_tm,startTime.tv_usec/1000);</div><div class=\"line\">        cout&lt;&lt;&quot;The end time is:    &quot;;</div><div class=\"line\">        outputTime(endTime_tm,endTime.tv_usec/1000);</div><div class=\"line\">        cout&lt;&lt;&quot;the durtion is &quot;&lt;&lt;durtion&lt;&lt;&quot;ms&quot;&lt;&lt;endl;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void outputTime(struct tm*time,int ms)&#123;</div><div class=\"line\">    cout&lt;&lt;(*time).tm_year+1900&lt;&lt;&quot;/&quot;&lt;&lt;(*time).tm_mon+1&lt;&lt;&quot;/&quot;&lt;&lt;(*time).tm_mday&lt;&lt;&quot;  &quot;&lt;&lt;(*time).tm_hour&lt;&lt;&quot;:&quot;&lt;&lt;(*time).tm_min&lt;&lt;&quot;:&quot;&lt;&lt;(*time).tm_sec&lt;&lt;&quot;:&quot;&lt;&lt;ms&lt;&lt;endl;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>几个坑：<br>1.之前一直不知道主函数要什么参数，这下知道了。主要是在命令行运行中可能需要传入参数。比如启动一个子进程。     </p>\n<ol>\n<li>每个函数对应的头文件要搞清楚。<br>3.execvp: exec类的函数都是杀死现有进程，用新进程代替，进程号不变。但是execvp()，可以识别环境变量，其他不可以。换句话说：如果传入参数是有环境变量的，而且用的是execvp()，那么只传函数名是可以的。两个条件缺一不可。<br>4.wait(0)可以，wait(NULL)本来应该是可以的，但是不知道为什么在linux中不可以。</li>\n</ol>\n<p>windows:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include&lt;iostream&gt;</div><div class=\"line\">#include&lt;string&gt;</div><div class=\"line\">#include&lt;windows.h&gt;</div><div class=\"line\">using namespace std;</div><div class=\"line\">void  outputTime(SYSTEMTIME&amp;time);</div><div class=\"line\">int getDurtion(SYSTEMTIME&amp;startTime, SYSTEMTIME&amp;endTime);</div><div class=\"line\">int main(int argc, char* argv[]) &#123;               //L表示unicode编码，c++和java不同，内部可能有几种编码，烦。。</div><div class=\"line\">\tSYSTEMTIME startTime;   //LP表示指针的意思</div><div class=\"line\">\tSYSTEMTIME endTime;     </div><div class=\"line\">\tGetSystemTime(&amp;startTime);</div><div class=\"line\">\tSTARTUPINFOA si;  //后面有A表示char,否则是wchar</div><div class=\"line\">\tPROCESS_INFORMATION pi;</div><div class=\"line\">\tmemset(&amp;si,0, sizeof(si));         </div><div class=\"line\">\tsi.cb = sizeof(STARTUPINFO);</div><div class=\"line\">\tsi.dwFlags = STARTF_USESHOWWINDOW;  // dwflags参数表明子进程是否用wshowWindow这个参数</div><div class=\"line\">\tsi.wShowWindow = TRUE;           // 当创建一个进程，wshowWindows作为参数传递给main函数,true 表示显示子进程的窗口</div><div class=\"line\">\tbool flag=CreateProcessA(NULL,argv[1], NULL, NULL, FALSE, CREATE_NEW_CONSOLE, NULL, NULL, &amp;si, &amp;pi);</div><div class=\"line\">\tif (flag) &#123;                  //createProcessA表示第二个参数是char[],createProcess表示wchar[](unicode)</div><div class=\"line\">\t\tGetLocalTime(&amp;startTime);</div><div class=\"line\">\t\tWaitForSingleObject(pi.hProcess, INFINITE);  //等待子进程结束</div><div class=\"line\">\t\tGetLocalTime(&amp;endTime);</div><div class=\"line\">\t\tint durtion = getDurtion(startTime, endTime);</div><div class=\"line\">\t\tcout &lt;&lt; &quot;The start time is: &quot;;</div><div class=\"line\">\t\toutputTime(startTime);</div><div class=\"line\">\t\tcout &lt;&lt; &quot;The end time is:   &quot;;</div><div class=\"line\">\t\toutputTime(endTime);</div><div class=\"line\">\t\tcout &lt;&lt; &quot;The durtion is &quot; &lt;&lt; durtion &lt;&lt; &quot;ms&quot; &lt;&lt; endl;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\telse &#123;</div><div class=\"line\">\t\tcout &lt;&lt; &quot;The chiidProcess failed to be created!!&quot;;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tgetchar();</div><div class=\"line\">&#125;</div><div class=\"line\">void  outputTime(SYSTEMTIME&amp;time)&#123;</div><div class=\"line\">\tcout &lt;&lt; time.wYear &lt;&lt; &quot;/&quot; &lt;&lt; time.wMonth &lt;&lt; &quot;/&quot; &lt;&lt; time.wDay &lt;&lt; &quot;  &quot; &lt;&lt; time.wHour &lt;&lt; &quot;:&quot; &lt;&lt; time.wMinute &lt;&lt;</div><div class=\"line\">\t\t&quot;:&quot; &lt;&lt; time.wSecond &lt;&lt; &quot;:&quot; &lt;&lt; time.wMilliseconds&lt;&lt;endl;</div><div class=\"line\">&#125;</div><div class=\"line\">int getDurtion(SYSTEMTIME&amp;startTime, SYSTEMTIME&amp;endTime) &#123;</div><div class=\"line\">\tint tempHour = endTime.wHour - startTime.wHour;</div><div class=\"line\">\tint tempMinute = endTime.wMinute - startTime.wMinute;</div><div class=\"line\">\tint tempSecond = endTime.wSecond - startTime.wSecond;</div><div class=\"line\">\tint tempMillSecond = endTime.wMilliseconds - startTime.wMilliseconds;</div><div class=\"line\">\tint duration = ((tempHour * 60 + tempMinute) * 60 + tempSecond) * 1000 + tempMillSecond;</div><div class=\"line\">\treturn duration;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>几个坑：<br>1.编码：c++ 编码是乱的，没有一个统一的编码，有char,wchar 涉及到中文的时候就很容易出错。<br>解决方法：createProcessA(),STARTUPINFOA,这样就都是char,路径也别设成中文就可以。  </p>\n<ol>\n<li>配环境的时候，经常缺头文件，需要找到头文件的目录，然后将其添加到path 中就可以。<br>lib: 库文件，具体实现<br>include: 头文件，声明和定义<br>3.手动编译：cl  test.cpp<br>编译命令：<br>gcc,g++: 是linux<br>microsoft: cl</li>\n</ol>\n","excerpt":"","more":"<p>最近做了操作系统的实验，进程控制，踩了不少坑。现在总结下。<br>Liunx：先放代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include&lt;iostream&gt;</div><div class=\"line\">#include&lt;cstdlib&gt;     //sleep()</div><div class=\"line\">#include&lt;unistd.h&gt;    //fork</div><div class=\"line\">#include&lt;sys/time.h&gt;  //gettimeofday</div><div class=\"line\">#include&lt;sys/wait.h&gt;  //wait</div><div class=\"line\">#include&lt;ctime&gt;       //localtime</div><div class=\"line\">void outputTime(struct tm*time,int ms);</div><div class=\"line\">using namespace std;</div><div class=\"line\">int main(int argc,char*argv[])</div><div class=\"line\">&#123;</div><div class=\"line\">    struct timeval startTime;</div><div class=\"line\">    struct timeval endTime;</div><div class=\"line\">    struct timezone zone;</div><div class=\"line\">    time_t startTime_t;</div><div class=\"line\">    time_t endTime_t;</div><div class=\"line\">    struct tm *startTime_tm;</div><div class=\"line\">    struct tm *endTime_tm;</div><div class=\"line\">    int pid=fork();</div><div class=\"line\">    if(pid&lt;0)&#123;</div><div class=\"line\">        cout&lt;&lt;&quot;error&quot;&lt;&lt;endl;</div><div class=\"line\">        exit(0);</div><div class=\"line\">    &#125;</div><div class=\"line\">    if(pid==0)&#123;   //子进程</div><div class=\"line\">        execvp(argv[1],NULL); </div><div class=\"line\">\tcout&lt;&lt;&quot;execv error!&quot;&lt;&lt;endl;</div><div class=\"line\">\texit(0);</div><div class=\"line\">    &#125;</div><div class=\"line\">    if(pid&gt;0)&#123;    //父进程</div><div class=\"line\">        gettimeofday(&amp;startTime,&amp;zone);</div><div class=\"line\">        wait(0);   //等待子进程结束</div><div class=\"line\">        gettimeofday(&amp;endTime, &amp;zone);</div><div class=\"line\">        long long int durtion=(endTime.tv_sec-startTime.tv_sec)*1000+endTime.tv_usec-startTime.tv_usec;</div><div class=\"line\">        startTime_t=(time_t)startTime.tv_sec;  //转换成time_t格式</div><div class=\"line\">        endTime_t=(time_t)endTime.tv_sec;</div><div class=\"line\">        startTime_tm=localtime(&amp;startTime_t);  //转换成struct tm格式</div><div class=\"line\">        endTime_tm=localtime(&amp;endTime_t);</div><div class=\"line\">        cout&lt;&lt;&quot;The start time is:  &quot;;</div><div class=\"line\">        outputTime(startTime_tm,startTime.tv_usec/1000);</div><div class=\"line\">        cout&lt;&lt;&quot;The end time is:    &quot;;</div><div class=\"line\">        outputTime(endTime_tm,endTime.tv_usec/1000);</div><div class=\"line\">        cout&lt;&lt;&quot;the durtion is &quot;&lt;&lt;durtion&lt;&lt;&quot;ms&quot;&lt;&lt;endl;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void outputTime(struct tm*time,int ms)&#123;</div><div class=\"line\">    cout&lt;&lt;(*time).tm_year+1900&lt;&lt;&quot;/&quot;&lt;&lt;(*time).tm_mon+1&lt;&lt;&quot;/&quot;&lt;&lt;(*time).tm_mday&lt;&lt;&quot;  &quot;&lt;&lt;(*time).tm_hour&lt;&lt;&quot;:&quot;&lt;&lt;(*time).tm_min&lt;&lt;&quot;:&quot;&lt;&lt;(*time).tm_sec&lt;&lt;&quot;:&quot;&lt;&lt;ms&lt;&lt;endl;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>几个坑：<br>1.之前一直不知道主函数要什么参数，这下知道了。主要是在命令行运行中可能需要传入参数。比如启动一个子进程。     </p>\n<ol>\n<li>每个函数对应的头文件要搞清楚。<br>3.execvp: exec类的函数都是杀死现有进程，用新进程代替，进程号不变。但是execvp()，可以识别环境变量，其他不可以。换句话说：如果传入参数是有环境变量的，而且用的是execvp()，那么只传函数名是可以的。两个条件缺一不可。<br>4.wait(0)可以，wait(NULL)本来应该是可以的，但是不知道为什么在linux中不可以。</li>\n</ol>\n<p>windows:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include&lt;iostream&gt;</div><div class=\"line\">#include&lt;string&gt;</div><div class=\"line\">#include&lt;windows.h&gt;</div><div class=\"line\">using namespace std;</div><div class=\"line\">void  outputTime(SYSTEMTIME&amp;time);</div><div class=\"line\">int getDurtion(SYSTEMTIME&amp;startTime, SYSTEMTIME&amp;endTime);</div><div class=\"line\">int main(int argc, char* argv[]) &#123;               //L表示unicode编码，c++和java不同，内部可能有几种编码，烦。。</div><div class=\"line\">\tSYSTEMTIME startTime;   //LP表示指针的意思</div><div class=\"line\">\tSYSTEMTIME endTime;     </div><div class=\"line\">\tGetSystemTime(&amp;startTime);</div><div class=\"line\">\tSTARTUPINFOA si;  //后面有A表示char,否则是wchar</div><div class=\"line\">\tPROCESS_INFORMATION pi;</div><div class=\"line\">\tmemset(&amp;si,0, sizeof(si));         </div><div class=\"line\">\tsi.cb = sizeof(STARTUPINFO);</div><div class=\"line\">\tsi.dwFlags = STARTF_USESHOWWINDOW;  // dwflags参数表明子进程是否用wshowWindow这个参数</div><div class=\"line\">\tsi.wShowWindow = TRUE;           // 当创建一个进程，wshowWindows作为参数传递给main函数,true 表示显示子进程的窗口</div><div class=\"line\">\tbool flag=CreateProcessA(NULL,argv[1], NULL, NULL, FALSE, CREATE_NEW_CONSOLE, NULL, NULL, &amp;si, &amp;pi);</div><div class=\"line\">\tif (flag) &#123;                  //createProcessA表示第二个参数是char[],createProcess表示wchar[](unicode)</div><div class=\"line\">\t\tGetLocalTime(&amp;startTime);</div><div class=\"line\">\t\tWaitForSingleObject(pi.hProcess, INFINITE);  //等待子进程结束</div><div class=\"line\">\t\tGetLocalTime(&amp;endTime);</div><div class=\"line\">\t\tint durtion = getDurtion(startTime, endTime);</div><div class=\"line\">\t\tcout &lt;&lt; &quot;The start time is: &quot;;</div><div class=\"line\">\t\toutputTime(startTime);</div><div class=\"line\">\t\tcout &lt;&lt; &quot;The end time is:   &quot;;</div><div class=\"line\">\t\toutputTime(endTime);</div><div class=\"line\">\t\tcout &lt;&lt; &quot;The durtion is &quot; &lt;&lt; durtion &lt;&lt; &quot;ms&quot; &lt;&lt; endl;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\telse &#123;</div><div class=\"line\">\t\tcout &lt;&lt; &quot;The chiidProcess failed to be created!!&quot;;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tgetchar();</div><div class=\"line\">&#125;</div><div class=\"line\">void  outputTime(SYSTEMTIME&amp;time)&#123;</div><div class=\"line\">\tcout &lt;&lt; time.wYear &lt;&lt; &quot;/&quot; &lt;&lt; time.wMonth &lt;&lt; &quot;/&quot; &lt;&lt; time.wDay &lt;&lt; &quot;  &quot; &lt;&lt; time.wHour &lt;&lt; &quot;:&quot; &lt;&lt; time.wMinute &lt;&lt;</div><div class=\"line\">\t\t&quot;:&quot; &lt;&lt; time.wSecond &lt;&lt; &quot;:&quot; &lt;&lt; time.wMilliseconds&lt;&lt;endl;</div><div class=\"line\">&#125;</div><div class=\"line\">int getDurtion(SYSTEMTIME&amp;startTime, SYSTEMTIME&amp;endTime) &#123;</div><div class=\"line\">\tint tempHour = endTime.wHour - startTime.wHour;</div><div class=\"line\">\tint tempMinute = endTime.wMinute - startTime.wMinute;</div><div class=\"line\">\tint tempSecond = endTime.wSecond - startTime.wSecond;</div><div class=\"line\">\tint tempMillSecond = endTime.wMilliseconds - startTime.wMilliseconds;</div><div class=\"line\">\tint duration = ((tempHour * 60 + tempMinute) * 60 + tempSecond) * 1000 + tempMillSecond;</div><div class=\"line\">\treturn duration;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>几个坑：<br>1.编码：c++ 编码是乱的，没有一个统一的编码，有char,wchar 涉及到中文的时候就很容易出错。<br>解决方法：createProcessA(),STARTUPINFOA,这样就都是char,路径也别设成中文就可以。  </p>\n<ol>\n<li>配环境的时候，经常缺头文件，需要找到头文件的目录，然后将其添加到path 中就可以。<br>lib: 库文件，具体实现<br>include: 头文件，声明和定义<br>3.手动编译：cl  test.cpp<br>编译命令：<br>gcc,g++: 是linux<br>microsoft: cl</li>\n</ol>\n"},{"title":"c++基础,长期更新","date":"2016-10-20T11:05:04.000Z","_content":"\n   今天在写操作系统的作业，发现c++的很多基本语法都忘了，现在自己把基本语法总结一遍。方便以后复习。\n   \n   1.构造函数：\n     父类构造函数 -> 类成员的构造函数 -> 自己的构造函数\n     \n   2.初始化列表：\n     这里有个博客挺好       http://www.cnblogs.com/graphics/archive/2010/07/04/1770900.html\n     \n   我的总结：\n \n``` c++\nTest1 test1 ;\n    Test2(Test1 &t1):test1(t1){}\n\n```\n\n```\n Test1 test1 ;\n    Test2(Test1 &t1)\n    {\n        test1 = t1 ;\n    }\n\n```\n\n第2种test1需要执行一次默认构造函数+一次赋值操作\n第1种test1只需要执行一次拷贝构造函数\n\n特别的：下面情况只能用初始化列表\n*  类成员没有默认构造函数\n*  类成员是引用类型（只能初始化，不能赋值）\n*  类成员是常量（只能初始化，不能赋值）\n* 多个初始化列表，不是按初始化列表顺序，而是按声明顺序\n\n结论： 尽可能用初始化列表\n\n初始化列表顺序和声明顺序一致\n\n\n3.extern 外部的，extern 只是起一个declare作用，可以用来修饰变量和函数，表示该函数的定义在其他模块中，也就是说，如果你在a.cpp文件中定义a=1;在b.cpp文件中声明extern  a;则可以引用a.cpp中的a。\n\n4.#ifdef表示条件编译\n\n5.#define 和 typedef的区别：\ndefine预处理，无脑替换\ntypedef是别名，不一样。\ndefine  INT  int*\ntypedef  int*  INT\n则 INT  a,b:\ntypedef:   int* a,b:  a,b都是int*\ndefine:   int*a,b  : a是int*，b是int\n\t\t\n5.类的定义 \n\n* 关于默认构造函数(没有参数)，如果类中未定义任何构造函数，编译器会提供一个默认的构造函数，**如果类中定义了任何了构造函数，编译器不会提供默认构造函数。\n\n``` \nclass Test{                                                                           \n\tint a;               \n\tint b;     \n\tTest(int a,int b){\n\t\n\t} \n\tTest(){\n\t\n\t}\n}\n```\n* 局部变量： Test  a1; Test a2(1,2);    \n如果调用默认构造函数，不用加括号；\n* new 对象：Test* p1=new Test(), *p2=new Test(10,20);     \n必须加括号，调用默认构造函数也要加括号\n* 匿名对象：vector.push\\_back(Test()),                   \nvector.push\\_back(Test(10,20))      \n必须加括号\n* 关于lambda表达式：我觉得可以理解成一个匿名函数，通常用到需要传递函数指针做参数，而函数本身又比较简单的情况，比如sort函数的cmp函数。\n\t* 格式： [capture list]（parameter list）-> return type {function body} \n\t\t* capture list: 捕获列表,一般为空，表示可以在lambda表达式中用所在函数中局部变量的值。如[a,&b]表示捕获a,b其中b为引用。当然还有其他的隐式捕获的用法，具体见c++ prime page 352\n\t\t* parameter list: lambda的参数\n\t\t* return type: 需要注意的是，如果函数体内只有一句return语句，则可以省略return type; 否则默认返回类型是void，如果返回的不是void，则需要加上具体的返回类型。\n\t* 例子：\n\t\n\t```\n\tsort(vector1.begin(),vector1.end(),[](int a,int b)->bool{return a>b})\n\t```\n* c++的STL中的类型不能为引用，如vector<int&>是绝对错误的","source":"_posts/c++基础-长期更新.md","raw":"---\ntitle: 'c++基础,长期更新'\ndate: 2016-10-20 19:05:04\ntags: \n  - c/c++\ncategories: c/c++\n---\n\n   今天在写操作系统的作业，发现c++的很多基本语法都忘了，现在自己把基本语法总结一遍。方便以后复习。\n   \n   1.构造函数：\n     父类构造函数 -> 类成员的构造函数 -> 自己的构造函数\n     \n   2.初始化列表：\n     这里有个博客挺好       http://www.cnblogs.com/graphics/archive/2010/07/04/1770900.html\n     \n   我的总结：\n \n``` c++\nTest1 test1 ;\n    Test2(Test1 &t1):test1(t1){}\n\n```\n\n```\n Test1 test1 ;\n    Test2(Test1 &t1)\n    {\n        test1 = t1 ;\n    }\n\n```\n\n第2种test1需要执行一次默认构造函数+一次赋值操作\n第1种test1只需要执行一次拷贝构造函数\n\n特别的：下面情况只能用初始化列表\n*  类成员没有默认构造函数\n*  类成员是引用类型（只能初始化，不能赋值）\n*  类成员是常量（只能初始化，不能赋值）\n* 多个初始化列表，不是按初始化列表顺序，而是按声明顺序\n\n结论： 尽可能用初始化列表\n\n初始化列表顺序和声明顺序一致\n\n\n3.extern 外部的，extern 只是起一个declare作用，可以用来修饰变量和函数，表示该函数的定义在其他模块中，也就是说，如果你在a.cpp文件中定义a=1;在b.cpp文件中声明extern  a;则可以引用a.cpp中的a。\n\n4.#ifdef表示条件编译\n\n5.#define 和 typedef的区别：\ndefine预处理，无脑替换\ntypedef是别名，不一样。\ndefine  INT  int*\ntypedef  int*  INT\n则 INT  a,b:\ntypedef:   int* a,b:  a,b都是int*\ndefine:   int*a,b  : a是int*，b是int\n\t\t\n5.类的定义 \n\n* 关于默认构造函数(没有参数)，如果类中未定义任何构造函数，编译器会提供一个默认的构造函数，**如果类中定义了任何了构造函数，编译器不会提供默认构造函数。\n\n``` \nclass Test{                                                                           \n\tint a;               \n\tint b;     \n\tTest(int a,int b){\n\t\n\t} \n\tTest(){\n\t\n\t}\n}\n```\n* 局部变量： Test  a1; Test a2(1,2);    \n如果调用默认构造函数，不用加括号；\n* new 对象：Test* p1=new Test(), *p2=new Test(10,20);     \n必须加括号，调用默认构造函数也要加括号\n* 匿名对象：vector.push\\_back(Test()),                   \nvector.push\\_back(Test(10,20))      \n必须加括号\n* 关于lambda表达式：我觉得可以理解成一个匿名函数，通常用到需要传递函数指针做参数，而函数本身又比较简单的情况，比如sort函数的cmp函数。\n\t* 格式： [capture list]（parameter list）-> return type {function body} \n\t\t* capture list: 捕获列表,一般为空，表示可以在lambda表达式中用所在函数中局部变量的值。如[a,&b]表示捕获a,b其中b为引用。当然还有其他的隐式捕获的用法，具体见c++ prime page 352\n\t\t* parameter list: lambda的参数\n\t\t* return type: 需要注意的是，如果函数体内只有一句return语句，则可以省略return type; 否则默认返回类型是void，如果返回的不是void，则需要加上具体的返回类型。\n\t* 例子：\n\t\n\t```\n\tsort(vector1.begin(),vector1.end(),[](int a,int b)->bool{return a>b})\n\t```\n* c++的STL中的类型不能为引用，如vector<int&>是绝对错误的","slug":"c++基础-长期更新","published":1,"updated":"2017-11-15T15:55:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu1p000fhb58pb871lqv","content":"<p>   今天在写操作系统的作业，发现c++的很多基本语法都忘了，现在自己把基本语法总结一遍。方便以后复习。</p>\n<p>   1.构造函数：<br>     父类构造函数 -&gt; 类成员的构造函数 -&gt; 自己的构造函数</p>\n<p>   2.初始化列表：<br>     这里有个博客挺好       <a href=\"http://www.cnblogs.com/graphics/archive/2010/07/04/1770900.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/graphics/archive/2010/07/04/1770900.html</a></p>\n<p>   我的总结：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Test1 test1 ;</div><div class=\"line\">    Test2(Test1 &amp;t1):test1(t1)&#123;&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Test1 test1 ;</div><div class=\"line\">   Test2(Test1 &amp;t1)</div><div class=\"line\">   &#123;</div><div class=\"line\">       test1 = t1 ;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>第2种test1需要执行一次默认构造函数+一次赋值操作<br>第1种test1只需要执行一次拷贝构造函数</p>\n<p>特别的：下面情况只能用初始化列表</p>\n<ul>\n<li>类成员没有默认构造函数</li>\n<li>类成员是引用类型（只能初始化，不能赋值）</li>\n<li>类成员是常量（只能初始化，不能赋值）</li>\n<li>多个初始化列表，不是按初始化列表顺序，而是按声明顺序</li>\n</ul>\n<p>结论： 尽可能用初始化列表</p>\n<p>初始化列表顺序和声明顺序一致</p>\n<p>3.extern 外部的，extern 只是起一个declare作用，可以用来修饰变量和函数，表示该函数的定义在其他模块中，也就是说，如果你在a.cpp文件中定义a=1;在b.cpp文件中声明extern  a;则可以引用a.cpp中的a。</p>\n<p>4.#ifdef表示条件编译</p>\n<p>5.#define 和 typedef的区别：<br>define预处理，无脑替换<br>typedef是别名，不一样。<br>define  INT  int<em><br>typedef  int</em>  INT<br>则 INT  a,b:<br>typedef:   int<em> a,b:  a,b都是int</em><br>define:   int<em>a,b  : a是int</em>，b是int</p>\n<p>5.类的定义 </p>\n<ul>\n<li>关于默认构造函数(没有参数)，如果类中未定义任何构造函数，编译器会提供一个默认的构造函数，**如果类中定义了任何了构造函数，编译器不会提供默认构造函数。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Test&#123;                                                                           </div><div class=\"line\">\tint a;               </div><div class=\"line\">\tint b;     </div><div class=\"line\">\tTest(int a,int b)&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t&#125; </div><div class=\"line\">\tTest()&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>局部变量： Test  a1; Test a2(1,2);<br>如果调用默认构造函数，不用加括号；</li>\n<li>new 对象：Test<em> p1=new Test(), </em>p2=new Test(10,20);<br>必须加括号，调用默认构造函数也要加括号</li>\n<li>匿名对象：vector.push_back(Test()),<br>vector.push_back(Test(10,20))<br>必须加括号</li>\n<li><p>关于lambda表达式：我觉得可以理解成一个匿名函数，通常用到需要传递函数指针做参数，而函数本身又比较简单的情况，比如sort函数的cmp函数。</p>\n<ul>\n<li>格式： [capture list]（parameter list）-&gt; return type {function body} <ul>\n<li>capture list: 捕获列表,一般为空，表示可以在lambda表达式中用所在函数中局部变量的值。如[a,&amp;b]表示捕获a,b其中b为引用。当然还有其他的隐式捕获的用法，具体见c++ prime page 352</li>\n<li>parameter list: lambda的参数</li>\n<li>return type: 需要注意的是，如果函数体内只有一句return语句，则可以省略return type; 否则默认返回类型是void，如果返回的不是void，则需要加上具体的返回类型。</li>\n</ul>\n</li>\n<li><p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sort(vector1.begin(),vector1.end(),[](int a,int b)-&gt;bool&#123;return a&gt;b&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>c++的STL中的类型不能为引用，如vector<int&>是绝对错误的</int&></p>\n</li>\n</ul>\n","excerpt":"","more":"<p>   今天在写操作系统的作业，发现c++的很多基本语法都忘了，现在自己把基本语法总结一遍。方便以后复习。</p>\n<p>   1.构造函数：<br>     父类构造函数 -&gt; 类成员的构造函数 -&gt; 自己的构造函数</p>\n<p>   2.初始化列表：<br>     这里有个博客挺好       <a href=\"http://www.cnblogs.com/graphics/archive/2010/07/04/1770900.html\">http://www.cnblogs.com/graphics/archive/2010/07/04/1770900.html</a></p>\n<p>   我的总结：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Test1 test1 ;</div><div class=\"line\">    Test2(Test1 &amp;t1):test1(t1)&#123;&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Test1 test1 ;</div><div class=\"line\">   Test2(Test1 &amp;t1)</div><div class=\"line\">   &#123;</div><div class=\"line\">       test1 = t1 ;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>第2种test1需要执行一次默认构造函数+一次赋值操作<br>第1种test1只需要执行一次拷贝构造函数</p>\n<p>特别的：下面情况只能用初始化列表</p>\n<ul>\n<li>类成员没有默认构造函数</li>\n<li>类成员是引用类型（只能初始化，不能赋值）</li>\n<li>类成员是常量（只能初始化，不能赋值）</li>\n<li>多个初始化列表，不是按初始化列表顺序，而是按声明顺序</li>\n</ul>\n<p>结论： 尽可能用初始化列表</p>\n<p>初始化列表顺序和声明顺序一致</p>\n<p>3.extern 外部的，extern 只是起一个declare作用，可以用来修饰变量和函数，表示该函数的定义在其他模块中，也就是说，如果你在a.cpp文件中定义a=1;在b.cpp文件中声明extern  a;则可以引用a.cpp中的a。</p>\n<p>4.#ifdef表示条件编译</p>\n<p>5.#define 和 typedef的区别：<br>define预处理，无脑替换<br>typedef是别名，不一样。<br>define  INT  int<em><br>typedef  int</em>  INT<br>则 INT  a,b:<br>typedef:   int<em> a,b:  a,b都是int</em><br>define:   int<em>a,b  : a是int</em>，b是int</p>\n<p>5.类的定义 </p>\n<ul>\n<li>关于默认构造函数(没有参数)，如果类中未定义任何构造函数，编译器会提供一个默认的构造函数，**如果类中定义了任何了构造函数，编译器不会提供默认构造函数。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Test&#123;                                                                           </div><div class=\"line\">\tint a;               </div><div class=\"line\">\tint b;     </div><div class=\"line\">\tTest(int a,int b)&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t&#125; </div><div class=\"line\">\tTest()&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>局部变量： Test  a1; Test a2(1,2);<br>如果调用默认构造函数，不用加括号；</li>\n<li>new 对象：Test<em> p1=new Test(), </em>p2=new Test(10,20);<br>必须加括号，调用默认构造函数也要加括号</li>\n<li>匿名对象：vector.push_back(Test()),<br>vector.push_back(Test(10,20))<br>必须加括号</li>\n<li><p>关于lambda表达式：我觉得可以理解成一个匿名函数，通常用到需要传递函数指针做参数，而函数本身又比较简单的情况，比如sort函数的cmp函数。</p>\n<ul>\n<li>格式： [capture list]（parameter list）-&gt; return type {function body} <ul>\n<li>capture list: 捕获列表,一般为空，表示可以在lambda表达式中用所在函数中局部变量的值。如[a,&amp;b]表示捕获a,b其中b为引用。当然还有其他的隐式捕获的用法，具体见c++ prime page 352</li>\n<li>parameter list: lambda的参数</li>\n<li>return type: 需要注意的是，如果函数体内只有一句return语句，则可以省略return type; 否则默认返回类型是void，如果返回的不是void，则需要加上具体的返回类型。</li>\n</ul>\n</li>\n<li><p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sort(vector1.begin(),vector1.end(),[](int a,int b)-&gt;bool&#123;return a&gt;b&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>c++的STL中的类型不能为引用，如vector<int&>是绝对错误的</p>\n</li>\n</ul>\n"},{"title":"c语言gets和scanf的区别","date":"2016-11-03T09:04:43.000Z","_content":"\n### 今天在写项目的时候遇到了读入不定字符串的问题，涉及到scanf和gets的区别，之前在这个问题上一直没有彻底弄懂，现在总结下。                                            \n* 二者在读入字符串时都会在后面加上\\0\n\n* scanf在遇到空格，回车，tab的时候停止输入，并且将这些（空格，回车，tab）留在输入缓冲区中。\n* gets遇到回车会停止输入，并且清空输入缓冲区\n* scanf发现缓冲区有空格，tab,回车会跳过这些继续等待输入\n* gets,getchar等遇到缓冲区有空格，tab，回车会读入，然后清空缓冲区。\n* 值得一提的是，二者都是不安全的，容易读入恶意代码被攻击。\n### 然后在具体的应用中，比如读入未知个数的int,string等,ctrl+z结束（linux下ctrl+d）\n\n```(c)\nwhile(scanf(\"%s\")){\n\n}\n\n--------------------------\nwhile(gets(str)){\n\n}\n\n---------------------------\n\nscnaf(\"%d\",&a);\ngetchar(); //读入缓冲区遗留的回车\ngets(str);\n```\n","source":"_posts/c语言gets和scanf的区别.md","raw":"---\ntitle: c语言gets和scanf的区别\ndate: 2016-11-03 17:04:43\ntags: \n  - c语言\n  - gets\n  - scanf\ncategories: c/c++\n---\n\n### 今天在写项目的时候遇到了读入不定字符串的问题，涉及到scanf和gets的区别，之前在这个问题上一直没有彻底弄懂，现在总结下。                                            \n* 二者在读入字符串时都会在后面加上\\0\n\n* scanf在遇到空格，回车，tab的时候停止输入，并且将这些（空格，回车，tab）留在输入缓冲区中。\n* gets遇到回车会停止输入，并且清空输入缓冲区\n* scanf发现缓冲区有空格，tab,回车会跳过这些继续等待输入\n* gets,getchar等遇到缓冲区有空格，tab，回车会读入，然后清空缓冲区。\n* 值得一提的是，二者都是不安全的，容易读入恶意代码被攻击。\n### 然后在具体的应用中，比如读入未知个数的int,string等,ctrl+z结束（linux下ctrl+d）\n\n```(c)\nwhile(scanf(\"%s\")){\n\n}\n\n--------------------------\nwhile(gets(str)){\n\n}\n\n---------------------------\n\nscnaf(\"%d\",&a);\ngetchar(); //读入缓冲区遗留的回车\ngets(str);\n```\n","slug":"c语言gets和scanf的区别","published":1,"updated":"2016-11-03T10:35:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu1r000hhb58nr1gq0sy","content":"<h3 id=\"今天在写项目的时候遇到了读入不定字符串的问题，涉及到scanf和gets的区别，之前在这个问题上一直没有彻底弄懂，现在总结下。\"><a href=\"#今天在写项目的时候遇到了读入不定字符串的问题，涉及到scanf和gets的区别，之前在这个问题上一直没有彻底弄懂，现在总结下。\" class=\"headerlink\" title=\"今天在写项目的时候遇到了读入不定字符串的问题，涉及到scanf和gets的区别，之前在这个问题上一直没有彻底弄懂，现在总结下。\"></a>今天在写项目的时候遇到了读入不定字符串的问题，涉及到scanf和gets的区别，之前在这个问题上一直没有彻底弄懂，现在总结下。</h3><ul>\n<li><p>二者在读入字符串时都会在后面加上\\0</p>\n</li>\n<li><p>scanf在遇到空格，回车，tab的时候停止输入，并且将这些（空格，回车，tab）留在输入缓冲区中。</p>\n</li>\n<li>gets遇到回车会停止输入，并且清空输入缓冲区</li>\n<li>scanf发现缓冲区有空格，tab,回车会跳过这些继续等待输入</li>\n<li>gets,getchar等遇到缓冲区有空格，tab，回车会读入，然后清空缓冲区。</li>\n<li>值得一提的是，二者都是不安全的，容易读入恶意代码被攻击。<h3 id=\"然后在具体的应用中，比如读入未知个数的int-string等-ctrl-z结束（linux下ctrl-d）\"><a href=\"#然后在具体的应用中，比如读入未知个数的int-string等-ctrl-z结束（linux下ctrl-d）\" class=\"headerlink\" title=\"然后在具体的应用中，比如读入未知个数的int,string等,ctrl+z结束（linux下ctrl+d）\"></a>然后在具体的应用中，比如读入未知个数的int,string等,ctrl+z结束（linux下ctrl+d）</h3></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">while(scanf(&quot;%s&quot;))&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">--------------------------</div><div class=\"line\">while(gets(str))&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">---------------------------</div><div class=\"line\"></div><div class=\"line\">scnaf(&quot;%d&quot;,&amp;a);</div><div class=\"line\">getchar(); //读入缓冲区遗留的回车</div><div class=\"line\">gets(str);</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"今天在写项目的时候遇到了读入不定字符串的问题，涉及到scanf和gets的区别，之前在这个问题上一直没有彻底弄懂，现在总结下。\"><a href=\"#今天在写项目的时候遇到了读入不定字符串的问题，涉及到scanf和gets的区别，之前在这个问题上一直没有彻底弄懂，现在总结下。\" class=\"headerlink\" title=\"今天在写项目的时候遇到了读入不定字符串的问题，涉及到scanf和gets的区别，之前在这个问题上一直没有彻底弄懂，现在总结下。\"></a>今天在写项目的时候遇到了读入不定字符串的问题，涉及到scanf和gets的区别，之前在这个问题上一直没有彻底弄懂，现在总结下。</h3><ul>\n<li><p>二者在读入字符串时都会在后面加上\\0</p>\n</li>\n<li><p>scanf在遇到空格，回车，tab的时候停止输入，并且将这些（空格，回车，tab）留在输入缓冲区中。</p>\n</li>\n<li>gets遇到回车会停止输入，并且清空输入缓冲区</li>\n<li>scanf发现缓冲区有空格，tab,回车会跳过这些继续等待输入</li>\n<li>gets,getchar等遇到缓冲区有空格，tab，回车会读入，然后清空缓冲区。</li>\n<li>值得一提的是，二者都是不安全的，容易读入恶意代码被攻击。<h3 id=\"然后在具体的应用中，比如读入未知个数的int-string等-ctrl-z结束（linux下ctrl-d）\"><a href=\"#然后在具体的应用中，比如读入未知个数的int-string等-ctrl-z结束（linux下ctrl-d）\" class=\"headerlink\" title=\"然后在具体的应用中，比如读入未知个数的int,string等,ctrl+z结束（linux下ctrl+d）\"></a>然后在具体的应用中，比如读入未知个数的int,string等,ctrl+z结束（linux下ctrl+d）</h3></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">while(scanf(&quot;%s&quot;))&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">--------------------------</div><div class=\"line\">while(gets(str))&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">---------------------------</div><div class=\"line\"></div><div class=\"line\">scnaf(&quot;%d&quot;,&amp;a);</div><div class=\"line\">getchar(); //读入缓冲区遗留的回车</div><div class=\"line\">gets(str);</div></pre></td></tr></table></figure>\n"},{"title":"BFS的一般写法","date":"2017-09-10T14:06:58.000Z","_content":"* 因为我自己对BFS一直不是很6，帮柳华做笔试题的时候很简单的一个bfs都没有写对，现在总结一下。\n\t* BFS一般用队列来实现，现在以二叉树的层次遍历为例，这是一个典型的BFS。\n\t* 队列的写法：\t\n\t\n\t```\n\tclass Solution {\npublic:\n    vector<vector<int>> levelOrder(TreeNode* root) {\n        vector<vector<int>> result;\n        if(root==NULL){\n            return result;\n        }\n        queue<TreeNode*> que;\n        que.push(root);\n        while(!que.empty()){\n            int len=que.size();\n            vector<int> temp;\n            //遍历每一层的节点\n            for(int i=0;i<len;i++){\n                TreeNode* node=que.front();\n                que.pop();\n                temp.push_back(node->val);\n                if(node->left){\n                    que.push(node->left);\n                }\n                if(node->right){\n                    que.push(node->right);\n                }\n            }\n            result.push_back(temp);\n        }\n        return result;\n    }\n};\n\t```\n\t* 在编程之美上还有没有用到stl的队列，用vector去模拟的队列，这里代码也放上。\n\n\t```\n\tclass Solution {\npublic:\n    vector<vector<int>> levelOrder(TreeNode* root) {\n        vector<vector<int>> result;\n        if(root==NULL){\n            return result;\n        }\n        vector<TreeNode*> vec;\n        vec.push_back(root);\n        int cur=0,last;\n        //cur表示当前遍历的节点，last表示下一层的节点\n        while(cur<vec.size()){\n            int last=vec.size();\n            vector<int> temp;\n            while(cur<last){\n                temp.push_back(vec[cur]->val);\n                if(vec[cur]->left){\n                    vec.push_back(vec[cur]->left);\n                }\n                if(vec[cur]->right){\n                    vec.push_back(vec[cur]->right);\n                }\n                cur++;\n            }\n            result.push_back(temp);\n        }\n        return result;\n    }\n    };\n\t```","source":"_posts/BFS的一般写法.md","raw":"---\ntitle: BFS的一般写法\ndate: 2017-09-10 22:06:58\ntags: \n\t- leetcode\n\t- BFS\ncategories: 面试题\n---\n* 因为我自己对BFS一直不是很6，帮柳华做笔试题的时候很简单的一个bfs都没有写对，现在总结一下。\n\t* BFS一般用队列来实现，现在以二叉树的层次遍历为例，这是一个典型的BFS。\n\t* 队列的写法：\t\n\t\n\t```\n\tclass Solution {\npublic:\n    vector<vector<int>> levelOrder(TreeNode* root) {\n        vector<vector<int>> result;\n        if(root==NULL){\n            return result;\n        }\n        queue<TreeNode*> que;\n        que.push(root);\n        while(!que.empty()){\n            int len=que.size();\n            vector<int> temp;\n            //遍历每一层的节点\n            for(int i=0;i<len;i++){\n                TreeNode* node=que.front();\n                que.pop();\n                temp.push_back(node->val);\n                if(node->left){\n                    que.push(node->left);\n                }\n                if(node->right){\n                    que.push(node->right);\n                }\n            }\n            result.push_back(temp);\n        }\n        return result;\n    }\n};\n\t```\n\t* 在编程之美上还有没有用到stl的队列，用vector去模拟的队列，这里代码也放上。\n\n\t```\n\tclass Solution {\npublic:\n    vector<vector<int>> levelOrder(TreeNode* root) {\n        vector<vector<int>> result;\n        if(root==NULL){\n            return result;\n        }\n        vector<TreeNode*> vec;\n        vec.push_back(root);\n        int cur=0,last;\n        //cur表示当前遍历的节点，last表示下一层的节点\n        while(cur<vec.size()){\n            int last=vec.size();\n            vector<int> temp;\n            while(cur<last){\n                temp.push_back(vec[cur]->val);\n                if(vec[cur]->left){\n                    vec.push_back(vec[cur]->left);\n                }\n                if(vec[cur]->right){\n                    vec.push_back(vec[cur]->right);\n                }\n                cur++;\n            }\n            result.push_back(temp);\n        }\n        return result;\n    }\n    };\n\t```","slug":"BFS的一般写法","published":1,"updated":"2018-01-18T08:28:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu1u000khb58g5cu3iv3","content":"<ul>\n<li><p>因为我自己对BFS一直不是很6，帮柳华做笔试题的时候很简单的一个bfs都没有写对，现在总结一下。</p>\n<ul>\n<li>BFS一般用队列来实现，现在以二叉树的层次遍历为例，这是一个典型的BFS。</li>\n<li><p>队列的写法：    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">\tclass Solution &#123;</div><div class=\"line\">public:</div><div class=\"line\">    vector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) &#123;</div><div class=\"line\">        vector&lt;vector&lt;int&gt;&gt; result;</div><div class=\"line\">        if(root==NULL)&#123;</div><div class=\"line\">            return result;</div><div class=\"line\">        &#125;</div><div class=\"line\">        queue&lt;TreeNode*&gt; que;</div><div class=\"line\">        que.push(root);</div><div class=\"line\">        while(!que.empty())&#123;</div><div class=\"line\">            int len=que.size();</div><div class=\"line\">            vector&lt;int&gt; temp;</div><div class=\"line\">            //遍历每一层的节点</div><div class=\"line\">            for(int i=0;i&lt;len;i++)&#123;</div><div class=\"line\">                TreeNode* node=que.front();</div><div class=\"line\">                que.pop();</div><div class=\"line\">                temp.push_back(node-&gt;val);</div><div class=\"line\">                if(node-&gt;left)&#123;</div><div class=\"line\">                    que.push(node-&gt;left);</div><div class=\"line\">                &#125;</div><div class=\"line\">                if(node-&gt;right)&#123;</div><div class=\"line\">                    que.push(node-&gt;right);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            result.push_back(temp);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return result;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在编程之美上还有没有用到stl的队列，用vector去模拟的队列，这里代码也放上。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">\tclass Solution &#123;</div><div class=\"line\">public:</div><div class=\"line\">    vector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) &#123;</div><div class=\"line\">        vector&lt;vector&lt;int&gt;&gt; result;</div><div class=\"line\">        if(root==NULL)&#123;</div><div class=\"line\">            return result;</div><div class=\"line\">        &#125;</div><div class=\"line\">        vector&lt;TreeNode*&gt; vec;</div><div class=\"line\">        vec.push_back(root);</div><div class=\"line\">        int cur=0,last;</div><div class=\"line\">        //cur表示当前遍历的节点，last表示下一层的节点</div><div class=\"line\">        while(cur&lt;vec.size())&#123;</div><div class=\"line\">            int last=vec.size();</div><div class=\"line\">            vector&lt;int&gt; temp;</div><div class=\"line\">            while(cur&lt;last)&#123;</div><div class=\"line\">                temp.push_back(vec[cur]-&gt;val);</div><div class=\"line\">                if(vec[cur]-&gt;left)&#123;</div><div class=\"line\">                    vec.push_back(vec[cur]-&gt;left);</div><div class=\"line\">                &#125;</div><div class=\"line\">                if(vec[cur]-&gt;right)&#123;</div><div class=\"line\">                    vec.push_back(vec[cur]-&gt;right);</div><div class=\"line\">                &#125;</div><div class=\"line\">                cur++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            result.push_back(temp);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return result;</div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;;</div></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li><p>因为我自己对BFS一直不是很6，帮柳华做笔试题的时候很简单的一个bfs都没有写对，现在总结一下。</p>\n<ul>\n<li>BFS一般用队列来实现，现在以二叉树的层次遍历为例，这是一个典型的BFS。</li>\n<li><p>队列的写法：    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">\tclass Solution &#123;</div><div class=\"line\">public:</div><div class=\"line\">    vector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) &#123;</div><div class=\"line\">        vector&lt;vector&lt;int&gt;&gt; result;</div><div class=\"line\">        if(root==NULL)&#123;</div><div class=\"line\">            return result;</div><div class=\"line\">        &#125;</div><div class=\"line\">        queue&lt;TreeNode*&gt; que;</div><div class=\"line\">        que.push(root);</div><div class=\"line\">        while(!que.empty())&#123;</div><div class=\"line\">            int len=que.size();</div><div class=\"line\">            vector&lt;int&gt; temp;</div><div class=\"line\">            //遍历每一层的节点</div><div class=\"line\">            for(int i=0;i&lt;len;i++)&#123;</div><div class=\"line\">                TreeNode* node=que.front();</div><div class=\"line\">                que.pop();</div><div class=\"line\">                temp.push_back(node-&gt;val);</div><div class=\"line\">                if(node-&gt;left)&#123;</div><div class=\"line\">                    que.push(node-&gt;left);</div><div class=\"line\">                &#125;</div><div class=\"line\">                if(node-&gt;right)&#123;</div><div class=\"line\">                    que.push(node-&gt;right);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            result.push_back(temp);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return result;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在编程之美上还有没有用到stl的队列，用vector去模拟的队列，这里代码也放上。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">\tclass Solution &#123;</div><div class=\"line\">public:</div><div class=\"line\">    vector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) &#123;</div><div class=\"line\">        vector&lt;vector&lt;int&gt;&gt; result;</div><div class=\"line\">        if(root==NULL)&#123;</div><div class=\"line\">            return result;</div><div class=\"line\">        &#125;</div><div class=\"line\">        vector&lt;TreeNode*&gt; vec;</div><div class=\"line\">        vec.push_back(root);</div><div class=\"line\">        int cur=0,last;</div><div class=\"line\">        //cur表示当前遍历的节点，last表示下一层的节点</div><div class=\"line\">        while(cur&lt;vec.size())&#123;</div><div class=\"line\">            int last=vec.size();</div><div class=\"line\">            vector&lt;int&gt; temp;</div><div class=\"line\">            while(cur&lt;last)&#123;</div><div class=\"line\">                temp.push_back(vec[cur]-&gt;val);</div><div class=\"line\">                if(vec[cur]-&gt;left)&#123;</div><div class=\"line\">                    vec.push_back(vec[cur]-&gt;left);</div><div class=\"line\">                &#125;</div><div class=\"line\">                if(vec[cur]-&gt;right)&#123;</div><div class=\"line\">                    vec.push_back(vec[cur]-&gt;right);</div><div class=\"line\">                &#125;</div><div class=\"line\">                cur++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            result.push_back(temp);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return result;</div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;;</div></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n"},{"title":"c语言基础，长期更新","date":"2016-10-20T12:27:11.000Z","_content":"\n*  include\"    \" 的话编译器环境首先会在你当前所在的目录来找寻头文件，当所在目录没有的话，它就会到标准头文件库来找，找不到就报错，\n<>的话它一开始就到标准头文件库来找，找不到就报错！\n\n* 典型错误\n\n\n```\nif(ret=fun()!=0) \n//典型的错误做法，因为赋值优先级最低，正确写法是\nif((ret=fun())!=0)\n```\n* strlen和sizeof区别     \n\n\n```\nchar str[16]=\"abcd\"\nsizeof(str)=16;    //运算符\nstrlen(str)=4;     //函数\n```\n* static 和extern的用法\n\t* static\n\t\t* 位置在内存的全局变量区\n\t\t* static + 全局变量表示该变量只能在该文件中用，其他文件中即使加了extern也不好使。\n\t\t* static + 函数表示该函数只能在该文件中用\n\t\t* static + 局部变量，变量作用域不变，但是生存周期直到程序结束，所以变量实际只有一份。\n\t* extern\n\t\t* extern + 全局变量，该变量在该文件中并没有定义，只是告诉编译器链接的时候去其他文件中去找。\n\t\t* 举个例子:\terrno的原理就是这样\n\t\t\n\t\t```\n\t\textern int errno; //只是声明, 在<errno.h>中\n\t\tstrerror(errno);// errno在其他文件中定义\n\t\t```\n\t\t* extern \"C\",当希望cpp的代码按照c的符号表去编译时(即希望该cpp被C代码调用),需要加上这个。[详细说明](http://www.cnblogs.com/skynet/archive/2010/07/10/1774964.html)\n\t\t\n\t\t```\n\t\t#ifdef cplusplus\n\t\textern \"C\"{\n\t\t#endif\n\t\t//这里写你自己要用c的方法编译的代码\n\t\t//之所以把ifdef拆成两个来写主要是为了好看。。。\n\t\t#ifdef cplusplus\n\t\t}\n\t\t#endif\n\t\t```\n* 关于函数的声明和定义：  \n\t* 函数的声明主要是C语言本身的缺陷，即一遍扫描。函数声明的作用：告诉编译器我有这个函数，你下面用到的时候不要告诉我找不到这个函数。\n\t* 声明和定义的参数和返回值不同编译不过去。\n\t* 符号表的生成：函数定义的时候才生成符号表，C语言的符号表只和函数名有关，C++的符号表和参数和返回值都有关，这就是所谓的函数重载。\n\t* 符号表的作用：链接的时候用，比如你调用其他文件的函数，你只需要包含它的头文件就可以编译过去，链接的时候根据函数名去符号表中去查，找到符号表对应的函数的地址。\n\t* 可以用nm命令查看符号表。\n* int main(int argc,char** argv),其中argv[0]是程序完整路径，所以argc总是比实际输入的参数多1\n\n* 多个if特别容易出错，要注意。加个else养成习惯\n\n```\nif(temp>min){\n\tmin=temp;\n}\nif(temp==min){  //典型错误，第二个if不该执行\n\n}\n```\n* #progama once 一般自己写头文件的时候用，这个保证了编译的时候该头文件只会被打开一次。\n* 关于相对路径的问题：\n\t* 一般情况：当前路径指的是该程序所在的路径，如 fragroute a.txt. 那么如果txt文件中有打开其他文件，用的是相对路径，那么当前路径就是fragroute所在的路径\n\t* 编译头文件的时候：头文件经常包含其他头文件，用的是相对路径，那么当前路径指的就是该头文件所在的路径。\n* 在网络编程中经常遇到字节序和网络序的问题（大端，小端），有些还有位域的问题。\n从程序员的角度来说：其实不用管具体的原理，对于多字节来说，发送和接收用htonl(),nltoh()就行，位域的问题，只要定义了大小端之后就按照正常的结构体成员来用就行。\n具体的原理可以参考：\n[点我查看原理](http://m.blog.csdn.net/article/details?id=45420455)\n* C 语言文件操作写入文件时，有时程序意外终止，文件并没有写入，这是因为读写缓冲区的存在。解决方法：每次fprintf之后，fflush清空缓冲区，立即写入。\n* linux下经常遇到很多格式的数不知道输出格式，如u_int32_t这种，可以用IntTypes.h这个头文件。\n* calloc和malloc的区别：calloc申请的内存会初始化为0,malloc不会初始化。\n* system(\"cmd\")可以在代码中执行linux命令\n* 返回值：void表示没有返回值，void* 表示返回一个无类型的指针。","source":"_posts/c语言基础，长期更新.md","raw":"---\ntitle: c语言基础，长期更新\ndate: 2016-10-20 20:27:11\ntags: c/c++\ncategories: c/c++\n---\n\n*  include\"    \" 的话编译器环境首先会在你当前所在的目录来找寻头文件，当所在目录没有的话，它就会到标准头文件库来找，找不到就报错，\n<>的话它一开始就到标准头文件库来找，找不到就报错！\n\n* 典型错误\n\n\n```\nif(ret=fun()!=0) \n//典型的错误做法，因为赋值优先级最低，正确写法是\nif((ret=fun())!=0)\n```\n* strlen和sizeof区别     \n\n\n```\nchar str[16]=\"abcd\"\nsizeof(str)=16;    //运算符\nstrlen(str)=4;     //函数\n```\n* static 和extern的用法\n\t* static\n\t\t* 位置在内存的全局变量区\n\t\t* static + 全局变量表示该变量只能在该文件中用，其他文件中即使加了extern也不好使。\n\t\t* static + 函数表示该函数只能在该文件中用\n\t\t* static + 局部变量，变量作用域不变，但是生存周期直到程序结束，所以变量实际只有一份。\n\t* extern\n\t\t* extern + 全局变量，该变量在该文件中并没有定义，只是告诉编译器链接的时候去其他文件中去找。\n\t\t* 举个例子:\terrno的原理就是这样\n\t\t\n\t\t```\n\t\textern int errno; //只是声明, 在<errno.h>中\n\t\tstrerror(errno);// errno在其他文件中定义\n\t\t```\n\t\t* extern \"C\",当希望cpp的代码按照c的符号表去编译时(即希望该cpp被C代码调用),需要加上这个。[详细说明](http://www.cnblogs.com/skynet/archive/2010/07/10/1774964.html)\n\t\t\n\t\t```\n\t\t#ifdef cplusplus\n\t\textern \"C\"{\n\t\t#endif\n\t\t//这里写你自己要用c的方法编译的代码\n\t\t//之所以把ifdef拆成两个来写主要是为了好看。。。\n\t\t#ifdef cplusplus\n\t\t}\n\t\t#endif\n\t\t```\n* 关于函数的声明和定义：  \n\t* 函数的声明主要是C语言本身的缺陷，即一遍扫描。函数声明的作用：告诉编译器我有这个函数，你下面用到的时候不要告诉我找不到这个函数。\n\t* 声明和定义的参数和返回值不同编译不过去。\n\t* 符号表的生成：函数定义的时候才生成符号表，C语言的符号表只和函数名有关，C++的符号表和参数和返回值都有关，这就是所谓的函数重载。\n\t* 符号表的作用：链接的时候用，比如你调用其他文件的函数，你只需要包含它的头文件就可以编译过去，链接的时候根据函数名去符号表中去查，找到符号表对应的函数的地址。\n\t* 可以用nm命令查看符号表。\n* int main(int argc,char** argv),其中argv[0]是程序完整路径，所以argc总是比实际输入的参数多1\n\n* 多个if特别容易出错，要注意。加个else养成习惯\n\n```\nif(temp>min){\n\tmin=temp;\n}\nif(temp==min){  //典型错误，第二个if不该执行\n\n}\n```\n* #progama once 一般自己写头文件的时候用，这个保证了编译的时候该头文件只会被打开一次。\n* 关于相对路径的问题：\n\t* 一般情况：当前路径指的是该程序所在的路径，如 fragroute a.txt. 那么如果txt文件中有打开其他文件，用的是相对路径，那么当前路径就是fragroute所在的路径\n\t* 编译头文件的时候：头文件经常包含其他头文件，用的是相对路径，那么当前路径指的就是该头文件所在的路径。\n* 在网络编程中经常遇到字节序和网络序的问题（大端，小端），有些还有位域的问题。\n从程序员的角度来说：其实不用管具体的原理，对于多字节来说，发送和接收用htonl(),nltoh()就行，位域的问题，只要定义了大小端之后就按照正常的结构体成员来用就行。\n具体的原理可以参考：\n[点我查看原理](http://m.blog.csdn.net/article/details?id=45420455)\n* C 语言文件操作写入文件时，有时程序意外终止，文件并没有写入，这是因为读写缓冲区的存在。解决方法：每次fprintf之后，fflush清空缓冲区，立即写入。\n* linux下经常遇到很多格式的数不知道输出格式，如u_int32_t这种，可以用IntTypes.h这个头文件。\n* calloc和malloc的区别：calloc申请的内存会初始化为0,malloc不会初始化。\n* system(\"cmd\")可以在代码中执行linux命令\n* 返回值：void表示没有返回值，void* 表示返回一个无类型的指针。","slug":"c语言基础，长期更新","published":1,"updated":"2017-09-17T06:15:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu1w000mhb58oxze1l1f","content":"<ul>\n<li><p>include”    “ 的话编译器环境首先会在你当前所在的目录来找寻头文件，当所在目录没有的话，它就会到标准头文件库来找，找不到就报错，<br>&lt;&gt;的话它一开始就到标准头文件库来找，找不到就报错！</p>\n</li>\n<li><p>典型错误</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">if(ret=fun()!=0) </div><div class=\"line\">//典型的错误做法，因为赋值优先级最低，正确写法是</div><div class=\"line\">if((ret=fun())!=0)</div></pre></td></tr></table></figure>\n<ul>\n<li>strlen和sizeof区别     </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">char str[16]=&quot;abcd&quot;</div><div class=\"line\">sizeof(str)=16;    //运算符</div><div class=\"line\">strlen(str)=4;     //函数</div></pre></td></tr></table></figure>\n<ul>\n<li><p>static 和extern的用法</p>\n<ul>\n<li>static<ul>\n<li>位置在内存的全局变量区</li>\n<li>static + 全局变量表示该变量只能在该文件中用，其他文件中即使加了extern也不好使。</li>\n<li>static + 函数表示该函数只能在该文件中用</li>\n<li>static + 局部变量，变量作用域不变，但是生存周期直到程序结束，所以变量实际只有一份。</li>\n</ul>\n</li>\n<li><p>extern</p>\n<ul>\n<li>extern + 全局变量，该变量在该文件中并没有定义，只是告诉编译器链接的时候去其他文件中去找。</li>\n<li><p>举个例子:    errno的原理就是这样</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">extern int errno; //只是声明, 在&lt;errno.h&gt;中</div><div class=\"line\">strerror(errno);// errno在其他文件中定义</div></pre></td></tr></table></figure>\n</li>\n<li><p>extern “C”,当希望cpp的代码按照c的符号表去编译时(即希望该cpp被C代码调用),需要加上这个。<a href=\"http://www.cnblogs.com/skynet/archive/2010/07/10/1774964.html\" target=\"_blank\" rel=\"external\">详细说明</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#ifdef cplusplus</div><div class=\"line\">extern &quot;C&quot;&#123;</div><div class=\"line\">#endif</div><div class=\"line\">//这里写你自己要用c的方法编译的代码</div><div class=\"line\">//之所以把ifdef拆成两个来写主要是为了好看。。。</div><div class=\"line\">#ifdef cplusplus</div><div class=\"line\">&#125;</div><div class=\"line\">#endif</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>关于函数的声明和定义：  </p>\n<ul>\n<li>函数的声明主要是C语言本身的缺陷，即一遍扫描。函数声明的作用：告诉编译器我有这个函数，你下面用到的时候不要告诉我找不到这个函数。</li>\n<li>声明和定义的参数和返回值不同编译不过去。</li>\n<li>符号表的生成：函数定义的时候才生成符号表，C语言的符号表只和函数名有关，C++的符号表和参数和返回值都有关，这就是所谓的函数重载。</li>\n<li>符号表的作用：链接的时候用，比如你调用其他文件的函数，你只需要包含它的头文件就可以编译过去，链接的时候根据函数名去符号表中去查，找到符号表对应的函数的地址。</li>\n<li>可以用nm命令查看符号表。</li>\n</ul>\n</li>\n<li><p>int main(int argc,char** argv),其中argv[0]是程序完整路径，所以argc总是比实际输入的参数多1</p>\n</li>\n<li><p>多个if特别容易出错，要注意。加个else养成习惯</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">if(temp&gt;min)&#123;</div><div class=\"line\">\tmin=temp;</div><div class=\"line\">&#125;</div><div class=\"line\">if(temp==min)&#123;  //典型错误，第二个if不该执行</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>#progama once 一般自己写头文件的时候用，这个保证了编译的时候该头文件只会被打开一次。</li>\n<li>关于相对路径的问题：<ul>\n<li>一般情况：当前路径指的是该程序所在的路径，如 fragroute a.txt. 那么如果txt文件中有打开其他文件，用的是相对路径，那么当前路径就是fragroute所在的路径</li>\n<li>编译头文件的时候：头文件经常包含其他头文件，用的是相对路径，那么当前路径指的就是该头文件所在的路径。</li>\n</ul>\n</li>\n<li>在网络编程中经常遇到字节序和网络序的问题（大端，小端），有些还有位域的问题。<br>从程序员的角度来说：其实不用管具体的原理，对于多字节来说，发送和接收用htonl(),nltoh()就行，位域的问题，只要定义了大小端之后就按照正常的结构体成员来用就行。<br>具体的原理可以参考：<br><a href=\"http://m.blog.csdn.net/article/details?id=45420455\" target=\"_blank\" rel=\"external\">点我查看原理</a></li>\n<li>C 语言文件操作写入文件时，有时程序意外终止，文件并没有写入，这是因为读写缓冲区的存在。解决方法：每次fprintf之后，fflush清空缓冲区，立即写入。</li>\n<li>linux下经常遇到很多格式的数不知道输出格式，如u_int32_t这种，可以用IntTypes.h这个头文件。</li>\n<li>calloc和malloc的区别：calloc申请的内存会初始化为0,malloc不会初始化。</li>\n<li>system(“cmd”)可以在代码中执行linux命令</li>\n<li>返回值：void表示没有返回值，void* 表示返回一个无类型的指针。</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li><p>include”    “ 的话编译器环境首先会在你当前所在的目录来找寻头文件，当所在目录没有的话，它就会到标准头文件库来找，找不到就报错，<br>&lt;&gt;的话它一开始就到标准头文件库来找，找不到就报错！</p>\n</li>\n<li><p>典型错误</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">if(ret=fun()!=0) </div><div class=\"line\">//典型的错误做法，因为赋值优先级最低，正确写法是</div><div class=\"line\">if((ret=fun())!=0)</div></pre></td></tr></table></figure>\n<ul>\n<li>strlen和sizeof区别     </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">char str[16]=&quot;abcd&quot;</div><div class=\"line\">sizeof(str)=16;    //运算符</div><div class=\"line\">strlen(str)=4;     //函数</div></pre></td></tr></table></figure>\n<ul>\n<li><p>static 和extern的用法</p>\n<ul>\n<li>static<ul>\n<li>位置在内存的全局变量区</li>\n<li>static + 全局变量表示该变量只能在该文件中用，其他文件中即使加了extern也不好使。</li>\n<li>static + 函数表示该函数只能在该文件中用</li>\n<li>static + 局部变量，变量作用域不变，但是生存周期直到程序结束，所以变量实际只有一份。</li>\n</ul>\n</li>\n<li><p>extern</p>\n<ul>\n<li>extern + 全局变量，该变量在该文件中并没有定义，只是告诉编译器链接的时候去其他文件中去找。</li>\n<li><p>举个例子:    errno的原理就是这样</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">extern int errno; //只是声明, 在&lt;errno.h&gt;中</div><div class=\"line\">strerror(errno);// errno在其他文件中定义</div></pre></td></tr></table></figure>\n</li>\n<li><p>extern “C”,当希望cpp的代码按照c的符号表去编译时(即希望该cpp被C代码调用),需要加上这个。<a href=\"http://www.cnblogs.com/skynet/archive/2010/07/10/1774964.html\">详细说明</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#ifdef cplusplus</div><div class=\"line\">extern &quot;C&quot;&#123;</div><div class=\"line\">#endif</div><div class=\"line\">//这里写你自己要用c的方法编译的代码</div><div class=\"line\">//之所以把ifdef拆成两个来写主要是为了好看。。。</div><div class=\"line\">#ifdef cplusplus</div><div class=\"line\">&#125;</div><div class=\"line\">#endif</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>关于函数的声明和定义：  </p>\n<ul>\n<li>函数的声明主要是C语言本身的缺陷，即一遍扫描。函数声明的作用：告诉编译器我有这个函数，你下面用到的时候不要告诉我找不到这个函数。</li>\n<li>声明和定义的参数和返回值不同编译不过去。</li>\n<li>符号表的生成：函数定义的时候才生成符号表，C语言的符号表只和函数名有关，C++的符号表和参数和返回值都有关，这就是所谓的函数重载。</li>\n<li>符号表的作用：链接的时候用，比如你调用其他文件的函数，你只需要包含它的头文件就可以编译过去，链接的时候根据函数名去符号表中去查，找到符号表对应的函数的地址。</li>\n<li>可以用nm命令查看符号表。</li>\n</ul>\n</li>\n<li><p>int main(int argc,char** argv),其中argv[0]是程序完整路径，所以argc总是比实际输入的参数多1</p>\n</li>\n<li><p>多个if特别容易出错，要注意。加个else养成习惯</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">if(temp&gt;min)&#123;</div><div class=\"line\">\tmin=temp;</div><div class=\"line\">&#125;</div><div class=\"line\">if(temp==min)&#123;  //典型错误，第二个if不该执行</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>#progama once 一般自己写头文件的时候用，这个保证了编译的时候该头文件只会被打开一次。</li>\n<li>关于相对路径的问题：<ul>\n<li>一般情况：当前路径指的是该程序所在的路径，如 fragroute a.txt. 那么如果txt文件中有打开其他文件，用的是相对路径，那么当前路径就是fragroute所在的路径</li>\n<li>编译头文件的时候：头文件经常包含其他头文件，用的是相对路径，那么当前路径指的就是该头文件所在的路径。</li>\n</ul>\n</li>\n<li>在网络编程中经常遇到字节序和网络序的问题（大端，小端），有些还有位域的问题。<br>从程序员的角度来说：其实不用管具体的原理，对于多字节来说，发送和接收用htonl(),nltoh()就行，位域的问题，只要定义了大小端之后就按照正常的结构体成员来用就行。<br>具体的原理可以参考：<br><a href=\"http://m.blog.csdn.net/article/details?id=45420455\">点我查看原理</a></li>\n<li>C 语言文件操作写入文件时，有时程序意外终止，文件并没有写入，这是因为读写缓冲区的存在。解决方法：每次fprintf之后，fflush清空缓冲区，立即写入。</li>\n<li>linux下经常遇到很多格式的数不知道输出格式，如u_int32_t这种，可以用IntTypes.h这个头文件。</li>\n<li>calloc和malloc的区别：calloc申请的内存会初始化为0,malloc不会初始化。</li>\n<li>system(“cmd”)可以在代码中执行linux命令</li>\n<li>返回值：void表示没有返回值，void* 表示返回一个无类型的指针。</li>\n</ul>\n"},{"title":"c语言字符串处理函数","date":"2017-08-24T14:19:04.000Z","_content":"* c语言中虽然没有c++中那么多字符串处理函数，但是其实有很多都不用我们重复造轮子。\n* strtol:  \n\t* 字符串转整数\n* sprintf()\n\t* 格式化读入数据到字符串中，用好了很神奇，比如：\n\n```\n\tsprintf(str,\"%02x-%02x\",sum1,sum2);\n\t//将sum1,sum2转换成16进制并且存入str\n```\n* snprintf()\n\t* 同sprintf,加了长度防止越界\n* fprintf()\n\t* 格式话读入数据到文件流中\n* strncpy()\n\t* 复制n个字符，不够n个后面填充0\n* strstr:\n\t* 求是否包含子串，用来处理经常遇到的abc=123,将abc和123分别存入两个字符串中\n\t\n\t```\n\tchar str[]=\"abc=123\";\n\tchar str1[10],str2[10];\n\tchar* p=strstr(str,\"=\");\n\tif(p==NULL){\n\t\treturn;\n\t}\n\tint len1=p-str;\n\tstrncpy(str1,str,len1);\n\tstr1[len1]='\\0';\n\tstrncpy(str2,len1+1,10);\n\t```\n* sscanf:\n\t* scanf,sscanf,fscanf中，空格都是分割符，%s,%d后面匹配的时候遇到空格都会停止。%后面是正则却不会停止。\n\t* 一个非常强大的函数，作用是从一个字符串中提取想要的子串，支持正则表达式，用好了的话非常强大。[参考资料](http://blog.csdn.net/jackyvan/article/details/5349724)\n\t* 读取配置文件(以空格为分割符): \"abc  123\"\n\t\n\t```\n\tchar str[]=\"abc 123\";\n\tchar str1[10],str2[10]; \n\tsscanf(str,\"%s%s\",str1,str2); \n\t//%s可以换成%d,自动完成str to int的转换\n\t```\n\t* 读取配置文件(不以空格为分割符): \"abc=123\"\n\t\n\t```\n\tchar str[]=\"abc=123\";\n\tchar str1[10],str2[10];\n\t// %[^=]表示遇到=就停止写入\n\tsscanf(str,\"%[^=]=%s\",str1,str2);\n\t```\n\t* 提取某个子串:  \"abcd/1345@789\",提取/和@之间的部分\n\t\n\t```\n\tchar str[]=\"abcd/1345@789\";\n\tchar str1[10],str2[\u001010];\n\tsscanf(str,\"%*[^/]/%[^@]\",str1);\n\t//%*[^@]表示遇到@就停止但是不写入\n\t```\n* fscanf:\n\t* 用于从文件中解析有规律的字符串，和sscanf类似，只不过来源变成了文件流。\n* scanf:\n\t* 和sscanf类似，只不过第一个参数来源变成了用户的输入","source":"_posts/c语言字符串处理函数.md","raw":"---\ntitle: c语言字符串处理函数\ndate: 2017-08-24 22:19:04\ntags:\t\n\t- c/c++\ncategories: c/c++\n---\n* c语言中虽然没有c++中那么多字符串处理函数，但是其实有很多都不用我们重复造轮子。\n* strtol:  \n\t* 字符串转整数\n* sprintf()\n\t* 格式化读入数据到字符串中，用好了很神奇，比如：\n\n```\n\tsprintf(str,\"%02x-%02x\",sum1,sum2);\n\t//将sum1,sum2转换成16进制并且存入str\n```\n* snprintf()\n\t* 同sprintf,加了长度防止越界\n* fprintf()\n\t* 格式话读入数据到文件流中\n* strncpy()\n\t* 复制n个字符，不够n个后面填充0\n* strstr:\n\t* 求是否包含子串，用来处理经常遇到的abc=123,将abc和123分别存入两个字符串中\n\t\n\t```\n\tchar str[]=\"abc=123\";\n\tchar str1[10],str2[10];\n\tchar* p=strstr(str,\"=\");\n\tif(p==NULL){\n\t\treturn;\n\t}\n\tint len1=p-str;\n\tstrncpy(str1,str,len1);\n\tstr1[len1]='\\0';\n\tstrncpy(str2,len1+1,10);\n\t```\n* sscanf:\n\t* scanf,sscanf,fscanf中，空格都是分割符，%s,%d后面匹配的时候遇到空格都会停止。%后面是正则却不会停止。\n\t* 一个非常强大的函数，作用是从一个字符串中提取想要的子串，支持正则表达式，用好了的话非常强大。[参考资料](http://blog.csdn.net/jackyvan/article/details/5349724)\n\t* 读取配置文件(以空格为分割符): \"abc  123\"\n\t\n\t```\n\tchar str[]=\"abc 123\";\n\tchar str1[10],str2[10]; \n\tsscanf(str,\"%s%s\",str1,str2); \n\t//%s可以换成%d,自动完成str to int的转换\n\t```\n\t* 读取配置文件(不以空格为分割符): \"abc=123\"\n\t\n\t```\n\tchar str[]=\"abc=123\";\n\tchar str1[10],str2[10];\n\t// %[^=]表示遇到=就停止写入\n\tsscanf(str,\"%[^=]=%s\",str1,str2);\n\t```\n\t* 提取某个子串:  \"abcd/1345@789\",提取/和@之间的部分\n\t\n\t```\n\tchar str[]=\"abcd/1345@789\";\n\tchar str1[10],str2[\u001010];\n\tsscanf(str,\"%*[^/]/%[^@]\",str1);\n\t//%*[^@]表示遇到@就停止但是不写入\n\t```\n* fscanf:\n\t* 用于从文件中解析有规律的字符串，和sscanf类似，只不过来源变成了文件流。\n* scanf:\n\t* 和sscanf类似，只不过第一个参数来源变成了用户的输入","slug":"c语言字符串处理函数","published":1,"updated":"2017-08-25T06:38:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu1z000qhb58co6x6811","content":"<ul>\n<li>c语言中虽然没有c++中那么多字符串处理函数，但是其实有很多都不用我们重复造轮子。</li>\n<li>strtol:  <ul>\n<li>字符串转整数</li>\n</ul>\n</li>\n<li>sprintf()<ul>\n<li>格式化读入数据到字符串中，用好了很神奇，比如：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sprintf(str,&quot;%02x-%02x&quot;,sum1,sum2);</div><div class=\"line\">//将sum1,sum2转换成16进制并且存入str</div></pre></td></tr></table></figure>\n<ul>\n<li>snprintf()<ul>\n<li>同sprintf,加了长度防止越界</li>\n</ul>\n</li>\n<li>fprintf()<ul>\n<li>格式话读入数据到文件流中</li>\n</ul>\n</li>\n<li>strncpy()<ul>\n<li>复制n个字符，不够n个后面填充0</li>\n</ul>\n</li>\n<li><p>strstr:</p>\n<ul>\n<li><p>求是否包含子串，用来处理经常遇到的abc=123,将abc和123分别存入两个字符串中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">char str[]=&quot;abc=123&quot;;</div><div class=\"line\">char str1[10],str2[10];</div><div class=\"line\">char* p=strstr(str,&quot;=&quot;);</div><div class=\"line\">if(p==NULL)&#123;</div><div class=\"line\">\treturn;</div><div class=\"line\">&#125;</div><div class=\"line\">int len1=p-str;</div><div class=\"line\">strncpy(str1,str,len1);</div><div class=\"line\">str1[len1]=&apos;\\0&apos;;</div><div class=\"line\">strncpy(str2,len1+1,10);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>sscanf:</p>\n<ul>\n<li>scanf,sscanf,fscanf中，空格都是分割符，%s,%d后面匹配的时候遇到空格都会停止。%后面是正则却不会停止。</li>\n<li>一个非常强大的函数，作用是从一个字符串中提取想要的子串，支持正则表达式，用好了的话非常强大。<a href=\"http://blog.csdn.net/jackyvan/article/details/5349724\" target=\"_blank\" rel=\"external\">参考资料</a></li>\n<li><p>读取配置文件(以空格为分割符): “abc  123”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">char str[]=&quot;abc 123&quot;;</div><div class=\"line\">char str1[10],str2[10]; </div><div class=\"line\">sscanf(str,&quot;%s%s&quot;,str1,str2); </div><div class=\"line\">//%s可以换成%d,自动完成str to int的转换</div></pre></td></tr></table></figure>\n</li>\n<li><p>读取配置文件(不以空格为分割符): “abc=123”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">char str[]=&quot;abc=123&quot;;</div><div class=\"line\">char str1[10],str2[10];</div><div class=\"line\">// %[^=]表示遇到=就停止写入</div><div class=\"line\">sscanf(str,&quot;%[^=]=%s&quot;,str1,str2);</div></pre></td></tr></table></figure>\n</li>\n<li><p>提取某个子串:  “abcd/1345@789”,提取/和@之间的部分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">char str[]=&quot;abcd/1345@789&quot;;</div><div class=\"line\">char str1[10],str2[\u001010];</div><div class=\"line\">sscanf(str,&quot;%*[^/]/%[^@]&quot;,str1);</div><div class=\"line\">//%*[^@]表示遇到@就停止但是不写入</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>fscanf:</p>\n<ul>\n<li>用于从文件中解析有规律的字符串，和sscanf类似，只不过来源变成了文件流。</li>\n</ul>\n</li>\n<li>scanf:<ul>\n<li>和sscanf类似，只不过第一个参数来源变成了用户的输入</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>c语言中虽然没有c++中那么多字符串处理函数，但是其实有很多都不用我们重复造轮子。</li>\n<li>strtol:  <ul>\n<li>字符串转整数</li>\n</ul>\n</li>\n<li>sprintf()<ul>\n<li>格式化读入数据到字符串中，用好了很神奇，比如：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sprintf(str,&quot;%02x-%02x&quot;,sum1,sum2);</div><div class=\"line\">//将sum1,sum2转换成16进制并且存入str</div></pre></td></tr></table></figure>\n<ul>\n<li>snprintf()<ul>\n<li>同sprintf,加了长度防止越界</li>\n</ul>\n</li>\n<li>fprintf()<ul>\n<li>格式话读入数据到文件流中</li>\n</ul>\n</li>\n<li>strncpy()<ul>\n<li>复制n个字符，不够n个后面填充0</li>\n</ul>\n</li>\n<li><p>strstr:</p>\n<ul>\n<li><p>求是否包含子串，用来处理经常遇到的abc=123,将abc和123分别存入两个字符串中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">char str[]=&quot;abc=123&quot;;</div><div class=\"line\">char str1[10],str2[10];</div><div class=\"line\">char* p=strstr(str,&quot;=&quot;);</div><div class=\"line\">if(p==NULL)&#123;</div><div class=\"line\">\treturn;</div><div class=\"line\">&#125;</div><div class=\"line\">int len1=p-str;</div><div class=\"line\">strncpy(str1,str,len1);</div><div class=\"line\">str1[len1]=&apos;\\0&apos;;</div><div class=\"line\">strncpy(str2,len1+1,10);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>sscanf:</p>\n<ul>\n<li>scanf,sscanf,fscanf中，空格都是分割符，%s,%d后面匹配的时候遇到空格都会停止。%后面是正则却不会停止。</li>\n<li>一个非常强大的函数，作用是从一个字符串中提取想要的子串，支持正则表达式，用好了的话非常强大。<a href=\"http://blog.csdn.net/jackyvan/article/details/5349724\">参考资料</a></li>\n<li><p>读取配置文件(以空格为分割符): “abc  123”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">char str[]=&quot;abc 123&quot;;</div><div class=\"line\">char str1[10],str2[10]; </div><div class=\"line\">sscanf(str,&quot;%s%s&quot;,str1,str2); </div><div class=\"line\">//%s可以换成%d,自动完成str to int的转换</div></pre></td></tr></table></figure>\n</li>\n<li><p>读取配置文件(不以空格为分割符): “abc=123”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">char str[]=&quot;abc=123&quot;;</div><div class=\"line\">char str1[10],str2[10];</div><div class=\"line\">// %[^=]表示遇到=就停止写入</div><div class=\"line\">sscanf(str,&quot;%[^=]=%s&quot;,str1,str2);</div></pre></td></tr></table></figure>\n</li>\n<li><p>提取某个子串:  “abcd/1345@789”,提取/和@之间的部分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">char str[]=&quot;abcd/1345@789&quot;;</div><div class=\"line\">char str1[10],str2[\u001010];</div><div class=\"line\">sscanf(str,&quot;%*[^/]/%[^@]&quot;,str1);</div><div class=\"line\">//%*[^@]表示遇到@就停止但是不写入</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>fscanf:</p>\n<ul>\n<li>用于从文件中解析有规律的字符串，和sscanf类似，只不过来源变成了文件流。</li>\n</ul>\n</li>\n<li>scanf:<ul>\n<li>和sscanf类似，只不过第一个参数来源变成了用户的输入</li>\n</ul>\n</li>\n</ul>\n"},{"title":"c语言时间函数全攻略","date":"2016-04-10T11:13:32.000Z","_content":"\n最近在做操作系统相关的实验，其中经常用到获取系统的时间等函数，现在总结一下。\n\n概念：gmt: GreenWich mean time          //格林威治时间\n          \n utc:   Coordinated universal time //世界时\n            格林威治时间由本初子午线有关，但是现在发现不太精确，不再使用。\n            utc时间由原子钟确定，更加精确，现在表达时区一般这样表达，如北京utc-8。\n\n通用的库:time.h>      \n   \nstruct____tm{ year,month,....second\n} // month[0,11], year=now-1900  \ntime_______t: (long int)                                                  \ntime_______t* time(NULL): 获得1970年1月1日到现在的秒数，utc时间   \nchar * ctime(time_______t*):将time_____t转换成字符串,gmt时间      \nstruct tm* localtime(time______t):utc秒数变成当地时间(时区)      \nstruct tm* gmtime(time______t):utc秒数变成gmt时间      \n综上：time()得到的秒数是确定的，区别就是转换成具体时间是gmt时间还是当地时间，直接由time__t计算,不加时区得到的是gmt时间\n\n\n    特有的类：Linux 下：\n        <sys/time.h>    \n        strcut timeval ，struct timezone\n        struct timeval{\n\t       second;      //应该都是long int\n\t       u second;    // 微秒\n        }\n        timezone: 存储时区信息\n        gettimeofday(struct timeval*,struct timezone*)\n\n\n    windows下：\n        <windows.h> GETSYSTEMTIME,SYSTEMTIME\n        SYSTEMTIME: year,month,...second, msecond,  毫秒\n        GETSystemTime(SYSTEMTIME*)    //utc\n        GETLocalTime(SYSTEM*)         //local\n\n综上：如果想写跨平台通用的:\ntime+ctime 就够了，不能精确到ms       \n精确到ms：windows+getsystem就够了      \nlinux下：   gettimeofday -> timeval ->time__t -> getime -> struct tm,麻烦一点。\n\n顺便说下                                                                                                        sleep函数：    \nwindows:   \nsleep()  //parament 是 s   \nSleep()                 //parament 是 ms,毫秒   \n\nLinux:\nsleep( ) //parament 是 s     \nusleep()  //单位是 us ，微秒\n\n1s= 1000 ms =1000000 us\n\n\n\n\n                    \n","source":"_posts/c语言时间函数全攻略.md","raw":"---\ntitle: c语言时间函数全攻略\ndate:  2016-4-10 19:13:32\ntags:  \n  - 时间函数\n  - c语言\n  - Linux\ncategories: c/c++\n---\n\n最近在做操作系统相关的实验，其中经常用到获取系统的时间等函数，现在总结一下。\n\n概念：gmt: GreenWich mean time          //格林威治时间\n          \n utc:   Coordinated universal time //世界时\n            格林威治时间由本初子午线有关，但是现在发现不太精确，不再使用。\n            utc时间由原子钟确定，更加精确，现在表达时区一般这样表达，如北京utc-8。\n\n通用的库:time.h>      \n   \nstruct____tm{ year,month,....second\n} // month[0,11], year=now-1900  \ntime_______t: (long int)                                                  \ntime_______t* time(NULL): 获得1970年1月1日到现在的秒数，utc时间   \nchar * ctime(time_______t*):将time_____t转换成字符串,gmt时间      \nstruct tm* localtime(time______t):utc秒数变成当地时间(时区)      \nstruct tm* gmtime(time______t):utc秒数变成gmt时间      \n综上：time()得到的秒数是确定的，区别就是转换成具体时间是gmt时间还是当地时间，直接由time__t计算,不加时区得到的是gmt时间\n\n\n    特有的类：Linux 下：\n        <sys/time.h>    \n        strcut timeval ，struct timezone\n        struct timeval{\n\t       second;      //应该都是long int\n\t       u second;    // 微秒\n        }\n        timezone: 存储时区信息\n        gettimeofday(struct timeval*,struct timezone*)\n\n\n    windows下：\n        <windows.h> GETSYSTEMTIME,SYSTEMTIME\n        SYSTEMTIME: year,month,...second, msecond,  毫秒\n        GETSystemTime(SYSTEMTIME*)    //utc\n        GETLocalTime(SYSTEM*)         //local\n\n综上：如果想写跨平台通用的:\ntime+ctime 就够了，不能精确到ms       \n精确到ms：windows+getsystem就够了      \nlinux下：   gettimeofday -> timeval ->time__t -> getime -> struct tm,麻烦一点。\n\n顺便说下                                                                                                        sleep函数：    \nwindows:   \nsleep()  //parament 是 s   \nSleep()                 //parament 是 ms,毫秒   \n\nLinux:\nsleep( ) //parament 是 s     \nusleep()  //单位是 us ，微秒\n\n1s= 1000 ms =1000000 us\n\n\n\n\n                    \n","slug":"c语言时间函数全攻略","published":1,"updated":"2016-10-21T05:54:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu21000thb58fbup3tfc","content":"<p>最近在做操作系统相关的实验，其中经常用到获取系统的时间等函数，现在总结一下。</p>\n<p>概念：gmt: GreenWich mean time          //格林威治时间</p>\n<p> utc:   Coordinated universal time //世界时<br>            格林威治时间由本初子午线有关，但是现在发现不太精确，不再使用。<br>            utc时间由原子钟确定，更加精确，现在表达时区一般这样表达，如北京utc-8。</p>\n<p>通用的库:time.h&gt;      </p>\n<p>struct<strong><strong>tm{ year,month,….second<br>} // month[0,11], year=now-1900<br>time___</strong></strong>t: (long int)<br>time<strong>___</strong>t<em> time(NULL): 获得1970年1月1日到现在的秒数，utc时间<br>char </em> ctime(time<strong>___</strong>t<em>):将time<strong>_</strong>t转换成字符串,gmt时间<br>struct tm</em> localtime(time<strong>__</strong>t):utc秒数变成当地时间(时区)<br>struct tm* gmtime(time<strong>__</strong>t):utc秒数变成gmt时间<br>综上：time()得到的秒数是确定的，区别就是转换成具体时间是gmt时间还是当地时间，直接由time__t计算,不加时区得到的是gmt时间</p>\n<pre><code>特有的类：Linux 下：\n    &lt;sys/time.h&gt;    \n    strcut timeval ，struct timezone\n    struct timeval{\n       second;      //应该都是long int\n       u second;    // 微秒\n    }\n    timezone: 存储时区信息\n    gettimeofday(struct timeval*,struct timezone*)\n\n\nwindows下：\n    &lt;windows.h&gt; GETSYSTEMTIME,SYSTEMTIME\n    SYSTEMTIME: year,month,...second, msecond,  毫秒\n    GETSystemTime(SYSTEMTIME*)    //utc\n    GETLocalTime(SYSTEM*)         //local\n</code></pre><p>综上：如果想写跨平台通用的:<br>time+ctime 就够了，不能精确到ms<br>精确到ms：windows+getsystem就够了<br>linux下：   gettimeofday -&gt; timeval -&gt;time__t -&gt; getime -&gt; struct tm,麻烦一点。</p>\n<p>顺便说下                                                                                                        sleep函数：<br>windows:<br>sleep()  //parament 是 s<br>Sleep()                 //parament 是 ms,毫秒   </p>\n<p>Linux:<br>sleep( ) //parament 是 s<br>usleep()  //单位是 us ，微秒</p>\n<p>1s= 1000 ms =1000000 us</p>\n","excerpt":"","more":"<p>最近在做操作系统相关的实验，其中经常用到获取系统的时间等函数，现在总结一下。</p>\n<p>概念：gmt: GreenWich mean time          //格林威治时间</p>\n<p> utc:   Coordinated universal time //世界时<br>            格林威治时间由本初子午线有关，但是现在发现不太精确，不再使用。<br>            utc时间由原子钟确定，更加精确，现在表达时区一般这样表达，如北京utc-8。</p>\n<p>通用的库:time.h&gt;      </p>\n<p>struct<strong><strong>tm{ year,month,….second<br>} // month[0,11], year=now-1900<br>time___</strong></strong>t: (long int)<br>time<strong>___</strong>t<em> time(NULL): 获得1970年1月1日到现在的秒数，utc时间<br>char </em> ctime(time<strong>___</strong>t<em>):将time<strong>_</strong>t转换成字符串,gmt时间<br>struct tm</em> localtime(time<strong>__</strong>t):utc秒数变成当地时间(时区)<br>struct tm* gmtime(time<strong>__</strong>t):utc秒数变成gmt时间<br>综上：time()得到的秒数是确定的，区别就是转换成具体时间是gmt时间还是当地时间，直接由time__t计算,不加时区得到的是gmt时间</p>\n<pre><code>特有的类：Linux 下：\n    &lt;sys/time.h&gt;    \n    strcut timeval ，struct timezone\n    struct timeval{\n       second;      //应该都是long int\n       u second;    // 微秒\n    }\n    timezone: 存储时区信息\n    gettimeofday(struct timeval*,struct timezone*)\n\n\nwindows下：\n    &lt;windows.h&gt; GETSYSTEMTIME,SYSTEMTIME\n    SYSTEMTIME: year,month,...second, msecond,  毫秒\n    GETSystemTime(SYSTEMTIME*)    //utc\n    GETLocalTime(SYSTEM*)         //local\n</code></pre><p>综上：如果想写跨平台通用的:<br>time+ctime 就够了，不能精确到ms<br>精确到ms：windows+getsystem就够了<br>linux下：   gettimeofday -&gt; timeval -&gt;time__t -&gt; getime -&gt; struct tm,麻烦一点。</p>\n<p>顺便说下                                                                                                        sleep函数：<br>windows:<br>sleep()  //parament 是 s<br>Sleep()                 //parament 是 ms,毫秒   </p>\n<p>Linux:<br>sleep( ) //parament 是 s<br>usleep()  //单位是 us ，微秒</p>\n<p>1s= 1000 ms =1000000 us</p>\n"},{"title":"gdb命令总结","date":"2016-11-03T10:35:50.000Z","_content":"\n* list+行号(函数名)：查看某一行(函数)的代码\n* break+file.c:行号: 在某个文件设置断点，如果只有一个文件则不需要\n* 条件断点：break test.c:34 if count>50,一般用在循环中设置断点\n* start: 停在main函数第一条\n* run(r):   开始运行，停在断点处\n* continue(c): 继续运行，停在下一个断点\n* next(n): 单步执行\n* until+行号: 继续运行，直到某一行停止\n* p :  查看变量\n* step(s): 进入函数\n* quit(q): 退出gdb\n* info threads: 显示所有线程信息\n* gdb调试带参数的程序如main： gdb main ，r a b c ，abc为参数\n* bt: backtrace,打印当前的函数调用栈信息\n* ctrl+a+x: 上方显示源代码，下方gdb调试","source":"_posts/gdb命令总结.md","raw":"---\ntitle: gdb命令总结\ndate: 2016-11-03 18:35:50\ntags: gdb命令\ncategories: Linux\n---\n\n* list+行号(函数名)：查看某一行(函数)的代码\n* break+file.c:行号: 在某个文件设置断点，如果只有一个文件则不需要\n* 条件断点：break test.c:34 if count>50,一般用在循环中设置断点\n* start: 停在main函数第一条\n* run(r):   开始运行，停在断点处\n* continue(c): 继续运行，停在下一个断点\n* next(n): 单步执行\n* until+行号: 继续运行，直到某一行停止\n* p :  查看变量\n* step(s): 进入函数\n* quit(q): 退出gdb\n* info threads: 显示所有线程信息\n* gdb调试带参数的程序如main： gdb main ，r a b c ，abc为参数\n* bt: backtrace,打印当前的函数调用栈信息\n* ctrl+a+x: 上方显示源代码，下方gdb调试","slug":"gdb命令总结","published":1,"updated":"2017-08-25T07:16:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu24000yhb58oz4w6pyh","content":"<ul>\n<li>list+行号(函数名)：查看某一行(函数)的代码</li>\n<li>break+file.c:行号: 在某个文件设置断点，如果只有一个文件则不需要</li>\n<li>条件断点：break test.c:34 if count&gt;50,一般用在循环中设置断点</li>\n<li>start: 停在main函数第一条</li>\n<li>run(r):   开始运行，停在断点处</li>\n<li>continue(c): 继续运行，停在下一个断点</li>\n<li>next(n): 单步执行</li>\n<li>until+行号: 继续运行，直到某一行停止</li>\n<li>p :  查看变量</li>\n<li>step(s): 进入函数</li>\n<li>quit(q): 退出gdb</li>\n<li>info threads: 显示所有线程信息</li>\n<li>gdb调试带参数的程序如main： gdb main ，r a b c ，abc为参数</li>\n<li>bt: backtrace,打印当前的函数调用栈信息</li>\n<li>ctrl+a+x: 上方显示源代码，下方gdb调试</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>list+行号(函数名)：查看某一行(函数)的代码</li>\n<li>break+file.c:行号: 在某个文件设置断点，如果只有一个文件则不需要</li>\n<li>条件断点：break test.c:34 if count&gt;50,一般用在循环中设置断点</li>\n<li>start: 停在main函数第一条</li>\n<li>run(r):   开始运行，停在断点处</li>\n<li>continue(c): 继续运行，停在下一个断点</li>\n<li>next(n): 单步执行</li>\n<li>until+行号: 继续运行，直到某一行停止</li>\n<li>p :  查看变量</li>\n<li>step(s): 进入函数</li>\n<li>quit(q): 退出gdb</li>\n<li>info threads: 显示所有线程信息</li>\n<li>gdb调试带参数的程序如main： gdb main ，r a b c ，abc为参数</li>\n<li>bt: backtrace,打印当前的函数调用栈信息</li>\n<li>ctrl+a+x: 上方显示源代码，下方gdb调试</li>\n</ul>\n"},{"title":"git教程","date":"2016-10-24T01:41:43.000Z","_content":"\n* git 的结构：\n\t* 工作区：也就是我们平时看到的文件\n\t* 暂存区：git add之后将改动存到暂存区\n\t* 本地版本库： 分支信息\n\t* 关于暂存区： git commit 之前都是不与具体分支关联的，举个例子，master与dev都是最新的，在dev分支修改某文件，添加到暂存区，然后切换到master分支去提交，这个提交算master分支的。\n\t* git checkout branch: \n\t\t* git checkout 会用本地版本库中的分支替换工作区的内容。具体来说，当你执行git checkout 时，git 会判断切换分支和当前分支的关系，如果都是最新的，则工作区不变，暂存区也不变。就如上面的例子，没提交之前dev和master是一样的，所以checkout master时工作区不变。\n\t\t* checkout master时，如果dev和master不同，就会用master来替换工作区，同时清空暂存区，如果暂存区有在dev分支修改的文件，系统就会提示暂存区会清空，dev分支的修改无效，可以选择commit 或者stash。\n\t* git add\n\t\t* git add是将工作区的文件保存到暂存区，最好养成习惯，git add ,git commit -m '',不要直接git commit -a -m ''。因为git add可以分批次添加到暂存区。\n\t* git merge: \n\t\t* merge冲突： 冲突原因：开始master和dev相同，后来master修改了A文件的第n行，dev修改了A文件的第\n\n建立本地仓库--->修改本地文件--->commit到本地git--->sync到远程git\n\n![](../pictures/git教程1.jpg)\n\ncommit: 提交到本地git仓库   \nsync(push):   同步到远端git仓库   \npull request(pr): 将自己的分支merge到另一个分支   \nfork: 复制别人的仓库并创建一个branch(分支)    \npull: 将你fork的仓库中的同步到本地git中   \nclone: 将自己远端git的项目(fork或自己建的)复制到本地git上\n\n![](../pictures/git教程2.jpg)\n注意：\n\n* commit 之后要sync\n* 多人共同修改某个项目，为了避免冲突，最好先pull，同步一下最新的版本再提交自己的代码\n\n\n\n在实际项目中，一般常用的git 操作一般为：\n\n* git clone: 克隆一个仓库\n* git branch: 查看本地分支\n* git branch -a: 查看所有分支，本地和远程\n* git fetch: 取回所有分支的更新\n* git branch --set-upstream-to=origin/dev \n* git branch -d 本地分支：删除本地分支\n* git difftool 分支1 分支2：用ksdiff查看diff\n* git stash: 暂存不提交本地的改变\n\n* git checkout -b 本地分支:新建一个本地分支并切换\n* git commit -a -m 'fix bugs'\n* git push 远程主机名  本地分支: refs/for/远程分支名(refs/for表示评审)\n* 初始化一个分支的时候一般： git push -u origin master,表示设置默认主机为origin,没有远程分支会新建一个并且建立追踪关系，以后直接git push就行了。\n* git push -u 远程主机名 本地分支 ：-u 设置默认主机\n* git config --list查看git配置信息\n* git branch -vv:查看分支对应关系\n* git 不支持上传空目录，所以一般上传空目录的时候要在里面添加一个无用的文件.gitignore","source":"_posts/git教程.md","raw":"---\ntitle: git教程\ndate: 2016-10-24 09:41:43\ntags: \n  - git \n  - github\ncategories: 计算机基础\n---\n\n* git 的结构：\n\t* 工作区：也就是我们平时看到的文件\n\t* 暂存区：git add之后将改动存到暂存区\n\t* 本地版本库： 分支信息\n\t* 关于暂存区： git commit 之前都是不与具体分支关联的，举个例子，master与dev都是最新的，在dev分支修改某文件，添加到暂存区，然后切换到master分支去提交，这个提交算master分支的。\n\t* git checkout branch: \n\t\t* git checkout 会用本地版本库中的分支替换工作区的内容。具体来说，当你执行git checkout 时，git 会判断切换分支和当前分支的关系，如果都是最新的，则工作区不变，暂存区也不变。就如上面的例子，没提交之前dev和master是一样的，所以checkout master时工作区不变。\n\t\t* checkout master时，如果dev和master不同，就会用master来替换工作区，同时清空暂存区，如果暂存区有在dev分支修改的文件，系统就会提示暂存区会清空，dev分支的修改无效，可以选择commit 或者stash。\n\t* git add\n\t\t* git add是将工作区的文件保存到暂存区，最好养成习惯，git add ,git commit -m '',不要直接git commit -a -m ''。因为git add可以分批次添加到暂存区。\n\t* git merge: \n\t\t* merge冲突： 冲突原因：开始master和dev相同，后来master修改了A文件的第n行，dev修改了A文件的第\n\n建立本地仓库--->修改本地文件--->commit到本地git--->sync到远程git\n\n![](../pictures/git教程1.jpg)\n\ncommit: 提交到本地git仓库   \nsync(push):   同步到远端git仓库   \npull request(pr): 将自己的分支merge到另一个分支   \nfork: 复制别人的仓库并创建一个branch(分支)    \npull: 将你fork的仓库中的同步到本地git中   \nclone: 将自己远端git的项目(fork或自己建的)复制到本地git上\n\n![](../pictures/git教程2.jpg)\n注意：\n\n* commit 之后要sync\n* 多人共同修改某个项目，为了避免冲突，最好先pull，同步一下最新的版本再提交自己的代码\n\n\n\n在实际项目中，一般常用的git 操作一般为：\n\n* git clone: 克隆一个仓库\n* git branch: 查看本地分支\n* git branch -a: 查看所有分支，本地和远程\n* git fetch: 取回所有分支的更新\n* git branch --set-upstream-to=origin/dev \n* git branch -d 本地分支：删除本地分支\n* git difftool 分支1 分支2：用ksdiff查看diff\n* git stash: 暂存不提交本地的改变\n\n* git checkout -b 本地分支:新建一个本地分支并切换\n* git commit -a -m 'fix bugs'\n* git push 远程主机名  本地分支: refs/for/远程分支名(refs/for表示评审)\n* 初始化一个分支的时候一般： git push -u origin master,表示设置默认主机为origin,没有远程分支会新建一个并且建立追踪关系，以后直接git push就行了。\n* git push -u 远程主机名 本地分支 ：-u 设置默认主机\n* git config --list查看git配置信息\n* git branch -vv:查看分支对应关系\n* git 不支持上传空目录，所以一般上传空目录的时候要在里面添加一个无用的文件.gitignore","slug":"git教程","published":1,"updated":"2018-01-07T08:53:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu280010hb58ufmihx5r","content":"<ul>\n<li>git 的结构：<ul>\n<li>工作区：也就是我们平时看到的文件</li>\n<li>暂存区：git add之后将改动存到暂存区</li>\n<li>本地版本库： 分支信息</li>\n<li>关于暂存区： git commit 之前都是不与具体分支关联的，举个例子，master与dev都是最新的，在dev分支修改某文件，添加到暂存区，然后切换到master分支去提交，这个提交算master分支的。</li>\n<li>git checkout branch: <ul>\n<li>git checkout 会用本地版本库中的分支替换工作区的内容。具体来说，当你执行git checkout 时，git 会判断切换分支和当前分支的关系，如果都是最新的，则工作区不变，暂存区也不变。就如上面的例子，没提交之前dev和master是一样的，所以checkout master时工作区不变。</li>\n<li>checkout master时，如果dev和master不同，就会用master来替换工作区，同时清空暂存区，如果暂存区有在dev分支修改的文件，系统就会提示暂存区会清空，dev分支的修改无效，可以选择commit 或者stash。</li>\n</ul>\n</li>\n<li>git add<ul>\n<li>git add是将工作区的文件保存到暂存区，最好养成习惯，git add ,git commit -m ‘’,不要直接git commit -a -m ‘’。因为git add可以分批次添加到暂存区。</li>\n</ul>\n</li>\n<li>git merge: <ul>\n<li>merge冲突： 冲突原因：开始master和dev相同，后来master修改了A文件的第n行，dev修改了A文件的第</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>建立本地仓库—&gt;修改本地文件—&gt;commit到本地git—&gt;sync到远程git</p>\n<p><img src=\"../pictures/git教程1.jpg\" alt=\"\"></p>\n<p>commit: 提交到本地git仓库<br>sync(push):   同步到远端git仓库<br>pull request(pr): 将自己的分支merge到另一个分支<br>fork: 复制别人的仓库并创建一个branch(分支)<br>pull: 将你fork的仓库中的同步到本地git中<br>clone: 将自己远端git的项目(fork或自己建的)复制到本地git上</p>\n<p><img src=\"../pictures/git教程2.jpg\" alt=\"\"><br>注意：</p>\n<ul>\n<li>commit 之后要sync</li>\n<li>多人共同修改某个项目，为了避免冲突，最好先pull，同步一下最新的版本再提交自己的代码</li>\n</ul>\n<p>在实际项目中，一般常用的git 操作一般为：</p>\n<ul>\n<li>git clone: 克隆一个仓库</li>\n<li>git branch: 查看本地分支</li>\n<li>git branch -a: 查看所有分支，本地和远程</li>\n<li>git fetch: 取回所有分支的更新</li>\n<li>git branch –set-upstream-to=origin/dev </li>\n<li>git branch -d 本地分支：删除本地分支</li>\n<li>git difftool 分支1 分支2：用ksdiff查看diff</li>\n<li><p>git stash: 暂存不提交本地的改变</p>\n</li>\n<li><p>git checkout -b 本地分支:新建一个本地分支并切换</p>\n</li>\n<li>git commit -a -m ‘fix bugs’</li>\n<li>git push 远程主机名  本地分支: refs/for/远程分支名(refs/for表示评审)</li>\n<li>初始化一个分支的时候一般： git push -u origin master,表示设置默认主机为origin,没有远程分支会新建一个并且建立追踪关系，以后直接git push就行了。</li>\n<li>git push -u 远程主机名 本地分支 ：-u 设置默认主机</li>\n<li>git config –list查看git配置信息</li>\n<li>git branch -vv:查看分支对应关系</li>\n<li>git 不支持上传空目录，所以一般上传空目录的时候要在里面添加一个无用的文件.gitignore</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>git 的结构：<ul>\n<li>工作区：也就是我们平时看到的文件</li>\n<li>暂存区：git add之后将改动存到暂存区</li>\n<li>本地版本库： 分支信息</li>\n<li>关于暂存区： git commit 之前都是不与具体分支关联的，举个例子，master与dev都是最新的，在dev分支修改某文件，添加到暂存区，然后切换到master分支去提交，这个提交算master分支的。</li>\n<li>git checkout branch: <ul>\n<li>git checkout 会用本地版本库中的分支替换工作区的内容。具体来说，当你执行git checkout 时，git 会判断切换分支和当前分支的关系，如果都是最新的，则工作区不变，暂存区也不变。就如上面的例子，没提交之前dev和master是一样的，所以checkout master时工作区不变。</li>\n<li>checkout master时，如果dev和master不同，就会用master来替换工作区，同时清空暂存区，如果暂存区有在dev分支修改的文件，系统就会提示暂存区会清空，dev分支的修改无效，可以选择commit 或者stash。</li>\n</ul>\n</li>\n<li>git add<ul>\n<li>git add是将工作区的文件保存到暂存区，最好养成习惯，git add ,git commit -m ‘’,不要直接git commit -a -m ‘’。因为git add可以分批次添加到暂存区。</li>\n</ul>\n</li>\n<li>git merge: <ul>\n<li>merge冲突： 冲突原因：开始master和dev相同，后来master修改了A文件的第n行，dev修改了A文件的第</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>建立本地仓库—&gt;修改本地文件—&gt;commit到本地git—&gt;sync到远程git</p>\n<p><img src=\"../pictures/git教程1.jpg\" alt=\"\"></p>\n<p>commit: 提交到本地git仓库<br>sync(push):   同步到远端git仓库<br>pull request(pr): 将自己的分支merge到另一个分支<br>fork: 复制别人的仓库并创建一个branch(分支)<br>pull: 将你fork的仓库中的同步到本地git中<br>clone: 将自己远端git的项目(fork或自己建的)复制到本地git上</p>\n<p><img src=\"../pictures/git教程2.jpg\" alt=\"\"><br>注意：</p>\n<ul>\n<li>commit 之后要sync</li>\n<li>多人共同修改某个项目，为了避免冲突，最好先pull，同步一下最新的版本再提交自己的代码</li>\n</ul>\n<p>在实际项目中，一般常用的git 操作一般为：</p>\n<ul>\n<li>git clone: 克隆一个仓库</li>\n<li>git branch: 查看本地分支</li>\n<li>git branch -a: 查看所有分支，本地和远程</li>\n<li>git fetch: 取回所有分支的更新</li>\n<li>git branch –set-upstream-to=origin/dev </li>\n<li>git branch -d 本地分支：删除本地分支</li>\n<li>git difftool 分支1 分支2：用ksdiff查看diff</li>\n<li><p>git stash: 暂存不提交本地的改变</p>\n</li>\n<li><p>git checkout -b 本地分支:新建一个本地分支并切换</p>\n</li>\n<li>git commit -a -m ‘fix bugs’</li>\n<li>git push 远程主机名  本地分支: refs/for/远程分支名(refs/for表示评审)</li>\n<li>初始化一个分支的时候一般： git push -u origin master,表示设置默认主机为origin,没有远程分支会新建一个并且建立追踪关系，以后直接git push就行了。</li>\n<li>git push -u 远程主机名 本地分支 ：-u 设置默认主机</li>\n<li>git config –list查看git配置信息</li>\n<li>git branch -vv:查看分支对应关系</li>\n<li>git 不支持上传空目录，所以一般上传空目录的时候要在里面添加一个无用的文件.gitignore</li>\n</ul>\n"},{"title":"java语言基础，长期更新","date":"2016-10-20T12:30:57.000Z","_content":"\n\n0.eclipse操作技巧：ctrl+变量： 查看定义 \nctrl+7 批量注释\n\n1.命名规范： \n包名：  cuiyiming\n类名/变量名：  CuiYiMing\n方法名：cuiYiMing\n常量名：CUI_YI_MING\n\n2.大括号： 第一个不换行\n\n2.main 函数： \n只能是 public static void main(String[] args)形式，public 表示函数可以访问，static 表示 属于这个类，不需要new 对象,void 表示没有返回值，因为不知道返回值给谁。所以强制规定没有。\n\n3.import 类似于c#中的namespace,逻辑上对类进行组织和管理。\n\n4.java 访问权限: \npublic protected default private \n修饰类：public default \n修饰成员变量和函数： public protected default private \n判定一个函数能否访问，先通过类修饰符，再通过函数修饰符，两重判定 \n![这里写图片描述](http://img.blog.csdn.net/20151104220756295)\n\n5.static :静态量，属于类，存在静态存储区，编译时分配内存。 \n特点：静态方法只能调用静态变量。\n原因：非静态量调用时必须要有this指针，但是静态方法显然不能为他提供this 指针。\n","source":"_posts/java语言基础，长期更新.md","raw":"---\ntitle: java语言基础，长期更新\ndate: 2016-10-20 20:30:57\ntags:  java\ncategories: java\n---\n\n\n0.eclipse操作技巧：ctrl+变量： 查看定义 \nctrl+7 批量注释\n\n1.命名规范： \n包名：  cuiyiming\n类名/变量名：  CuiYiMing\n方法名：cuiYiMing\n常量名：CUI_YI_MING\n\n2.大括号： 第一个不换行\n\n2.main 函数： \n只能是 public static void main(String[] args)形式，public 表示函数可以访问，static 表示 属于这个类，不需要new 对象,void 表示没有返回值，因为不知道返回值给谁。所以强制规定没有。\n\n3.import 类似于c#中的namespace,逻辑上对类进行组织和管理。\n\n4.java 访问权限: \npublic protected default private \n修饰类：public default \n修饰成员变量和函数： public protected default private \n判定一个函数能否访问，先通过类修饰符，再通过函数修饰符，两重判定 \n![这里写图片描述](http://img.blog.csdn.net/20151104220756295)\n\n5.static :静态量，属于类，存在静态存储区，编译时分配内存。 \n特点：静态方法只能调用静态变量。\n原因：非静态量调用时必须要有this指针，但是静态方法显然不能为他提供this 指针。\n","slug":"java语言基础，长期更新","published":1,"updated":"2016-10-21T05:59:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu2b0013hb58h2hjh96q","content":"<p>0.eclipse操作技巧：ctrl+变量： 查看定义<br>ctrl+7 批量注释</p>\n<p>1.命名规范：<br>包名：  cuiyiming<br>类名/变量名：  CuiYiMing<br>方法名：cuiYiMing<br>常量名：CUI_YI_MING</p>\n<p>2.大括号： 第一个不换行</p>\n<p>2.main 函数：<br>只能是 public static void main(String[] args)形式，public 表示函数可以访问，static 表示 属于这个类，不需要new 对象,void 表示没有返回值，因为不知道返回值给谁。所以强制规定没有。</p>\n<p>3.import 类似于c#中的namespace,逻辑上对类进行组织和管理。</p>\n<p>4.java 访问权限:<br>public protected default private<br>修饰类：public default<br>修饰成员变量和函数： public protected default private<br>判定一个函数能否访问，先通过类修饰符，再通过函数修饰符，两重判定<br><img src=\"http://img.blog.csdn.net/20151104220756295\" alt=\"这里写图片描述\"></p>\n<p>5.static :静态量，属于类，存在静态存储区，编译时分配内存。<br>特点：静态方法只能调用静态变量。<br>原因：非静态量调用时必须要有this指针，但是静态方法显然不能为他提供this 指针。</p>\n","excerpt":"","more":"<p>0.eclipse操作技巧：ctrl+变量： 查看定义<br>ctrl+7 批量注释</p>\n<p>1.命名规范：<br>包名：  cuiyiming<br>类名/变量名：  CuiYiMing<br>方法名：cuiYiMing<br>常量名：CUI_YI_MING</p>\n<p>2.大括号： 第一个不换行</p>\n<p>2.main 函数：<br>只能是 public static void main(String[] args)形式，public 表示函数可以访问，static 表示 属于这个类，不需要new 对象,void 表示没有返回值，因为不知道返回值给谁。所以强制规定没有。</p>\n<p>3.import 类似于c#中的namespace,逻辑上对类进行组织和管理。</p>\n<p>4.java 访问权限:<br>public protected default private<br>修饰类：public default<br>修饰成员变量和函数： public protected default private<br>判定一个函数能否访问，先通过类修饰符，再通过函数修饰符，两重判定<br><img src=\"http://img.blog.csdn.net/20151104220756295\" alt=\"这里写图片描述\"></p>\n<p>5.static :静态量，属于类，存在静态存储区，编译时分配内存。<br>特点：静态方法只能调用静态变量。<br>原因：非静态量调用时必须要有this指针，但是静态方法显然不能为他提供this 指针。</p>\n"},{"title":"linux命令","date":"2016-10-24T06:26:22.000Z","_content":"### 查用法： man+命令(man中搜索用/,vim同)\n* 读懂man 命令：--跟单词，-跟字母，[]表示可选，[-z,--gzip]实际上是一个参数，不同写法。\n#####  grep: golbal search regular expression and print\n\n* 查看版本信息： lsb_release -a\n* /表示根目录，~表示HOME目录\n* 复制文件夹  ： copy -r\n* 查看端口占用情况 ： netstat -antp | grep 8080\n* 查看网卡对应网络：networksetup -listallhardwareports\n* 查看进程占用信息： top\n* 杀死某进程 ：  kill -9 pid\n* 打包压缩： tar -zcvf test.tar.gz /temp\n* 解压：  tar -zxvf test.tar.gz\n* 查看进程信息 ： ps -ef | grep \"\"\n* 全盘搜索某文件：  locate+文件名\n* 设置软链接  ：ln -s src  dst(必须完整路径，如ln -s /home/a.cpp /usr/lib/a.cpp),删除按照普通文件处理就行\n* 查看动态链接库： ldd+程序名（完整路径，环境变量无效，不知道为什么）\n* 查看可执行文件位置： whereis\n* 模拟tcp,ip通信神器：nc\n* 捕获包：tcpdump\n* 搜索历史命令： ctrl+r\n* 搜索指文件夹中的字符串： grep -rn keyword ./   表示递归搜索当前目录下的所有文件\n* 远程传送文件：scp  -P port file root@ip:/home/\n* 远程登录： ssh root@ip -p port,如果不想每次都输入密码，可以配置一下公钥登录，[具体教程](http://chenlb.iteye.com/blog/211809)\n* 退出ssh：exit\n* 追加文件：cat file1>>file2  将file1追加到file2\n* 构造自己的命令：alias str='command1;command2',多条命令依次执行的时候，&&遇到错误会停止，;遇到错误会跳过\n* grep -r \" \" ./ --color:搜索文件内容，将搜出来的内容标红\n* find ./ -name test.c: 递归查找文件或文件夹 \n* tail -f file：监控文件的输出\n* ctrl+a :光标移到行首\n* ctrl+e:光标移动到行尾\n* wc -l:统计文件函数，常用来配合|管道命令来用\n* sed: 批量替换文件\n* git diff file1 file2:diff两个文件\n* awk: 强大的文件处理工具,会将文件按照分行，并且每一行按照空格分开，如awk '{print $14; print $4}' data.20170516 | less.表示分行输出每一行的第4个和第14个变量。\n* chown:change owner,改变文件的所有者。 \n\t* sudo chown -R $(whoami) ./ 将当前目录的所有文件(递归) 的拥有者都改成当前用户\n* chmod: change mode，改变文件的属性(可读，可写，可执行)\n\t* chmod u+x,g+x,o+x file1，将file1增加可执行权限，u:拥有者，g:用户组，o:其他用户，a:所有用户\n\t* chmod 777 file2\n* sed -n '5,10p' filename: 显示5-10行","source":"_posts/linux命令.md","raw":"---\ntitle: linux命令\ndate: 2016-10-24 14:26:22\ntags: linux命令\ncategories: Linux\n---\n### 查用法： man+命令(man中搜索用/,vim同)\n* 读懂man 命令：--跟单词，-跟字母，[]表示可选，[-z,--gzip]实际上是一个参数，不同写法。\n#####  grep: golbal search regular expression and print\n\n* 查看版本信息： lsb_release -a\n* /表示根目录，~表示HOME目录\n* 复制文件夹  ： copy -r\n* 查看端口占用情况 ： netstat -antp | grep 8080\n* 查看网卡对应网络：networksetup -listallhardwareports\n* 查看进程占用信息： top\n* 杀死某进程 ：  kill -9 pid\n* 打包压缩： tar -zcvf test.tar.gz /temp\n* 解压：  tar -zxvf test.tar.gz\n* 查看进程信息 ： ps -ef | grep \"\"\n* 全盘搜索某文件：  locate+文件名\n* 设置软链接  ：ln -s src  dst(必须完整路径，如ln -s /home/a.cpp /usr/lib/a.cpp),删除按照普通文件处理就行\n* 查看动态链接库： ldd+程序名（完整路径，环境变量无效，不知道为什么）\n* 查看可执行文件位置： whereis\n* 模拟tcp,ip通信神器：nc\n* 捕获包：tcpdump\n* 搜索历史命令： ctrl+r\n* 搜索指文件夹中的字符串： grep -rn keyword ./   表示递归搜索当前目录下的所有文件\n* 远程传送文件：scp  -P port file root@ip:/home/\n* 远程登录： ssh root@ip -p port,如果不想每次都输入密码，可以配置一下公钥登录，[具体教程](http://chenlb.iteye.com/blog/211809)\n* 退出ssh：exit\n* 追加文件：cat file1>>file2  将file1追加到file2\n* 构造自己的命令：alias str='command1;command2',多条命令依次执行的时候，&&遇到错误会停止，;遇到错误会跳过\n* grep -r \" \" ./ --color:搜索文件内容，将搜出来的内容标红\n* find ./ -name test.c: 递归查找文件或文件夹 \n* tail -f file：监控文件的输出\n* ctrl+a :光标移到行首\n* ctrl+e:光标移动到行尾\n* wc -l:统计文件函数，常用来配合|管道命令来用\n* sed: 批量替换文件\n* git diff file1 file2:diff两个文件\n* awk: 强大的文件处理工具,会将文件按照分行，并且每一行按照空格分开，如awk '{print $14; print $4}' data.20170516 | less.表示分行输出每一行的第4个和第14个变量。\n* chown:change owner,改变文件的所有者。 \n\t* sudo chown -R $(whoami) ./ 将当前目录的所有文件(递归) 的拥有者都改成当前用户\n* chmod: change mode，改变文件的属性(可读，可写，可执行)\n\t* chmod u+x,g+x,o+x file1，将file1增加可执行权限，u:拥有者，g:用户组，o:其他用户，a:所有用户\n\t* chmod 777 file2\n* sed -n '5,10p' filename: 显示5-10行","slug":"linux命令","published":1,"updated":"2017-11-15T15:53:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu2e0017hb580qco1ejg","content":"<h3 id=\"查用法：-man-命令-man中搜索用-vim同\"><a href=\"#查用法：-man-命令-man中搜索用-vim同\" class=\"headerlink\" title=\"查用法： man+命令(man中搜索用/,vim同)\"></a>查用法： man+命令(man中搜索用/,vim同)</h3><ul>\n<li><p>读懂man 命令：–跟单词，-跟字母，[]表示可选，[-z,–gzip]实际上是一个参数，不同写法。</p>\n<h5 id=\"grep-golbal-search-regular-expression-and-print\"><a href=\"#grep-golbal-search-regular-expression-and-print\" class=\"headerlink\" title=\"grep: golbal search regular expression and print\"></a>grep: golbal search regular expression and print</h5></li>\n<li><p>查看版本信息： lsb_release -a</p>\n</li>\n<li>/表示根目录，~表示HOME目录</li>\n<li>复制文件夹  ： copy -r</li>\n<li>查看端口占用情况 ： netstat -antp | grep 8080</li>\n<li>查看网卡对应网络：networksetup -listallhardwareports</li>\n<li>查看进程占用信息： top</li>\n<li>杀死某进程 ：  kill -9 pid</li>\n<li>打包压缩： tar -zcvf test.tar.gz /temp</li>\n<li>解压：  tar -zxvf test.tar.gz</li>\n<li>查看进程信息 ： ps -ef | grep “”</li>\n<li>全盘搜索某文件：  locate+文件名</li>\n<li>设置软链接  ：ln -s src  dst(必须完整路径，如ln -s /home/a.cpp /usr/lib/a.cpp),删除按照普通文件处理就行</li>\n<li>查看动态链接库： ldd+程序名（完整路径，环境变量无效，不知道为什么）</li>\n<li>查看可执行文件位置： whereis</li>\n<li>模拟tcp,ip通信神器：nc</li>\n<li>捕获包：tcpdump</li>\n<li>搜索历史命令： ctrl+r</li>\n<li>搜索指文件夹中的字符串： grep -rn keyword ./   表示递归搜索当前目录下的所有文件</li>\n<li>远程传送文件：scp  -P port file root@ip:/home/</li>\n<li>远程登录： ssh root@ip -p port,如果不想每次都输入密码，可以配置一下公钥登录，<a href=\"http://chenlb.iteye.com/blog/211809\" target=\"_blank\" rel=\"external\">具体教程</a></li>\n<li>退出ssh：exit</li>\n<li>追加文件：cat file1&gt;&gt;file2  将file1追加到file2</li>\n<li>构造自己的命令：alias str=’command1;command2’,多条命令依次执行的时候，&amp;&amp;遇到错误会停止，;遇到错误会跳过</li>\n<li>grep -r “ “ ./ –color:搜索文件内容，将搜出来的内容标红</li>\n<li>find ./ -name test.c: 递归查找文件或文件夹 </li>\n<li>tail -f file：监控文件的输出</li>\n<li>ctrl+a :光标移到行首</li>\n<li>ctrl+e:光标移动到行尾</li>\n<li>wc -l:统计文件函数，常用来配合|管道命令来用</li>\n<li>sed: 批量替换文件</li>\n<li>git diff file1 file2:diff两个文件</li>\n<li>awk: 强大的文件处理工具,会将文件按照分行，并且每一行按照空格分开，如awk ‘{print $14; print $4}’ data.20170516 | less.表示分行输出每一行的第4个和第14个变量。</li>\n<li>chown:change owner,改变文件的所有者。 <ul>\n<li>sudo chown -R $(whoami) ./ 将当前目录的所有文件(递归) 的拥有者都改成当前用户</li>\n</ul>\n</li>\n<li>chmod: change mode，改变文件的属性(可读，可写，可执行)<ul>\n<li>chmod u+x,g+x,o+x file1，将file1增加可执行权限，u:拥有者，g:用户组，o:其他用户，a:所有用户</li>\n<li>chmod 777 file2</li>\n</ul>\n</li>\n<li>sed -n ‘5,10p’ filename: 显示5-10行</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"查用法：-man-命令-man中搜索用-vim同\"><a href=\"#查用法：-man-命令-man中搜索用-vim同\" class=\"headerlink\" title=\"查用法： man+命令(man中搜索用/,vim同)\"></a>查用法： man+命令(man中搜索用/,vim同)</h3><ul>\n<li><p>读懂man 命令：–跟单词，-跟字母，[]表示可选，[-z,–gzip]实际上是一个参数，不同写法。</p>\n<h5 id=\"grep-golbal-search-regular-expression-and-print\"><a href=\"#grep-golbal-search-regular-expression-and-print\" class=\"headerlink\" title=\"grep: golbal search regular expression and print\"></a>grep: golbal search regular expression and print</h5></li>\n<li><p>查看版本信息： lsb_release -a</p>\n</li>\n<li>/表示根目录，~表示HOME目录</li>\n<li>复制文件夹  ： copy -r</li>\n<li>查看端口占用情况 ： netstat -antp | grep 8080</li>\n<li>查看网卡对应网络：networksetup -listallhardwareports</li>\n<li>查看进程占用信息： top</li>\n<li>杀死某进程 ：  kill -9 pid</li>\n<li>打包压缩： tar -zcvf test.tar.gz /temp</li>\n<li>解压：  tar -zxvf test.tar.gz</li>\n<li>查看进程信息 ： ps -ef | grep “”</li>\n<li>全盘搜索某文件：  locate+文件名</li>\n<li>设置软链接  ：ln -s src  dst(必须完整路径，如ln -s /home/a.cpp /usr/lib/a.cpp),删除按照普通文件处理就行</li>\n<li>查看动态链接库： ldd+程序名（完整路径，环境变量无效，不知道为什么）</li>\n<li>查看可执行文件位置： whereis</li>\n<li>模拟tcp,ip通信神器：nc</li>\n<li>捕获包：tcpdump</li>\n<li>搜索历史命令： ctrl+r</li>\n<li>搜索指文件夹中的字符串： grep -rn keyword ./   表示递归搜索当前目录下的所有文件</li>\n<li>远程传送文件：scp  -P port file root@ip:/home/</li>\n<li>远程登录： ssh root@ip -p port,如果不想每次都输入密码，可以配置一下公钥登录，<a href=\"http://chenlb.iteye.com/blog/211809\">具体教程</a></li>\n<li>退出ssh：exit</li>\n<li>追加文件：cat file1&gt;&gt;file2  将file1追加到file2</li>\n<li>构造自己的命令：alias str=’command1;command2’,多条命令依次执行的时候，&amp;&amp;遇到错误会停止，;遇到错误会跳过</li>\n<li>grep -r “ “ ./ –color:搜索文件内容，将搜出来的内容标红</li>\n<li>find ./ -name test.c: 递归查找文件或文件夹 </li>\n<li>tail -f file：监控文件的输出</li>\n<li>ctrl+a :光标移到行首</li>\n<li>ctrl+e:光标移动到行尾</li>\n<li>wc -l:统计文件函数，常用来配合|管道命令来用</li>\n<li>sed: 批量替换文件</li>\n<li>git diff file1 file2:diff两个文件</li>\n<li>awk: 强大的文件处理工具,会将文件按照分行，并且每一行按照空格分开，如awk ‘{print $14; print $4}’ data.20170516 | less.表示分行输出每一行的第4个和第14个变量。</li>\n<li>chown:change owner,改变文件的所有者。 <ul>\n<li>sudo chown -R $(whoami) ./ 将当前目录的所有文件(递归) 的拥有者都改成当前用户</li>\n</ul>\n</li>\n<li>chmod: change mode，改变文件的属性(可读，可写，可执行)<ul>\n<li>chmod u+x,g+x,o+x file1，将file1增加可执行权限，u:拥有者，g:用户组，o:其他用户，a:所有用户</li>\n<li>chmod 777 file2</li>\n</ul>\n</li>\n<li>sed -n ‘5,10p’ filename: 显示5-10行</li>\n</ul>\n"},{"title":"linux基础知识","date":"2016-11-14T12:39:07.000Z","_content":"\n\n\n```\n文件的类型\t\t\t\t\tlinux\t\t\t\twindows\n\n二进制文件\t\t\t\t\t.o  \t\t\t\t.obj\n静态链接库\t\t\t\t\t.a  \t\t\t\t.lib\n动态链接库\t\t\t\t\t.so \t\t\t\t.dll\n可执行文件\t\t\t\t\t.out\t\t\t\t.exe\n文件的格式\t\t\t\t\tELF \t\t\t\tPE\n\n//二进制文件有叫目标文件，每个.c文件编译后产生的\n//静态链接库是很多目标文件的集合\n\n```\n\n* linux可执行文件结构: elf, windows:PE ,macos: mach-o    \n(值得注意的是，压缩文件在mac上先解压在压缩后在linux下再解压就打不开了,所以copy一般都是tar.gz文件)\n* 有时程序显示无法load  .so 文件,跟环境变量无关，系统加载环境变量一般在/usr/lib中找，如果要改的话      \n1.将so文件移到/usr/lib中。   \n2.设置软链接，链接到/usr/lib中     \n3.修改/etc/ld.so.conf文件，加入自己的路径\n\n* gcc编译命令：\n\t* -c 只编译，不链接，生成.o\n\t* -o 生成目标文件，加上-c生成的就是只编译后的目标文件,不加-c生成的就是编译+链接后的目标文件,.o,.so,.a,.out都是目标文件。\n\t* -fPIC 一般都加上\n\t* 生成.o:  gcc -c test.c\n\t* 生成.so: gcc -shared -o test.so test.c\n\t* 生成.a: gcc -o test.a test.c\n\t* 生成.out: gcc -o test.out test.c\n\t* 调用动态库：-lpthread -ldnet(glic的库），gcc test.c ./test1.so 直接一起编译\n  ","source":"_posts/linux基础知识.md","raw":"---\ntitle: linux基础知识\ndate: 2016-11-14 20:39:07\ntags: linux\ncategories: Linux\n---\n\n\n\n```\n文件的类型\t\t\t\t\tlinux\t\t\t\twindows\n\n二进制文件\t\t\t\t\t.o  \t\t\t\t.obj\n静态链接库\t\t\t\t\t.a  \t\t\t\t.lib\n动态链接库\t\t\t\t\t.so \t\t\t\t.dll\n可执行文件\t\t\t\t\t.out\t\t\t\t.exe\n文件的格式\t\t\t\t\tELF \t\t\t\tPE\n\n//二进制文件有叫目标文件，每个.c文件编译后产生的\n//静态链接库是很多目标文件的集合\n\n```\n\n* linux可执行文件结构: elf, windows:PE ,macos: mach-o    \n(值得注意的是，压缩文件在mac上先解压在压缩后在linux下再解压就打不开了,所以copy一般都是tar.gz文件)\n* 有时程序显示无法load  .so 文件,跟环境变量无关，系统加载环境变量一般在/usr/lib中找，如果要改的话      \n1.将so文件移到/usr/lib中。   \n2.设置软链接，链接到/usr/lib中     \n3.修改/etc/ld.so.conf文件，加入自己的路径\n\n* gcc编译命令：\n\t* -c 只编译，不链接，生成.o\n\t* -o 生成目标文件，加上-c生成的就是只编译后的目标文件,不加-c生成的就是编译+链接后的目标文件,.o,.so,.a,.out都是目标文件。\n\t* -fPIC 一般都加上\n\t* 生成.o:  gcc -c test.c\n\t* 生成.so: gcc -shared -o test.so test.c\n\t* 生成.a: gcc -o test.a test.c\n\t* 生成.out: gcc -o test.out test.c\n\t* 调用动态库：-lpthread -ldnet(glic的库），gcc test.c ./test1.so 直接一起编译\n  ","slug":"linux基础知识","published":1,"updated":"2017-08-25T07:02:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu2g001ahb58ocen7e91","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">文件的类型\t\t\t\t\tlinux\t\t\t\twindows</div><div class=\"line\"></div><div class=\"line\">二进制文件\t\t\t\t\t.o  \t\t\t\t.obj</div><div class=\"line\">静态链接库\t\t\t\t\t.a  \t\t\t\t.lib</div><div class=\"line\">动态链接库\t\t\t\t\t.so \t\t\t\t.dll</div><div class=\"line\">可执行文件\t\t\t\t\t.out\t\t\t\t.exe</div><div class=\"line\">文件的格式\t\t\t\t\tELF \t\t\t\tPE</div><div class=\"line\"></div><div class=\"line\">//二进制文件有叫目标文件，每个.c文件编译后产生的</div><div class=\"line\">//静态链接库是很多目标文件的集合</div></pre></td></tr></table></figure>\n<ul>\n<li>linux可执行文件结构: elf, windows:PE ,macos: mach-o<br>(值得注意的是，压缩文件在mac上先解压在压缩后在linux下再解压就打不开了,所以copy一般都是tar.gz文件)</li>\n<li><p>有时程序显示无法load  .so 文件,跟环境变量无关，系统加载环境变量一般在/usr/lib中找，如果要改的话<br>1.将so文件移到/usr/lib中。<br>2.设置软链接，链接到/usr/lib中<br>3.修改/etc/ld.so.conf文件，加入自己的路径</p>\n</li>\n<li><p>gcc编译命令：</p>\n<ul>\n<li>-c 只编译，不链接，生成.o</li>\n<li>-o 生成目标文件，加上-c生成的就是只编译后的目标文件,不加-c生成的就是编译+链接后的目标文件,.o,.so,.a,.out都是目标文件。</li>\n<li>-fPIC 一般都加上</li>\n<li>生成.o:  gcc -c test.c</li>\n<li>生成.so: gcc -shared -o test.so test.c</li>\n<li>生成.a: gcc -o test.a test.c</li>\n<li>生成.out: gcc -o test.out test.c</li>\n<li>调用动态库：-lpthread -ldnet(glic的库），gcc test.c ./test1.so 直接一起编译</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">文件的类型\t\t\t\t\tlinux\t\t\t\twindows</div><div class=\"line\"></div><div class=\"line\">二进制文件\t\t\t\t\t.o  \t\t\t\t.obj</div><div class=\"line\">静态链接库\t\t\t\t\t.a  \t\t\t\t.lib</div><div class=\"line\">动态链接库\t\t\t\t\t.so \t\t\t\t.dll</div><div class=\"line\">可执行文件\t\t\t\t\t.out\t\t\t\t.exe</div><div class=\"line\">文件的格式\t\t\t\t\tELF \t\t\t\tPE</div><div class=\"line\"></div><div class=\"line\">//二进制文件有叫目标文件，每个.c文件编译后产生的</div><div class=\"line\">//静态链接库是很多目标文件的集合</div></pre></td></tr></table></figure>\n<ul>\n<li>linux可执行文件结构: elf, windows:PE ,macos: mach-o<br>(值得注意的是，压缩文件在mac上先解压在压缩后在linux下再解压就打不开了,所以copy一般都是tar.gz文件)</li>\n<li><p>有时程序显示无法load  .so 文件,跟环境变量无关，系统加载环境变量一般在/usr/lib中找，如果要改的话<br>1.将so文件移到/usr/lib中。<br>2.设置软链接，链接到/usr/lib中<br>3.修改/etc/ld.so.conf文件，加入自己的路径</p>\n</li>\n<li><p>gcc编译命令：</p>\n<ul>\n<li>-c 只编译，不链接，生成.o</li>\n<li>-o 生成目标文件，加上-c生成的就是只编译后的目标文件,不加-c生成的就是编译+链接后的目标文件,.o,.so,.a,.out都是目标文件。</li>\n<li>-fPIC 一般都加上</li>\n<li>生成.o:  gcc -c test.c</li>\n<li>生成.so: gcc -shared -o test.so test.c</li>\n<li>生成.a: gcc -o test.a test.c</li>\n<li>生成.out: gcc -o test.out test.c</li>\n<li>调用动态库：-lpthread -ldnet(glic的库），gcc test.c ./test1.so 直接一起编译</li>\n</ul>\n</li>\n</ul>\n"},{"title":"c语言的指针易错点","date":"2016-10-19T08:33:06.000Z","_content":"\n\n\n1.今天在做项目的时候被c语言的指针坑了很久。现在总结一下：\n**：划重点，c语言中没有引用，所有的参数传递都是值传递。\n这一点在函数传出值(改变函数外的变量)的时候特别明显，想传出一个值就要传入一个指针(它的地址)，然后通过这个它的地址来改变它的值。\n\n```\nvoid a;  //传出一个值\nfunc(&a);\nvoid func(void * ptr){\n\t*ptr=value;\n}\n\nvoid * a;  // 传出一个值(指针类型)\nfunc(&a);\nvoid func(void** ptr){\n\t*ptr=value;\n}\n```\n","source":"_posts/c语言的指针易错点.md","raw":"---\ntitle: 'c语言的指针易错点'\ndate: 2016-10-19 16:33:06\ntags: \n  - c语言\n  - 指针\ncategories: c/c++\n---\n\n\n\n1.今天在做项目的时候被c语言的指针坑了很久。现在总结一下：\n**：划重点，c语言中没有引用，所有的参数传递都是值传递。\n这一点在函数传出值(改变函数外的变量)的时候特别明显，想传出一个值就要传入一个指针(它的地址)，然后通过这个它的地址来改变它的值。\n\n```\nvoid a;  //传出一个值\nfunc(&a);\nvoid func(void * ptr){\n\t*ptr=value;\n}\n\nvoid * a;  // 传出一个值(指针类型)\nfunc(&a);\nvoid func(void** ptr){\n\t*ptr=value;\n}\n```\n","slug":"c语言的指针易错点","published":1,"updated":"2016-10-21T06:00:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu2j001ehb58nbo3zgbx","content":"<p>1.今天在做项目的时候被c语言的指针坑了很久。现在总结一下：<br>**：划重点，c语言中没有引用，所有的参数传递都是值传递。<br>这一点在函数传出值(改变函数外的变量)的时候特别明显，想传出一个值就要传入一个指针(它的地址)，然后通过这个它的地址来改变它的值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">void a;  //传出一个值</div><div class=\"line\">func(&amp;a);</div><div class=\"line\">void func(void * ptr)&#123;</div><div class=\"line\">\t*ptr=value;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void * a;  // 传出一个值(指针类型)</div><div class=\"line\">func(&amp;a);</div><div class=\"line\">void func(void** ptr)&#123;</div><div class=\"line\">\t*ptr=value;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>1.今天在做项目的时候被c语言的指针坑了很久。现在总结一下：<br>**：划重点，c语言中没有引用，所有的参数传递都是值传递。<br>这一点在函数传出值(改变函数外的变量)的时候特别明显，想传出一个值就要传入一个指针(它的地址)，然后通过这个它的地址来改变它的值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">void a;  //传出一个值</div><div class=\"line\">func(&amp;a);</div><div class=\"line\">void func(void * ptr)&#123;</div><div class=\"line\">\t*ptr=value;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void * a;  // 传出一个值(指针类型)</div><div class=\"line\">func(&amp;a);</div><div class=\"line\">void func(void** ptr)&#123;</div><div class=\"line\">\t*ptr=value;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"makefile示例","date":"2017-08-24T13:32:50.000Z","_content":"\n```\nCC = gcc\nTARGET_DIR = ../../mysapp/plug/business/live_monitor\nTARGET_CONF_DIR = ../../mysapp/conf/live_monitor\nTARGET = live_monitor.so\nINF = ../bin/live_monitor.inf\nCONF = ../conf/live_list.csv\nCFLAGS = -g -Wall -fPIC\nLIB = -lpthread\nLIB += -lMESA_handle_logger\nLIB += -lMESA_prof_load\nLIB+= -lMESA_htable\nINCLUDES = -I./inc/\nINCLUDES += -I/usr/include/MESA\nSOURCES = $(wildcard *.c)\nOBJECTS = $(SOURCES:.c=.o)\nDEPS = $(SOURCES:.c=.d)\n.PHONY : clean all install\nall : $(TARGET)\n$(TARGET) : $(OBJECTS)\n\t$(CC) $(CFLAGS) -shared -o $(TARGET) $(LIB) $(OBJECTS)\n%.o : %.c \n\t$(CC) $(CFLAGS) -c $< -o $@\n%.d : %.c\n\t$(CC) $< -MM $(INCLUDES) > $@ \n-include $(DEPS)\nclean : \n\t-rm $(TARGET) $(OBJECTS) $(DEPS) \u0010../bin/$(TARGET)\n\t-rm -rf $(TARGET_DIR)\n\t-rm -rf $(TARGET_CONF_DIR)\ninstall : \n\t-mkdir $(TARGET_DIR)\n\t-cp $(TARGET) $(TARGET_DIR)\n\t-cp $(TARGET) ../bin\n\t-cp $(INF) $(TARGET_DIR)\n\t-mkdir $(TARGET_CONF_DIR)\n\t-cp $(CONF) $(TARGET_CONF_DIR)\n```\n* makefile的执行过程：其实make clean,make install都是我们定义的，make x,makefile就会去找x，然后根据依赖文件一步步找下去。\n* wildcard *.c:当前文件夹中所有的.c文件\n* $(SOURCES: .c=.o):将.c都变成.o\n* .d文件存的是每个.c文件依赖的.c文件,-include $(DEPS)不能少\n* $<和$@都是临时变量\n* .PHONY的作用：定义一个伪目标，保证这条命令一定会被执行。如果不加的话，比如make clean,由于clean没有依赖文件，如果当前目录中存在一个文件叫clean，那么clean后面的语句就不会执行。","source":"_posts/makefile示例.md","raw":"---\ntitle: makefile示例\ndate: 2017-08-24 21:32:50\ntags: \n\t- makefile\n\t- c/c++\ncategories: c/c++\n---\n\n```\nCC = gcc\nTARGET_DIR = ../../mysapp/plug/business/live_monitor\nTARGET_CONF_DIR = ../../mysapp/conf/live_monitor\nTARGET = live_monitor.so\nINF = ../bin/live_monitor.inf\nCONF = ../conf/live_list.csv\nCFLAGS = -g -Wall -fPIC\nLIB = -lpthread\nLIB += -lMESA_handle_logger\nLIB += -lMESA_prof_load\nLIB+= -lMESA_htable\nINCLUDES = -I./inc/\nINCLUDES += -I/usr/include/MESA\nSOURCES = $(wildcard *.c)\nOBJECTS = $(SOURCES:.c=.o)\nDEPS = $(SOURCES:.c=.d)\n.PHONY : clean all install\nall : $(TARGET)\n$(TARGET) : $(OBJECTS)\n\t$(CC) $(CFLAGS) -shared -o $(TARGET) $(LIB) $(OBJECTS)\n%.o : %.c \n\t$(CC) $(CFLAGS) -c $< -o $@\n%.d : %.c\n\t$(CC) $< -MM $(INCLUDES) > $@ \n-include $(DEPS)\nclean : \n\t-rm $(TARGET) $(OBJECTS) $(DEPS) \u0010../bin/$(TARGET)\n\t-rm -rf $(TARGET_DIR)\n\t-rm -rf $(TARGET_CONF_DIR)\ninstall : \n\t-mkdir $(TARGET_DIR)\n\t-cp $(TARGET) $(TARGET_DIR)\n\t-cp $(TARGET) ../bin\n\t-cp $(INF) $(TARGET_DIR)\n\t-mkdir $(TARGET_CONF_DIR)\n\t-cp $(CONF) $(TARGET_CONF_DIR)\n```\n* makefile的执行过程：其实make clean,make install都是我们定义的，make x,makefile就会去找x，然后根据依赖文件一步步找下去。\n* wildcard *.c:当前文件夹中所有的.c文件\n* $(SOURCES: .c=.o):将.c都变成.o\n* .d文件存的是每个.c文件依赖的.c文件,-include $(DEPS)不能少\n* $<和$@都是临时变量\n* .PHONY的作用：定义一个伪目标，保证这条命令一定会被执行。如果不加的话，比如make clean,由于clean没有依赖文件，如果当前目录中存在一个文件叫clean，那么clean后面的语句就不会执行。","slug":"makefile示例","published":1,"updated":"2017-08-24T14:18:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu2l001hhb58yd9hdqd6","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">CC = gcc</div><div class=\"line\">TARGET_DIR = ../../mysapp/plug/business/live_monitor</div><div class=\"line\">TARGET_CONF_DIR = ../../mysapp/conf/live_monitor</div><div class=\"line\">TARGET = live_monitor.so</div><div class=\"line\">INF = ../bin/live_monitor.inf</div><div class=\"line\">CONF = ../conf/live_list.csv</div><div class=\"line\">CFLAGS = -g -Wall -fPIC</div><div class=\"line\">LIB = -lpthread</div><div class=\"line\">LIB += -lMESA_handle_logger</div><div class=\"line\">LIB += -lMESA_prof_load</div><div class=\"line\">LIB+= -lMESA_htable</div><div class=\"line\">INCLUDES = -I./inc/</div><div class=\"line\">INCLUDES += -I/usr/include/MESA</div><div class=\"line\">SOURCES = $(wildcard *.c)</div><div class=\"line\">OBJECTS = $(SOURCES:.c=.o)</div><div class=\"line\">DEPS = $(SOURCES:.c=.d)</div><div class=\"line\">.PHONY : clean all install</div><div class=\"line\">all : $(TARGET)</div><div class=\"line\">$(TARGET) : $(OBJECTS)</div><div class=\"line\">\t$(CC) $(CFLAGS) -shared -o $(TARGET) $(LIB) $(OBJECTS)</div><div class=\"line\">%.o : %.c </div><div class=\"line\">\t$(CC) $(CFLAGS) -c $&lt; -o $@</div><div class=\"line\">%.d : %.c</div><div class=\"line\">\t$(CC) $&lt; -MM $(INCLUDES) &gt; $@ </div><div class=\"line\">-include $(DEPS)</div><div class=\"line\">clean : </div><div class=\"line\">\t-rm $(TARGET) $(OBJECTS) $(DEPS) \u0010../bin/$(TARGET)</div><div class=\"line\">\t-rm -rf $(TARGET_DIR)</div><div class=\"line\">\t-rm -rf $(TARGET_CONF_DIR)</div><div class=\"line\">install : </div><div class=\"line\">\t-mkdir $(TARGET_DIR)</div><div class=\"line\">\t-cp $(TARGET) $(TARGET_DIR)</div><div class=\"line\">\t-cp $(TARGET) ../bin</div><div class=\"line\">\t-cp $(INF) $(TARGET_DIR)</div><div class=\"line\">\t-mkdir $(TARGET_CONF_DIR)</div><div class=\"line\">\t-cp $(CONF) $(TARGET_CONF_DIR)</div></pre></td></tr></table></figure>\n<ul>\n<li>makefile的执行过程：其实make clean,make install都是我们定义的，make x,makefile就会去找x，然后根据依赖文件一步步找下去。</li>\n<li>wildcard *.c:当前文件夹中所有的.c文件</li>\n<li>$(SOURCES: .c=.o):将.c都变成.o</li>\n<li>.d文件存的是每个.c文件依赖的.c文件,-include $(DEPS)不能少</li>\n<li>$&lt;和$@都是临时变量</li>\n<li>.PHONY的作用：定义一个伪目标，保证这条命令一定会被执行。如果不加的话，比如make clean,由于clean没有依赖文件，如果当前目录中存在一个文件叫clean，那么clean后面的语句就不会执行。</li>\n</ul>\n","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">CC = gcc</div><div class=\"line\">TARGET_DIR = ../../mysapp/plug/business/live_monitor</div><div class=\"line\">TARGET_CONF_DIR = ../../mysapp/conf/live_monitor</div><div class=\"line\">TARGET = live_monitor.so</div><div class=\"line\">INF = ../bin/live_monitor.inf</div><div class=\"line\">CONF = ../conf/live_list.csv</div><div class=\"line\">CFLAGS = -g -Wall -fPIC</div><div class=\"line\">LIB = -lpthread</div><div class=\"line\">LIB += -lMESA_handle_logger</div><div class=\"line\">LIB += -lMESA_prof_load</div><div class=\"line\">LIB+= -lMESA_htable</div><div class=\"line\">INCLUDES = -I./inc/</div><div class=\"line\">INCLUDES += -I/usr/include/MESA</div><div class=\"line\">SOURCES = $(wildcard *.c)</div><div class=\"line\">OBJECTS = $(SOURCES:.c=.o)</div><div class=\"line\">DEPS = $(SOURCES:.c=.d)</div><div class=\"line\">.PHONY : clean all install</div><div class=\"line\">all : $(TARGET)</div><div class=\"line\">$(TARGET) : $(OBJECTS)</div><div class=\"line\">\t$(CC) $(CFLAGS) -shared -o $(TARGET) $(LIB) $(OBJECTS)</div><div class=\"line\">%.o : %.c </div><div class=\"line\">\t$(CC) $(CFLAGS) -c $&lt; -o $@</div><div class=\"line\">%.d : %.c</div><div class=\"line\">\t$(CC) $&lt; -MM $(INCLUDES) &gt; $@ </div><div class=\"line\">-include $(DEPS)</div><div class=\"line\">clean : </div><div class=\"line\">\t-rm $(TARGET) $(OBJECTS) $(DEPS) \u0010../bin/$(TARGET)</div><div class=\"line\">\t-rm -rf $(TARGET_DIR)</div><div class=\"line\">\t-rm -rf $(TARGET_CONF_DIR)</div><div class=\"line\">install : </div><div class=\"line\">\t-mkdir $(TARGET_DIR)</div><div class=\"line\">\t-cp $(TARGET) $(TARGET_DIR)</div><div class=\"line\">\t-cp $(TARGET) ../bin</div><div class=\"line\">\t-cp $(INF) $(TARGET_DIR)</div><div class=\"line\">\t-mkdir $(TARGET_CONF_DIR)</div><div class=\"line\">\t-cp $(CONF) $(TARGET_CONF_DIR)</div></pre></td></tr></table></figure>\n<ul>\n<li>makefile的执行过程：其实make clean,make install都是我们定义的，make x,makefile就会去找x，然后根据依赖文件一步步找下去。</li>\n<li>wildcard *.c:当前文件夹中所有的.c文件</li>\n<li>$(SOURCES: .c=.o):将.c都变成.o</li>\n<li>.d文件存的是每个.c文件依赖的.c文件,-include $(DEPS)不能少</li>\n<li>$&lt;和$@都是临时变量</li>\n<li>.PHONY的作用：定义一个伪目标，保证这条命令一定会被执行。如果不加的话，比如make clean,由于clean没有依赖文件，如果当前目录中存在一个文件叫clean，那么clean后面的语句就不会执行。</li>\n</ul>\n"},{"title":"python,pip多个版本共存混乱的解决","date":"2017-09-19T09:39:15.000Z","_content":"* 今天在搞django的时候又被各种python版本共存的问题坑了。记录一下：\n* 首先区分两个概念: usr:unix system resource\n\t* /usr/bin,/usr/lib/,usr/lib64,一般unix系统的软件和lib都在这个里面，yum安装的一般都在这个目录下\n\t* /usr/local/bin,/usr/local/lib，这个一般非yum安装的软件会放到这个目录下\n* 多个版本的python其实比较好解决，用那个设一下软连接就可以了，pip是2的，pip3是3的\n* 今天我遇到的这个问题是python3和pip3不匹配，现在我的Python3在/usr/bin下，所以它的模块默认搜索路径是/usr/lib/,/usr/lib64，但是pip3是在/usr/local/bin下的，所以pip3安装的模块都在/usr/local/python3.4/site-packages下，所以就找不到模块\n\t* 解决办法：yum安装pip3(/usr/bin)下，然后设置pip的软连接到/usr/pip3,这样pip安装的模块就在/usr/lib64/site-packages下了。\n","source":"_posts/python-pip多个版本共存混乱的解决.md","raw":"---\ntitle: 'python,pip多个版本共存混乱的解决'\ndate: 2017-09-19 17:39:15\ntags: python \ncategories: Linux\n---\n* 今天在搞django的时候又被各种python版本共存的问题坑了。记录一下：\n* 首先区分两个概念: usr:unix system resource\n\t* /usr/bin,/usr/lib/,usr/lib64,一般unix系统的软件和lib都在这个里面，yum安装的一般都在这个目录下\n\t* /usr/local/bin,/usr/local/lib，这个一般非yum安装的软件会放到这个目录下\n* 多个版本的python其实比较好解决，用那个设一下软连接就可以了，pip是2的，pip3是3的\n* 今天我遇到的这个问题是python3和pip3不匹配，现在我的Python3在/usr/bin下，所以它的模块默认搜索路径是/usr/lib/,/usr/lib64，但是pip3是在/usr/local/bin下的，所以pip3安装的模块都在/usr/local/python3.4/site-packages下，所以就找不到模块\n\t* 解决办法：yum安装pip3(/usr/bin)下，然后设置pip的软连接到/usr/pip3,这样pip安装的模块就在/usr/lib64/site-packages下了。\n","slug":"python-pip多个版本共存混乱的解决","published":1,"updated":"2017-09-19T10:22:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu2n001khb58t2ha4ynt","content":"<ul>\n<li>今天在搞django的时候又被各种python版本共存的问题坑了。记录一下：</li>\n<li>首先区分两个概念: usr:unix system resource<ul>\n<li>/usr/bin,/usr/lib/,usr/lib64,一般unix系统的软件和lib都在这个里面，yum安装的一般都在这个目录下</li>\n<li>/usr/local/bin,/usr/local/lib，这个一般非yum安装的软件会放到这个目录下</li>\n</ul>\n</li>\n<li>多个版本的python其实比较好解决，用那个设一下软连接就可以了，pip是2的，pip3是3的</li>\n<li>今天我遇到的这个问题是python3和pip3不匹配，现在我的Python3在/usr/bin下，所以它的模块默认搜索路径是/usr/lib/,/usr/lib64，但是pip3是在/usr/local/bin下的，所以pip3安装的模块都在/usr/local/python3.4/site-packages下，所以就找不到模块<ul>\n<li>解决办法：yum安装pip3(/usr/bin)下，然后设置pip的软连接到/usr/pip3,这样pip安装的模块就在/usr/lib64/site-packages下了。</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>今天在搞django的时候又被各种python版本共存的问题坑了。记录一下：</li>\n<li>首先区分两个概念: usr:unix system resource<ul>\n<li>/usr/bin,/usr/lib/,usr/lib64,一般unix系统的软件和lib都在这个里面，yum安装的一般都在这个目录下</li>\n<li>/usr/local/bin,/usr/local/lib，这个一般非yum安装的软件会放到这个目录下</li>\n</ul>\n</li>\n<li>多个版本的python其实比较好解决，用那个设一下软连接就可以了，pip是2的，pip3是3的</li>\n<li>今天我遇到的这个问题是python3和pip3不匹配，现在我的Python3在/usr/bin下，所以它的模块默认搜索路径是/usr/lib/,/usr/lib64，但是pip3是在/usr/local/bin下的，所以pip3安装的模块都在/usr/local/python3.4/site-packages下，所以就找不到模块<ul>\n<li>解决办法：yum安装pip3(/usr/bin)下，然后设置pip的软连接到/usr/pip3,这样pip安装的模块就在/usr/lib64/site-packages下了。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"python基本用法","date":"2018-01-06T07:23:01.000Z","_content":"* import\n\t* module和package:\n\t\t* module是一个.py文件，导入一个module就是把这个python文件加载进内存\n\t\t* package是一个文件夹，必须有\\_ \\_init\\_ \\_.py文件,导入一个package就是将\\_ \\_init\\_ \\_.py加载进内存，并且import package的时候自动执行\\_ \\_init\\_ \\_.py文件\n\t* import 机制\n\t\t* import导入的所有包都在sys.modules中\n\t\t* from A import B，导入一个包或者模块中的部分文件或者函数\n\t* 绝对导入和相对导入：\n\t\t* 绝对导入：\n\t\t\t* 搜索路径： sys.path()\n\t\t\t* 如果直接python test.py,那么test.py的路径是在sys.path中的\n\t\t\t* 如果想搜索某个module或者package，只需将其所在文件夹的路径加入sys.path即可：sys.path.append()\n\t\t\t* 获取当前python文件路径：\n\t\t\t\t* pwd = os.getcwd()\n\t\t\t\t* pwd = os.path.dirname(pwd)\n\t\t* 相对导入：\n\t\t\t*  形如from .. import x\n\t\t\t*  在python3中，找到当前目录是通过\\_name\\_，特别地，如果直接python执行某个python文件，那么\\_name\\_就是\\_main\\_,那么当前目录就是顶层目录\n\t\t\t*  如果\\_name\\_是A.B.C说明当前目录为B,那么from .. 的路径就是A，from . 就是B ","source":"_posts/python基本用法.md","raw":"---\ntitle: python基本用法\ndate: 2018-01-06 15:23:01\ntags: python \ncategories: python\n---\n* import\n\t* module和package:\n\t\t* module是一个.py文件，导入一个module就是把这个python文件加载进内存\n\t\t* package是一个文件夹，必须有\\_ \\_init\\_ \\_.py文件,导入一个package就是将\\_ \\_init\\_ \\_.py加载进内存，并且import package的时候自动执行\\_ \\_init\\_ \\_.py文件\n\t* import 机制\n\t\t* import导入的所有包都在sys.modules中\n\t\t* from A import B，导入一个包或者模块中的部分文件或者函数\n\t* 绝对导入和相对导入：\n\t\t* 绝对导入：\n\t\t\t* 搜索路径： sys.path()\n\t\t\t* 如果直接python test.py,那么test.py的路径是在sys.path中的\n\t\t\t* 如果想搜索某个module或者package，只需将其所在文件夹的路径加入sys.path即可：sys.path.append()\n\t\t\t* 获取当前python文件路径：\n\t\t\t\t* pwd = os.getcwd()\n\t\t\t\t* pwd = os.path.dirname(pwd)\n\t\t* 相对导入：\n\t\t\t*  形如from .. import x\n\t\t\t*  在python3中，找到当前目录是通过\\_name\\_，特别地，如果直接python执行某个python文件，那么\\_name\\_就是\\_main\\_,那么当前目录就是顶层目录\n\t\t\t*  如果\\_name\\_是A.B.C说明当前目录为B,那么from .. 的路径就是A，from . 就是B ","slug":"python基本用法","published":1,"updated":"2018-01-10T08:24:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu2q001mhb58npoyxbzy","content":"<ul>\n<li>import<ul>\n<li>module和package:<ul>\n<li>module是一个.py文件，导入一个module就是把这个python文件加载进内存</li>\n<li>package是一个文件夹，必须有_ _init_ _.py文件,导入一个package就是将_ _init_ _.py加载进内存，并且import package的时候自动执行_ _init_ _.py文件</li>\n</ul>\n</li>\n<li>import 机制<ul>\n<li>import导入的所有包都在sys.modules中</li>\n<li>from A import B，导入一个包或者模块中的部分文件或者函数</li>\n</ul>\n</li>\n<li>绝对导入和相对导入：<ul>\n<li>绝对导入：<ul>\n<li>搜索路径： sys.path()</li>\n<li>如果直接python test.py,那么test.py的路径是在sys.path中的</li>\n<li>如果想搜索某个module或者package，只需将其所在文件夹的路径加入sys.path即可：sys.path.append()</li>\n<li>获取当前python文件路径：<ul>\n<li>pwd = os.getcwd()</li>\n<li>pwd = os.path.dirname(pwd)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>相对导入：<ul>\n<li>形如from .. import x</li>\n<li>在python3中，找到当前目录是通过_name_，特别地，如果直接python执行某个python文件，那么_name_就是_main_,那么当前目录就是顶层目录</li>\n<li>如果_name_是A.B.C说明当前目录为B,那么from .. 的路径就是A，from . 就是B </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>import<ul>\n<li>module和package:<ul>\n<li>module是一个.py文件，导入一个module就是把这个python文件加载进内存</li>\n<li>package是一个文件夹，必须有_ _init_ _.py文件,导入一个package就是将_ _init_ _.py加载进内存，并且import package的时候自动执行_ _init_ _.py文件</li>\n</ul>\n</li>\n<li>import 机制<ul>\n<li>import导入的所有包都在sys.modules中</li>\n<li>from A import B，导入一个包或者模块中的部分文件或者函数</li>\n</ul>\n</li>\n<li>绝对导入和相对导入：<ul>\n<li>绝对导入：<ul>\n<li>搜索路径： sys.path()</li>\n<li>如果直接python test.py,那么test.py的路径是在sys.path中的</li>\n<li>如果想搜索某个module或者package，只需将其所在文件夹的路径加入sys.path即可：sys.path.append()</li>\n<li>获取当前python文件路径：<ul>\n<li>pwd = os.getcwd()</li>\n<li>pwd = os.path.dirname(pwd)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>相对导入：<ul>\n<li>形如from .. import x</li>\n<li>在python3中，找到当前目录是通过_name_，特别地，如果直接python执行某个python文件，那么_name_就是_main_,那么当前目录就是顶层目录</li>\n<li>如果_name_是A.B.C说明当前目录为B,那么from .. 的路径就是A，from . 就是B </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"中文编码那些事","date":"2015-10-15T12:32:36.000Z","_content":"\n\n今天终于搞清楚了各种编码的关系，以后不要再纠结这些东西了。\nANSI:   Americal   National   Standard  Institute,泛指这种编码方式：\n\t   char 型 0-255，Ascii 码 0-127，\n\t   在ANSI编码中，ASCLL码还是一个字节，用两个字节表示非ASCLL 码，如中文，韩文等，特点是首字节是 128-255。\t   如‘啊’在GB2312-80中表示为 176，161.\n\t   GB2312-80:  首字节 128-255，第二字节 128- 255\n\t   GBK:             首字节 128-255，第二字节  64-255\n\t   GB18030：   两个或四个字节          首字节 128-255 ，第二，四字节反正可以区分开\n\nUnicode: 一种编码方式。包含了全世界所有的字符。\n\n\nUcs:   universal   character   set, 分为UCS-2和UCS-4.分别表示 16位和 32 位。基本跟unicode 没有分别，只是属于两个不同的机构推出来的。\n \n\nUTF8：unicode  translation  format ,只是unicode 码的一种实现方式，为了避免浪费空间。\n![test](http://img.blog.csdn.net/20151018142052606)\n\n具体来说，vc用的还是GB\njava,python 都支持unicode，不是utf-8\n\n 通常所说的编码 uincode和utf-8,其中unicode 是指两个字节的定长编码（官方的），utf-8是变长编码。","source":"_posts/中文编码那些事.md","raw":"---\ntitle: 中文编码那些事\ndate: 2015-10-15 20:32:36\ntags:\n  - 编码\n  - utf-8\n  - unicode\n  - GB2312\ncategories: 计算机基础\n---\n\n\n今天终于搞清楚了各种编码的关系，以后不要再纠结这些东西了。\nANSI:   Americal   National   Standard  Institute,泛指这种编码方式：\n\t   char 型 0-255，Ascii 码 0-127，\n\t   在ANSI编码中，ASCLL码还是一个字节，用两个字节表示非ASCLL 码，如中文，韩文等，特点是首字节是 128-255。\t   如‘啊’在GB2312-80中表示为 176，161.\n\t   GB2312-80:  首字节 128-255，第二字节 128- 255\n\t   GBK:             首字节 128-255，第二字节  64-255\n\t   GB18030：   两个或四个字节          首字节 128-255 ，第二，四字节反正可以区分开\n\nUnicode: 一种编码方式。包含了全世界所有的字符。\n\n\nUcs:   universal   character   set, 分为UCS-2和UCS-4.分别表示 16位和 32 位。基本跟unicode 没有分别，只是属于两个不同的机构推出来的。\n \n\nUTF8：unicode  translation  format ,只是unicode 码的一种实现方式，为了避免浪费空间。\n![test](http://img.blog.csdn.net/20151018142052606)\n\n具体来说，vc用的还是GB\njava,python 都支持unicode，不是utf-8\n\n 通常所说的编码 uincode和utf-8,其中unicode 是指两个字节的定长编码（官方的），utf-8是变长编码。","slug":"中文编码那些事","published":1,"updated":"2016-10-21T05:57:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu2t001qhb58d3zt8bhs","content":"<p>今天终于搞清楚了各种编码的关系，以后不要再纠结这些东西了。<br>ANSI:   Americal   National   Standard  Institute,泛指这种编码方式：<br>       char 型 0-255，Ascii 码 0-127，<br>       在ANSI编码中，ASCLL码还是一个字节，用两个字节表示非ASCLL 码，如中文，韩文等，特点是首字节是 128-255。       如‘啊’在GB2312-80中表示为 176，161.<br>       GB2312-80:  首字节 128-255，第二字节 128- 255<br>       GBK:             首字节 128-255，第二字节  64-255<br>       GB18030：   两个或四个字节          首字节 128-255 ，第二，四字节反正可以区分开</p>\n<p>Unicode: 一种编码方式。包含了全世界所有的字符。</p>\n<p>Ucs:   universal   character   set, 分为UCS-2和UCS-4.分别表示 16位和 32 位。基本跟unicode 没有分别，只是属于两个不同的机构推出来的。</p>\n<p>UTF8：unicode  translation  format ,只是unicode 码的一种实现方式，为了避免浪费空间。<br><img src=\"http://img.blog.csdn.net/20151018142052606\" alt=\"test\"></p>\n<p>具体来说，vc用的还是GB<br>java,python 都支持unicode，不是utf-8</p>\n<p> 通常所说的编码 uincode和utf-8,其中unicode 是指两个字节的定长编码（官方的），utf-8是变长编码。</p>\n","excerpt":"","more":"<p>今天终于搞清楚了各种编码的关系，以后不要再纠结这些东西了。<br>ANSI:   Americal   National   Standard  Institute,泛指这种编码方式：<br>       char 型 0-255，Ascii 码 0-127，<br>       在ANSI编码中，ASCLL码还是一个字节，用两个字节表示非ASCLL 码，如中文，韩文等，特点是首字节是 128-255。       如‘啊’在GB2312-80中表示为 176，161.<br>       GB2312-80:  首字节 128-255，第二字节 128- 255<br>       GBK:             首字节 128-255，第二字节  64-255<br>       GB18030：   两个或四个字节          首字节 128-255 ，第二，四字节反正可以区分开</p>\n<p>Unicode: 一种编码方式。包含了全世界所有的字符。</p>\n<p>Ucs:   universal   character   set, 分为UCS-2和UCS-4.分别表示 16位和 32 位。基本跟unicode 没有分别，只是属于两个不同的机构推出来的。</p>\n<p>UTF8：unicode  translation  format ,只是unicode 码的一种实现方式，为了避免浪费空间。<br><img src=\"http://img.blog.csdn.net/20151018142052606\" alt=\"test\"></p>\n<p>具体来说，vc用的还是GB<br>java,python 都支持unicode，不是utf-8</p>\n<p> 通常所说的编码 uincode和utf-8,其中unicode 是指两个字节的定长编码（官方的），utf-8是变长编码。</p>\n"},{"title":"markdown语法,长期更新","date":"2016-10-24T02:27:17.000Z","_content":"* 插入空格:&nbsp+;前后留出空格出来\n* !()[path]:插入图片\n* <> 插入超链接,直接将网址括起来，注意加http\n* []+():插入链接，[]里是显示文字，()里是link,+要去掉\n* 空格： 全角下两个空格\n* #+空格是一级标题，##+空格是二级标题，etc\n* 星号+空格是一级目录，tab+星号+空格是二级目录，2tab+星号+空格是三级目录，etc\n* ```（+语言） 是插入代码(高亮)，1左边的那个键\n* 下划线打不出来，需要转义，\\加_即可\t\n","source":"_posts/markdown语法-长期更新.md","raw":"---\ntitle: 'markdown语法,长期更新'\ndate: 2016-10-24 10:27:17\ntags: markdown\ncategories: hexo\n---\n* 插入空格:&nbsp+;前后留出空格出来\n* !()[path]:插入图片\n* <> 插入超链接,直接将网址括起来，注意加http\n* []+():插入链接，[]里是显示文字，()里是link,+要去掉\n* 空格： 全角下两个空格\n* #+空格是一级标题，##+空格是二级标题，etc\n* 星号+空格是一级目录，tab+星号+空格是二级目录，2tab+星号+空格是三级目录，etc\n* ```（+语言） 是插入代码(高亮)，1左边的那个键\n* 下划线打不出来，需要转义，\\加_即可\t\n","slug":"markdown语法-长期更新","published":1,"updated":"2017-09-16T08:44:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu2z001shb580skx5xbu","content":"<ul>\n<li>插入空格:&amp;nbsp+;前后留出空格出来</li>\n<li>!()[path]:插入图片</li>\n<li>&lt;&gt; 插入超链接,直接将网址括起来，注意加http</li>\n<li>[]+():插入链接，[]里是显示文字，()里是link,+要去掉</li>\n<li>空格： 全角下两个空格</li>\n<li>#+空格是一级标题，##+空格是二级标题，etc</li>\n<li>星号+空格是一级目录，tab+星号+空格是二级目录，2tab+星号+空格是三级目录，etc</li>\n<li>```（+语言） 是插入代码(高亮)，1左边的那个键</li>\n<li>下划线打不出来，需要转义，\\加_即可    </li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>插入空格:&amp;nbsp+;前后留出空格出来</li>\n<li>!()[path]:插入图片</li>\n<li>&lt;&gt; 插入超链接,直接将网址括起来，注意加http</li>\n<li>[]+():插入链接，[]里是显示文字，()里是link,+要去掉</li>\n<li>空格： 全角下两个空格</li>\n<li>#+空格是一级标题，##+空格是二级标题，etc</li>\n<li>星号+空格是一级目录，tab+星号+空格是二级目录，2tab+星号+空格是三级目录，etc</li>\n<li>```（+语言） 是插入代码(高亮)，1左边的那个键</li>\n<li>下划线打不出来，需要转义，\\加_即可    </li>\n</ul>\n"},{"title":"今天我又把服务器搞挂了","date":"2017-01-11T08:59:32.000Z","_content":"今天我又把服务器搞挂了，咦，我为什么要说又？哦，上次是由于运行fragroute的时候把路由表修改了，导致ssh命令无法使用，连接不到服务器，路由表项删掉就没事了。\n\n如果说上次还是小问题的话，那么这次就是大问题了，因为我这次是真的把服务器搞挂了，重启都没用。\n\n事情还要从前两天说起，我用sapp平台发IP包的时候，分过片的就是无法发出去，其实也不是发不出去，而是协议栈直接把我分过片的包重组后再发出去，这样的话我的逃逸就没用了。所以本来打算直接从MAC层发过去的，但是坑爹的是Sapp平台的话发包很麻烦，也收不到MAC层的包。佳哥建议我换个低一点的系统试一下，RedHat 7.2肯定是不行了。然后我就去试了试227那台服务器。\n\n问题来了，当我尝试在227上运行SAPP时，提示我\"libc.so.6: version `GLIBC_2.14' not found\"，然后我想当然的认为是缺少lib.so.6这个库，就从203那里复制了一个进来，没想到scp命令刚刚执行完就跪了，马上断开连接。服务器跪了，重启也不行。事后才发现原来这个库是很重要的库，复制进来的库把原来的库覆盖了，但是新的库和操作系统并不兼容，所以就跪了。\n\n而且，而且，我搞挂了2台服务器，前一天晚上我搞挂了227，但是我当时并不确定是我那个操作弄挂的。第二天又找来yng师兄看着我重复，刚刚执行完scp就又挂了。这才确定，然后赶紧去找运维人员。\n\n\n由此得到的教训：\n\n* 遇到问题不要想当然，如果我先查一下就不会有这么多问题了。\n* 涉及到更改系统库的操作时一定要小心小心再小心。\n* 技术上来讲，libc.so.6是一个软连接（因为版本号在后面，如果是文件的话，版本号应该在中间），因为我把libc.so.6改了，原来指向glibc 2.12,现在指向glibc 2.17,但是系统并没有glic2.17这个版本。所以操作系统就崩溃了。正确的做法应该是先安装glibc 2.17,然后再把libc.so.6改过来。\n","source":"_posts/今天我又把服务器搞挂了.md","raw":"---\ntitle: 今天我又把服务器搞挂了\ndate: 2017-01-11 16:59:32\ntags: \n  - Linux\n  - 服务器\n  - 教训\ncategories: Linux\n\n---\n今天我又把服务器搞挂了，咦，我为什么要说又？哦，上次是由于运行fragroute的时候把路由表修改了，导致ssh命令无法使用，连接不到服务器，路由表项删掉就没事了。\n\n如果说上次还是小问题的话，那么这次就是大问题了，因为我这次是真的把服务器搞挂了，重启都没用。\n\n事情还要从前两天说起，我用sapp平台发IP包的时候，分过片的就是无法发出去，其实也不是发不出去，而是协议栈直接把我分过片的包重组后再发出去，这样的话我的逃逸就没用了。所以本来打算直接从MAC层发过去的，但是坑爹的是Sapp平台的话发包很麻烦，也收不到MAC层的包。佳哥建议我换个低一点的系统试一下，RedHat 7.2肯定是不行了。然后我就去试了试227那台服务器。\n\n问题来了，当我尝试在227上运行SAPP时，提示我\"libc.so.6: version `GLIBC_2.14' not found\"，然后我想当然的认为是缺少lib.so.6这个库，就从203那里复制了一个进来，没想到scp命令刚刚执行完就跪了，马上断开连接。服务器跪了，重启也不行。事后才发现原来这个库是很重要的库，复制进来的库把原来的库覆盖了，但是新的库和操作系统并不兼容，所以就跪了。\n\n而且，而且，我搞挂了2台服务器，前一天晚上我搞挂了227，但是我当时并不确定是我那个操作弄挂的。第二天又找来yng师兄看着我重复，刚刚执行完scp就又挂了。这才确定，然后赶紧去找运维人员。\n\n\n由此得到的教训：\n\n* 遇到问题不要想当然，如果我先查一下就不会有这么多问题了。\n* 涉及到更改系统库的操作时一定要小心小心再小心。\n* 技术上来讲，libc.so.6是一个软连接（因为版本号在后面，如果是文件的话，版本号应该在中间），因为我把libc.so.6改了，原来指向glibc 2.12,现在指向glibc 2.17,但是系统并没有glic2.17这个版本。所以操作系统就崩溃了。正确的做法应该是先安装glibc 2.17,然后再把libc.so.6改过来。\n","slug":"今天我又把服务器搞挂了","published":1,"updated":"2017-01-13T03:40:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu32001whb58fl7bw7oz","content":"<p>今天我又把服务器搞挂了，咦，我为什么要说又？哦，上次是由于运行fragroute的时候把路由表修改了，导致ssh命令无法使用，连接不到服务器，路由表项删掉就没事了。</p>\n<p>如果说上次还是小问题的话，那么这次就是大问题了，因为我这次是真的把服务器搞挂了，重启都没用。</p>\n<p>事情还要从前两天说起，我用sapp平台发IP包的时候，分过片的就是无法发出去，其实也不是发不出去，而是协议栈直接把我分过片的包重组后再发出去，这样的话我的逃逸就没用了。所以本来打算直接从MAC层发过去的，但是坑爹的是Sapp平台的话发包很麻烦，也收不到MAC层的包。佳哥建议我换个低一点的系统试一下，RedHat 7.2肯定是不行了。然后我就去试了试227那台服务器。</p>\n<p>问题来了，当我尝试在227上运行SAPP时，提示我”libc.so.6: version `GLIBC_2.14’ not found”，然后我想当然的认为是缺少lib.so.6这个库，就从203那里复制了一个进来，没想到scp命令刚刚执行完就跪了，马上断开连接。服务器跪了，重启也不行。事后才发现原来这个库是很重要的库，复制进来的库把原来的库覆盖了，但是新的库和操作系统并不兼容，所以就跪了。</p>\n<p>而且，而且，我搞挂了2台服务器，前一天晚上我搞挂了227，但是我当时并不确定是我那个操作弄挂的。第二天又找来yng师兄看着我重复，刚刚执行完scp就又挂了。这才确定，然后赶紧去找运维人员。</p>\n<p>由此得到的教训：</p>\n<ul>\n<li>遇到问题不要想当然，如果我先查一下就不会有这么多问题了。</li>\n<li>涉及到更改系统库的操作时一定要小心小心再小心。</li>\n<li>技术上来讲，libc.so.6是一个软连接（因为版本号在后面，如果是文件的话，版本号应该在中间），因为我把libc.so.6改了，原来指向glibc 2.12,现在指向glibc 2.17,但是系统并没有glic2.17这个版本。所以操作系统就崩溃了。正确的做法应该是先安装glibc 2.17,然后再把libc.so.6改过来。</li>\n</ul>\n","excerpt":"","more":"<p>今天我又把服务器搞挂了，咦，我为什么要说又？哦，上次是由于运行fragroute的时候把路由表修改了，导致ssh命令无法使用，连接不到服务器，路由表项删掉就没事了。</p>\n<p>如果说上次还是小问题的话，那么这次就是大问题了，因为我这次是真的把服务器搞挂了，重启都没用。</p>\n<p>事情还要从前两天说起，我用sapp平台发IP包的时候，分过片的就是无法发出去，其实也不是发不出去，而是协议栈直接把我分过片的包重组后再发出去，这样的话我的逃逸就没用了。所以本来打算直接从MAC层发过去的，但是坑爹的是Sapp平台的话发包很麻烦，也收不到MAC层的包。佳哥建议我换个低一点的系统试一下，RedHat 7.2肯定是不行了。然后我就去试了试227那台服务器。</p>\n<p>问题来了，当我尝试在227上运行SAPP时，提示我”libc.so.6: version `GLIBC_2.14’ not found”，然后我想当然的认为是缺少lib.so.6这个库，就从203那里复制了一个进来，没想到scp命令刚刚执行完就跪了，马上断开连接。服务器跪了，重启也不行。事后才发现原来这个库是很重要的库，复制进来的库把原来的库覆盖了，但是新的库和操作系统并不兼容，所以就跪了。</p>\n<p>而且，而且，我搞挂了2台服务器，前一天晚上我搞挂了227，但是我当时并不确定是我那个操作弄挂的。第二天又找来yng师兄看着我重复，刚刚执行完scp就又挂了。这才确定，然后赶紧去找运维人员。</p>\n<p>由此得到的教训：</p>\n<ul>\n<li>遇到问题不要想当然，如果我先查一下就不会有这么多问题了。</li>\n<li>涉及到更改系统库的操作时一定要小心小心再小心。</li>\n<li>技术上来讲，libc.so.6是一个软连接（因为版本号在后面，如果是文件的话，版本号应该在中间），因为我把libc.so.6改了，原来指向glibc 2.12,现在指向glibc 2.17,但是系统并没有glic2.17这个版本。所以操作系统就崩溃了。正确的做法应该是先安装glibc 2.17,然后再把libc.so.6改过来。</li>\n</ul>\n"},{"title":"信息安全的一些问题","date":"2017-08-24T08:38:56.000Z","_content":"\n* ssh的原理：\n\t* ssh 是用来保证安全登录的，保证密码不被别人截获，默认端口为22\n\t* ssh登录时，服务器先发给你一个公钥，然后用户把密码用公钥加密后发给服务器，服务器用私钥解密。\n\t* known hosts: 但是这种方法容易被中间人攻击，即有人伪造服务器。所以在登录时服务器会把自己的公钥发给你，问你是否同意连接。当你同意的时候就会存到known_hosts文件中，里面是受信任的服务器的公钥。\n\t* 密钥登录：但是这样还是需要每次都输入密码。密钥登录就是用户在本地用rsa生成密钥对。公钥放在服务器上，登录时，服务器先发来一个随机的字符串，用户用私钥加密后传给服务器，服务器用公钥解密，如果解密成功，就说明登录成功。私钥加密，公钥解密，就是所谓的签名了。github的ssh登录就是这样做的。\n\t* authorized_keys: 里面存的是一些公钥，公钥对应的用户可以直接通过密钥登录。类似于github让你放公钥的地方。authorized_keys的权限是600，.ssh的权限是700，否则失败。\n\t* 参考资料：[阮一峰博客](http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html)\n* https原理：\n\t* https=http+ssl。tls可以看做是ssl 3.0\n\t* ssl首先三次握手协商出一个密钥A，协商的过程是非对称加密，目的是为了让双方都知道A，但是密钥传输加密，防止中间人攻击。协商出密钥之后就是对称加密了。\n\t* 协商密钥的过程，首先客户端先请求服务器拿到服务器的公钥，然后生成密钥A，用公钥加密A传给服务器，然后服务器用私钥解密拿到A。这个过程非常类似ssh的登录过程。\n\t* 同理，为了防止有人伪造服务器，浏览器需要确认从服务器拿到的公钥是正确的,这时候就需要证书了。有了证书之后，服务器发给客户端的就不是公钥，而是证书。\n\t* 证书内包含网站的公钥和证书颁发机构，消息摘要算法等信息，这些信息通过生成一个摘要(如md5)，然后用CA（受信任的证书颁发机构）的私钥对这个摘要加密(签名)。这样的证书是没有办法伪造的，因为你没有CA的私钥，你的客户端用CA的公钥解出来的签名肯定是不对的。\n\t* 关于CA的公钥，当客户端收到信息时，CA的公钥一般装系统时都在电脑里了。\n\t* 类似12306这种网站，没有去CA买证书，而是需要自己去官网下根证书。这样是不安全的，因为没有上面的验证过程，你必须信任从根证书上拿到的公钥，但是如果根证书被伪造，就很容易被中间人攻击了。\n\t* 关于CA的证书链，CA分为多级，最高的证书颁发机构成为根证书颁发机构，这个一般内置在操作系统中，证书的认证过程是这样的：rootCA -- CA1 -- CA2。CA2给google颁发了证书。那么证书验证过程中，rootCA信任CA1,CA1信任CA2,CA2信任google,那么这个证书链就打通了，就是说这个证书是受信任的。所谓的信任就是通过用公钥去解密摘要，看和证书里面的是否一致。\n\t* 参考资料：[数字证书原理](http://blog.csdn.net/u013424496/article/details/51161370)\n* 关于签名：\n\t* 摘要：摘要是对正文信息的md5,本身没有防止攻击的能力\n\t* 签名：签名是对摘要进行私钥加密，然后验证时用公钥。\n\t* 签名只能保证信息不被伪造，但是不能保证不被截获，因为消息中大部分内容是不加密的，只要摘要加密。","source":"_posts/信息安全的一些问题.md","raw":"---\ntitle: 信息安全的一些问题\ndate: 2017-08-24 16:38:56\ntags:\n\t- 信息安全\n\t- ssh\ncategories: 信息安全\n---\n\n* ssh的原理：\n\t* ssh 是用来保证安全登录的，保证密码不被别人截获，默认端口为22\n\t* ssh登录时，服务器先发给你一个公钥，然后用户把密码用公钥加密后发给服务器，服务器用私钥解密。\n\t* known hosts: 但是这种方法容易被中间人攻击，即有人伪造服务器。所以在登录时服务器会把自己的公钥发给你，问你是否同意连接。当你同意的时候就会存到known_hosts文件中，里面是受信任的服务器的公钥。\n\t* 密钥登录：但是这样还是需要每次都输入密码。密钥登录就是用户在本地用rsa生成密钥对。公钥放在服务器上，登录时，服务器先发来一个随机的字符串，用户用私钥加密后传给服务器，服务器用公钥解密，如果解密成功，就说明登录成功。私钥加密，公钥解密，就是所谓的签名了。github的ssh登录就是这样做的。\n\t* authorized_keys: 里面存的是一些公钥，公钥对应的用户可以直接通过密钥登录。类似于github让你放公钥的地方。authorized_keys的权限是600，.ssh的权限是700，否则失败。\n\t* 参考资料：[阮一峰博客](http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html)\n* https原理：\n\t* https=http+ssl。tls可以看做是ssl 3.0\n\t* ssl首先三次握手协商出一个密钥A，协商的过程是非对称加密，目的是为了让双方都知道A，但是密钥传输加密，防止中间人攻击。协商出密钥之后就是对称加密了。\n\t* 协商密钥的过程，首先客户端先请求服务器拿到服务器的公钥，然后生成密钥A，用公钥加密A传给服务器，然后服务器用私钥解密拿到A。这个过程非常类似ssh的登录过程。\n\t* 同理，为了防止有人伪造服务器，浏览器需要确认从服务器拿到的公钥是正确的,这时候就需要证书了。有了证书之后，服务器发给客户端的就不是公钥，而是证书。\n\t* 证书内包含网站的公钥和证书颁发机构，消息摘要算法等信息，这些信息通过生成一个摘要(如md5)，然后用CA（受信任的证书颁发机构）的私钥对这个摘要加密(签名)。这样的证书是没有办法伪造的，因为你没有CA的私钥，你的客户端用CA的公钥解出来的签名肯定是不对的。\n\t* 关于CA的公钥，当客户端收到信息时，CA的公钥一般装系统时都在电脑里了。\n\t* 类似12306这种网站，没有去CA买证书，而是需要自己去官网下根证书。这样是不安全的，因为没有上面的验证过程，你必须信任从根证书上拿到的公钥，但是如果根证书被伪造，就很容易被中间人攻击了。\n\t* 关于CA的证书链，CA分为多级，最高的证书颁发机构成为根证书颁发机构，这个一般内置在操作系统中，证书的认证过程是这样的：rootCA -- CA1 -- CA2。CA2给google颁发了证书。那么证书验证过程中，rootCA信任CA1,CA1信任CA2,CA2信任google,那么这个证书链就打通了，就是说这个证书是受信任的。所谓的信任就是通过用公钥去解密摘要，看和证书里面的是否一致。\n\t* 参考资料：[数字证书原理](http://blog.csdn.net/u013424496/article/details/51161370)\n* 关于签名：\n\t* 摘要：摘要是对正文信息的md5,本身没有防止攻击的能力\n\t* 签名：签名是对摘要进行私钥加密，然后验证时用公钥。\n\t* 签名只能保证信息不被伪造，但是不能保证不被截获，因为消息中大部分内容是不加密的，只要摘要加密。","slug":"信息安全的一些问题","published":1,"updated":"2017-12-24T08:42:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu35001zhb58ycxwqolr","content":"<ul>\n<li>ssh的原理：<ul>\n<li>ssh 是用来保证安全登录的，保证密码不被别人截获，默认端口为22</li>\n<li>ssh登录时，服务器先发给你一个公钥，然后用户把密码用公钥加密后发给服务器，服务器用私钥解密。</li>\n<li>known hosts: 但是这种方法容易被中间人攻击，即有人伪造服务器。所以在登录时服务器会把自己的公钥发给你，问你是否同意连接。当你同意的时候就会存到known_hosts文件中，里面是受信任的服务器的公钥。</li>\n<li>密钥登录：但是这样还是需要每次都输入密码。密钥登录就是用户在本地用rsa生成密钥对。公钥放在服务器上，登录时，服务器先发来一个随机的字符串，用户用私钥加密后传给服务器，服务器用公钥解密，如果解密成功，就说明登录成功。私钥加密，公钥解密，就是所谓的签名了。github的ssh登录就是这样做的。</li>\n<li>authorized_keys: 里面存的是一些公钥，公钥对应的用户可以直接通过密钥登录。类似于github让你放公钥的地方。authorized_keys的权限是600，.ssh的权限是700，否则失败。</li>\n<li>参考资料：<a href=\"http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html\" target=\"_blank\" rel=\"external\">阮一峰博客</a></li>\n</ul>\n</li>\n<li>https原理：<ul>\n<li>https=http+ssl。tls可以看做是ssl 3.0</li>\n<li>ssl首先三次握手协商出一个密钥A，协商的过程是非对称加密，目的是为了让双方都知道A，但是密钥传输加密，防止中间人攻击。协商出密钥之后就是对称加密了。</li>\n<li>协商密钥的过程，首先客户端先请求服务器拿到服务器的公钥，然后生成密钥A，用公钥加密A传给服务器，然后服务器用私钥解密拿到A。这个过程非常类似ssh的登录过程。</li>\n<li>同理，为了防止有人伪造服务器，浏览器需要确认从服务器拿到的公钥是正确的,这时候就需要证书了。有了证书之后，服务器发给客户端的就不是公钥，而是证书。</li>\n<li>证书内包含网站的公钥和证书颁发机构，消息摘要算法等信息，这些信息通过生成一个摘要(如md5)，然后用CA（受信任的证书颁发机构）的私钥对这个摘要加密(签名)。这样的证书是没有办法伪造的，因为你没有CA的私钥，你的客户端用CA的公钥解出来的签名肯定是不对的。</li>\n<li>关于CA的公钥，当客户端收到信息时，CA的公钥一般装系统时都在电脑里了。</li>\n<li>类似12306这种网站，没有去CA买证书，而是需要自己去官网下根证书。这样是不安全的，因为没有上面的验证过程，你必须信任从根证书上拿到的公钥，但是如果根证书被伪造，就很容易被中间人攻击了。</li>\n<li>关于CA的证书链，CA分为多级，最高的证书颁发机构成为根证书颁发机构，这个一般内置在操作系统中，证书的认证过程是这样的：rootCA – CA1 – CA2。CA2给google颁发了证书。那么证书验证过程中，rootCA信任CA1,CA1信任CA2,CA2信任google,那么这个证书链就打通了，就是说这个证书是受信任的。所谓的信任就是通过用公钥去解密摘要，看和证书里面的是否一致。</li>\n<li>参考资料：<a href=\"http://blog.csdn.net/u013424496/article/details/51161370\" target=\"_blank\" rel=\"external\">数字证书原理</a></li>\n</ul>\n</li>\n<li>关于签名：<ul>\n<li>摘要：摘要是对正文信息的md5,本身没有防止攻击的能力</li>\n<li>签名：签名是对摘要进行私钥加密，然后验证时用公钥。</li>\n<li>签名只能保证信息不被伪造，但是不能保证不被截获，因为消息中大部分内容是不加密的，只要摘要加密。</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>ssh的原理：<ul>\n<li>ssh 是用来保证安全登录的，保证密码不被别人截获，默认端口为22</li>\n<li>ssh登录时，服务器先发给你一个公钥，然后用户把密码用公钥加密后发给服务器，服务器用私钥解密。</li>\n<li>known hosts: 但是这种方法容易被中间人攻击，即有人伪造服务器。所以在登录时服务器会把自己的公钥发给你，问你是否同意连接。当你同意的时候就会存到known_hosts文件中，里面是受信任的服务器的公钥。</li>\n<li>密钥登录：但是这样还是需要每次都输入密码。密钥登录就是用户在本地用rsa生成密钥对。公钥放在服务器上，登录时，服务器先发来一个随机的字符串，用户用私钥加密后传给服务器，服务器用公钥解密，如果解密成功，就说明登录成功。私钥加密，公钥解密，就是所谓的签名了。github的ssh登录就是这样做的。</li>\n<li>authorized_keys: 里面存的是一些公钥，公钥对应的用户可以直接通过密钥登录。类似于github让你放公钥的地方。authorized_keys的权限是600，.ssh的权限是700，否则失败。</li>\n<li>参考资料：<a href=\"http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html\">阮一峰博客</a></li>\n</ul>\n</li>\n<li>https原理：<ul>\n<li>https=http+ssl。tls可以看做是ssl 3.0</li>\n<li>ssl首先三次握手协商出一个密钥A，协商的过程是非对称加密，目的是为了让双方都知道A，但是密钥传输加密，防止中间人攻击。协商出密钥之后就是对称加密了。</li>\n<li>协商密钥的过程，首先客户端先请求服务器拿到服务器的公钥，然后生成密钥A，用公钥加密A传给服务器，然后服务器用私钥解密拿到A。这个过程非常类似ssh的登录过程。</li>\n<li>同理，为了防止有人伪造服务器，浏览器需要确认从服务器拿到的公钥是正确的,这时候就需要证书了。有了证书之后，服务器发给客户端的就不是公钥，而是证书。</li>\n<li>证书内包含网站的公钥和证书颁发机构，消息摘要算法等信息，这些信息通过生成一个摘要(如md5)，然后用CA（受信任的证书颁发机构）的私钥对这个摘要加密(签名)。这样的证书是没有办法伪造的，因为你没有CA的私钥，你的客户端用CA的公钥解出来的签名肯定是不对的。</li>\n<li>关于CA的公钥，当客户端收到信息时，CA的公钥一般装系统时都在电脑里了。</li>\n<li>类似12306这种网站，没有去CA买证书，而是需要自己去官网下根证书。这样是不安全的，因为没有上面的验证过程，你必须信任从根证书上拿到的公钥，但是如果根证书被伪造，就很容易被中间人攻击了。</li>\n<li>关于CA的证书链，CA分为多级，最高的证书颁发机构成为根证书颁发机构，这个一般内置在操作系统中，证书的认证过程是这样的：rootCA – CA1 – CA2。CA2给google颁发了证书。那么证书验证过程中，rootCA信任CA1,CA1信任CA2,CA2信任google,那么这个证书链就打通了，就是说这个证书是受信任的。所谓的信任就是通过用公钥去解密摘要，看和证书里面的是否一致。</li>\n<li>参考资料：<a href=\"http://blog.csdn.net/u013424496/article/details/51161370\">数字证书原理</a></li>\n</ul>\n</li>\n<li>关于签名：<ul>\n<li>摘要：摘要是对正文信息的md5,本身没有防止攻击的能力</li>\n<li>签名：签名是对摘要进行私钥加密，然后验证时用公钥。</li>\n<li>签名只能保证信息不被伪造，但是不能保证不被截获，因为消息中大部分内容是不加密的，只要摘要加密。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"mysql数据导入导出","date":"2017-05-29T15:31:51.000Z","_content":"* mysql 导出数据到文件: \nmysql -h 10.38.26.21 -P 5100 -uwangguoqiang01 -pabH6j2HUQ7 media -e \"select id from app order by id desc limit 10\" > export.log\n导出数据,文件名不能加引号\n\n* mysql导入数据到数据库：load data local infile \"./BadCase2.data\" into table org_info character set gbk;\n\n* mysql导出sql语句到文件中：mysqldump -h10.38.26.21 -P5100 -uwangguoqiang01 -pabH6j2HUQ7 media app --skip-lock-tables > test.txt\n","source":"_posts/mysql数据导入导出.md","raw":"---\ntitle: mysql数据导入导出\ndate: 2017-05-29 23:31:51\ntags: mysql\ncategories: Linux\n---\n* mysql 导出数据到文件: \nmysql -h 10.38.26.21 -P 5100 -uwangguoqiang01 -pabH6j2HUQ7 media -e \"select id from app order by id desc limit 10\" > export.log\n导出数据,文件名不能加引号\n\n* mysql导入数据到数据库：load data local infile \"./BadCase2.data\" into table org_info character set gbk;\n\n* mysql导出sql语句到文件中：mysqldump -h10.38.26.21 -P5100 -uwangguoqiang01 -pabH6j2HUQ7 media app --skip-lock-tables > test.txt\n","slug":"mysql数据导入导出","published":1,"updated":"2017-05-29T15:38:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu370023hb58dzl01dby","content":"<ul>\n<li><p>mysql 导出数据到文件:<br>mysql -h 10.38.26.21 -P 5100 -uwangguoqiang01 -pabH6j2HUQ7 media -e “select id from app order by id desc limit 10” &gt; export.log<br>导出数据,文件名不能加引号</p>\n</li>\n<li><p>mysql导入数据到数据库：load data local infile “./BadCase2.data” into table org_info character set gbk;</p>\n</li>\n<li><p>mysql导出sql语句到文件中：mysqldump -h10.38.26.21 -P5100 -uwangguoqiang01 -pabH6j2HUQ7 media app –skip-lock-tables &gt; test.txt</p>\n</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li><p>mysql 导出数据到文件:<br>mysql -h 10.38.26.21 -P 5100 -uwangguoqiang01 -pabH6j2HUQ7 media -e “select id from app order by id desc limit 10” &gt; export.log<br>导出数据,文件名不能加引号</p>\n</li>\n<li><p>mysql导入数据到数据库：load data local infile “./BadCase2.data” into table org_info character set gbk;</p>\n</li>\n<li><p>mysql导出sql语句到文件中：mysqldump -h10.38.26.21 -P5100 -uwangguoqiang01 -pabH6j2HUQ7 media app –skip-lock-tables &gt; test.txt</p>\n</li>\n</ul>\n"},{"title":"入组培训code review总结","date":"2017-08-21T05:29:01.000Z","_content":"* 今天入组培训又被超哥吊打了，code review给我挑了很多毛病，对此我是服气的，感谢超哥和佳哥。下面具体说说：\n\t* 文件的组织：\n\t\t* src: .c makefile\n\t\t* bin: .so .inf makefile\n\t\t* conf: .conf\n\t\t* 值得一提的是，bin中的makefile是假的makefile，他的作用就是cd到src目录，然后执行src中的makefile,文件的组织和makefile可以看gitlab上live_monitor的项目,比较规范。\n\t* 当一个函数需要返回多个值的时候，这个时候就要想到传入指针或者引用来解决。切记，百度面试string to int也是这个问题。\n\t* 考虑不全面，比如ip监控的时候有个合法的ip,我们判断的时候要判断src ip || dst ip在列表中的时候就放行，否则合法的ip只能出去回不来了。\n\t* 不要重复造轮子，读配置文件可以用MESA load prof这个公共库。写日志可以用MEx'x'x'x'x'x'x'x'x'xSA handle logger这个库(下划线打不出来)。\n\t* 用CJSON,比较专业。\n\t* 另外，自己写读配置文件的时候，要写的优雅一点，每需要一个配置就去扫描整个配置文件一遍，这样虽然效率低，但是很整齐。\n\t* 不要随便拆成两个文件，完全不相关的函数才拆成两个文件。\n\t* 超过20行的字符串处理就要考虑glic中自带的库。具体见[c语言基础,长期更新](https://leocui.github.io/2016/10/20/c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%EF%BC%8C%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/>)\n\t* 输出错误信息时要输出具体的系统的错误(errno, strerror(errno))\n\t* malloc和free最好成对出现，即在同一个函数中\n\t* 每个.c都对应一个头文件，不是所有的声明都要放到头文件中。放到头文件中是要给别人用的，也就是说如果某个函数只有本文件用，那么就不用放到头文件中。\n\t* cpp代码要给c用的时候，用extern 'C'，具体见[c语言基础,长期更新](https://leocui.github.io/2016/10/20/c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%EF%BC%8C%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/>)\n\t* 多用assert，表示你很确定这个情况不会发生，出现就死。\n\t* free后要把指针置为NULL,养成习惯。\n\t* 同一个全局变量不用在两个文件中重复声明，加一个extern就行了。具体见[c语言基础,长期更新](https://leocui.github.io/2016/10/20/c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%EF%BC%8C%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/>)\n\t* 比如声明一块空间来存一个结构体，最好用sizeof来代替宏\n\t* struct conflist conflist；这种写法不推荐，相当于面包牌面包，可以换成如struct conflist myconflist;\n\t* usleep最小的精度就是10,比如usleep(1)，也是10us\n\t* 变量名前面加下划线表示该变量只有我自己用，你们千万别用\n\t* 我有一个get_port的函数，需要调用两次得到src_port和dst_port，为了区分还设了一个flag，完全可以传入src_port和dst_port的指针一次返回。\n","source":"_posts/入组培训code-review总结.md","raw":"---\ntitle: 入组培训code review总结\ndate: 2017-08-21 13:29:01\ntags: \n\t- c/c++\n\t- CR\ncategories: c/c++\n---\n* 今天入组培训又被超哥吊打了，code review给我挑了很多毛病，对此我是服气的，感谢超哥和佳哥。下面具体说说：\n\t* 文件的组织：\n\t\t* src: .c makefile\n\t\t* bin: .so .inf makefile\n\t\t* conf: .conf\n\t\t* 值得一提的是，bin中的makefile是假的makefile，他的作用就是cd到src目录，然后执行src中的makefile,文件的组织和makefile可以看gitlab上live_monitor的项目,比较规范。\n\t* 当一个函数需要返回多个值的时候，这个时候就要想到传入指针或者引用来解决。切记，百度面试string to int也是这个问题。\n\t* 考虑不全面，比如ip监控的时候有个合法的ip,我们判断的时候要判断src ip || dst ip在列表中的时候就放行，否则合法的ip只能出去回不来了。\n\t* 不要重复造轮子，读配置文件可以用MESA load prof这个公共库。写日志可以用MEx'x'x'x'x'x'x'x'x'xSA handle logger这个库(下划线打不出来)。\n\t* 用CJSON,比较专业。\n\t* 另外，自己写读配置文件的时候，要写的优雅一点，每需要一个配置就去扫描整个配置文件一遍，这样虽然效率低，但是很整齐。\n\t* 不要随便拆成两个文件，完全不相关的函数才拆成两个文件。\n\t* 超过20行的字符串处理就要考虑glic中自带的库。具体见[c语言基础,长期更新](https://leocui.github.io/2016/10/20/c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%EF%BC%8C%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/>)\n\t* 输出错误信息时要输出具体的系统的错误(errno, strerror(errno))\n\t* malloc和free最好成对出现，即在同一个函数中\n\t* 每个.c都对应一个头文件，不是所有的声明都要放到头文件中。放到头文件中是要给别人用的，也就是说如果某个函数只有本文件用，那么就不用放到头文件中。\n\t* cpp代码要给c用的时候，用extern 'C'，具体见[c语言基础,长期更新](https://leocui.github.io/2016/10/20/c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%EF%BC%8C%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/>)\n\t* 多用assert，表示你很确定这个情况不会发生，出现就死。\n\t* free后要把指针置为NULL,养成习惯。\n\t* 同一个全局变量不用在两个文件中重复声明，加一个extern就行了。具体见[c语言基础,长期更新](https://leocui.github.io/2016/10/20/c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%EF%BC%8C%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/>)\n\t* 比如声明一块空间来存一个结构体，最好用sizeof来代替宏\n\t* struct conflist conflist；这种写法不推荐，相当于面包牌面包，可以换成如struct conflist myconflist;\n\t* usleep最小的精度就是10,比如usleep(1)，也是10us\n\t* 变量名前面加下划线表示该变量只有我自己用，你们千万别用\n\t* 我有一个get_port的函数，需要调用两次得到src_port和dst_port，为了区分还设了一个flag，完全可以传入src_port和dst_port的指针一次返回。\n","slug":"入组培训code-review总结","published":1,"updated":"2017-08-24T12:55:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu3a0027hb58uixn7ugq","content":"<ul>\n<li>今天入组培训又被超哥吊打了，code review给我挑了很多毛病，对此我是服气的，感谢超哥和佳哥。下面具体说说：<ul>\n<li>文件的组织：<ul>\n<li>src: .c makefile</li>\n<li>bin: .so .inf makefile</li>\n<li>conf: .conf</li>\n<li>值得一提的是，bin中的makefile是假的makefile，他的作用就是cd到src目录，然后执行src中的makefile,文件的组织和makefile可以看gitlab上live_monitor的项目,比较规范。</li>\n</ul>\n</li>\n<li>当一个函数需要返回多个值的时候，这个时候就要想到传入指针或者引用来解决。切记，百度面试string to int也是这个问题。</li>\n<li>考虑不全面，比如ip监控的时候有个合法的ip,我们判断的时候要判断src ip || dst ip在列表中的时候就放行，否则合法的ip只能出去回不来了。</li>\n<li>不要重复造轮子，读配置文件可以用MESA load prof这个公共库。写日志可以用MEx’x’x’x’x’x’x’x’x’xSA handle logger这个库(下划线打不出来)。</li>\n<li>用CJSON,比较专业。</li>\n<li>另外，自己写读配置文件的时候，要写的优雅一点，每需要一个配置就去扫描整个配置文件一遍，这样虽然效率低，但是很整齐。</li>\n<li>不要随便拆成两个文件，完全不相关的函数才拆成两个文件。</li>\n<li>超过20行的字符串处理就要考虑glic中自带的库。具体见<a href=\"https://leocui.github.io/2016/10/20/c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%EF%BC%8C%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/\">c语言基础,长期更新</a></li>\n<li>输出错误信息时要输出具体的系统的错误(errno, strerror(errno))</li>\n<li>malloc和free最好成对出现，即在同一个函数中</li>\n<li>每个.c都对应一个头文件，不是所有的声明都要放到头文件中。放到头文件中是要给别人用的，也就是说如果某个函数只有本文件用，那么就不用放到头文件中。</li>\n<li>cpp代码要给c用的时候，用extern ‘C’，具体见<a href=\"https://leocui.github.io/2016/10/20/c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%EF%BC%8C%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/\">c语言基础,长期更新</a></li>\n<li>多用assert，表示你很确定这个情况不会发生，出现就死。</li>\n<li>free后要把指针置为NULL,养成习惯。</li>\n<li>同一个全局变量不用在两个文件中重复声明，加一个extern就行了。具体见<a href=\"https://leocui.github.io/2016/10/20/c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%EF%BC%8C%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/\">c语言基础,长期更新</a></li>\n<li>比如声明一块空间来存一个结构体，最好用sizeof来代替宏</li>\n<li>struct conflist conflist；这种写法不推荐，相当于面包牌面包，可以换成如struct conflist myconflist;</li>\n<li>usleep最小的精度就是10,比如usleep(1)，也是10us</li>\n<li>变量名前面加下划线表示该变量只有我自己用，你们千万别用</li>\n<li>我有一个get_port的函数，需要调用两次得到src_port和dst_port，为了区分还设了一个flag，完全可以传入src_port和dst_port的指针一次返回。</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>今天入组培训又被超哥吊打了，code review给我挑了很多毛病，对此我是服气的，感谢超哥和佳哥。下面具体说说：<ul>\n<li>文件的组织：<ul>\n<li>src: .c makefile</li>\n<li>bin: .so .inf makefile</li>\n<li>conf: .conf</li>\n<li>值得一提的是，bin中的makefile是假的makefile，他的作用就是cd到src目录，然后执行src中的makefile,文件的组织和makefile可以看gitlab上live_monitor的项目,比较规范。</li>\n</ul>\n</li>\n<li>当一个函数需要返回多个值的时候，这个时候就要想到传入指针或者引用来解决。切记，百度面试string to int也是这个问题。</li>\n<li>考虑不全面，比如ip监控的时候有个合法的ip,我们判断的时候要判断src ip || dst ip在列表中的时候就放行，否则合法的ip只能出去回不来了。</li>\n<li>不要重复造轮子，读配置文件可以用MESA load prof这个公共库。写日志可以用MEx’x’x’x’x’x’x’x’x’xSA handle logger这个库(下划线打不出来)。</li>\n<li>用CJSON,比较专业。</li>\n<li>另外，自己写读配置文件的时候，要写的优雅一点，每需要一个配置就去扫描整个配置文件一遍，这样虽然效率低，但是很整齐。</li>\n<li>不要随便拆成两个文件，完全不相关的函数才拆成两个文件。</li>\n<li>超过20行的字符串处理就要考虑glic中自带的库。具体见<a href=\"https://leocui.github.io/2016/10/20/c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%EF%BC%8C%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/\">c语言基础,长期更新</a></li>\n<li>输出错误信息时要输出具体的系统的错误(errno, strerror(errno))</li>\n<li>malloc和free最好成对出现，即在同一个函数中</li>\n<li>每个.c都对应一个头文件，不是所有的声明都要放到头文件中。放到头文件中是要给别人用的，也就是说如果某个函数只有本文件用，那么就不用放到头文件中。</li>\n<li>cpp代码要给c用的时候，用extern ‘C’，具体见<a href=\"https://leocui.github.io/2016/10/20/c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%EF%BC%8C%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/\">c语言基础,长期更新</a></li>\n<li>多用assert，表示你很确定这个情况不会发生，出现就死。</li>\n<li>free后要把指针置为NULL,养成习惯。</li>\n<li>同一个全局变量不用在两个文件中重复声明，加一个extern就行了。具体见<a href=\"https://leocui.github.io/2016/10/20/c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%EF%BC%8C%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/\">c语言基础,长期更新</a></li>\n<li>比如声明一块空间来存一个结构体，最好用sizeof来代替宏</li>\n<li>struct conflist conflist；这种写法不推荐，相当于面包牌面包，可以换成如struct conflist myconflist;</li>\n<li>usleep最小的精度就是10,比如usleep(1)，也是10us</li>\n<li>变量名前面加下划线表示该变量只有我自己用，你们千万别用</li>\n<li>我有一个get_port的函数，需要调用两次得到src_port和dst_port，为了区分还设了一个flag，完全可以传入src_port和dst_port的指针一次返回。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"几种web服务器","date":"2017-11-15T16:05:01.000Z","_content":"* 之前也算做过一点web开发，一直对nginx,apache,tomcat在高并发，多进程下的原理不太了解，现在终于搞清楚一些了。\n\t* nginx,apahe属于一类，都属于静态服务器，适合展示静态资源。对于动态请求，通常要靠php，python等cgi程序。真正处理用户请求的是cgi程序。一个用户请求就会开一个php进程（类似php index.php这样）。\n\t* tomcat是动态服务器，tomcat本身就是一个java程序，一个java程序对应一个jvm,一个jvm就是一个进程。所以tomcat只有一个进程，每个请求会在jvm开一个线程来处理。\n\t* nginx,apache的区别：\n\t\t* nginx本身有1个master进程，4个worker进程（cpu核数），nginx内部用了epoll，一个进程处理多个socket连接，实现高并发。(当该进程在等待某个cgi程序的处理结果时，不能让它阻塞在这里，而是注册一个回调函数，然后去接收新的socket连接)一般用来做反向代理，负载均衡。\n\t\t* apache给每个连接都开一个进程。\n* epoll是实现io复用的一种方法，目的是在一个进程中处理多个socket连接。玩法：\n\n```\nwhile(1){\n\tevents=epoll_wait();    //内核去轮询\n\tfor(event: events){\n\t\tif(事件被触发){\n\t\t\tevent.callback()\n\t\t}\n\t}\n\taccept();  // epoll中加入新的socket\n}\n\n```\n* mq消息队列\n\t* 典型用法：用于进程或者服务间通信，还可以共享消息，一个生产者可以对应多个消费者。比如有多个service,service1,service2,service3。service1对数据库的某个改动影响到了service2,3。不用消息队列的话，service2，3需要提供一个接口，当service1改动的时候调用这2个接口，但是这样很不优雅而且耦合太大。用了消息队列的话就可以将这个改动push到消息队列，谁用谁自己去取。\n\n* test","source":"_posts/几种web服务器.md","raw":"---\ntitle: 几种web服务器\ndate: 2017-11-16 00:05:01\ntags:\n\t- nginx\n\t- tomcat\n\t- apache\n\t- jvm\ncategories: 计算机基础\n---\n* 之前也算做过一点web开发，一直对nginx,apache,tomcat在高并发，多进程下的原理不太了解，现在终于搞清楚一些了。\n\t* nginx,apahe属于一类，都属于静态服务器，适合展示静态资源。对于动态请求，通常要靠php，python等cgi程序。真正处理用户请求的是cgi程序。一个用户请求就会开一个php进程（类似php index.php这样）。\n\t* tomcat是动态服务器，tomcat本身就是一个java程序，一个java程序对应一个jvm,一个jvm就是一个进程。所以tomcat只有一个进程，每个请求会在jvm开一个线程来处理。\n\t* nginx,apache的区别：\n\t\t* nginx本身有1个master进程，4个worker进程（cpu核数），nginx内部用了epoll，一个进程处理多个socket连接，实现高并发。(当该进程在等待某个cgi程序的处理结果时，不能让它阻塞在这里，而是注册一个回调函数，然后去接收新的socket连接)一般用来做反向代理，负载均衡。\n\t\t* apache给每个连接都开一个进程。\n* epoll是实现io复用的一种方法，目的是在一个进程中处理多个socket连接。玩法：\n\n```\nwhile(1){\n\tevents=epoll_wait();    //内核去轮询\n\tfor(event: events){\n\t\tif(事件被触发){\n\t\t\tevent.callback()\n\t\t}\n\t}\n\taccept();  // epoll中加入新的socket\n}\n\n```\n* mq消息队列\n\t* 典型用法：用于进程或者服务间通信，还可以共享消息，一个生产者可以对应多个消费者。比如有多个service,service1,service2,service3。service1对数据库的某个改动影响到了service2,3。不用消息队列的话，service2，3需要提供一个接口，当service1改动的时候调用这2个接口，但是这样很不优雅而且耦合太大。用了消息队列的话就可以将这个改动push到消息队列，谁用谁自己去取。\n\n* test","slug":"几种web服务器","published":1,"updated":"2017-11-15T16:06:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu3b002bhb582vfdu7eb","content":"<ul>\n<li>之前也算做过一点web开发，一直对nginx,apache,tomcat在高并发，多进程下的原理不太了解，现在终于搞清楚一些了。<ul>\n<li>nginx,apahe属于一类，都属于静态服务器，适合展示静态资源。对于动态请求，通常要靠php，python等cgi程序。真正处理用户请求的是cgi程序。一个用户请求就会开一个php进程（类似php index.php这样）。</li>\n<li>tomcat是动态服务器，tomcat本身就是一个java程序，一个java程序对应一个jvm,一个jvm就是一个进程。所以tomcat只有一个进程，每个请求会在jvm开一个线程来处理。</li>\n<li>nginx,apache的区别：<ul>\n<li>nginx本身有1个master进程，4个worker进程（cpu核数），nginx内部用了epoll，一个进程处理多个socket连接，实现高并发。(当该进程在等待某个cgi程序的处理结果时，不能让它阻塞在这里，而是注册一个回调函数，然后去接收新的socket连接)一般用来做反向代理，负载均衡。</li>\n<li>apache给每个连接都开一个进程。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>epoll是实现io复用的一种方法，目的是在一个进程中处理多个socket连接。玩法：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">while(1)&#123;</div><div class=\"line\">\tevents=epoll_wait();    //内核去轮询</div><div class=\"line\">\tfor(event: events)&#123;</div><div class=\"line\">\t\tif(事件被触发)&#123;</div><div class=\"line\">\t\t\tevent.callback()</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\taccept();  // epoll中加入新的socket</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>mq消息队列</p>\n<ul>\n<li>典型用法：用于进程或者服务间通信，还可以共享消息，一个生产者可以对应多个消费者。比如有多个service,service1,service2,service3。service1对数据库的某个改动影响到了service2,3。不用消息队列的话，service2，3需要提供一个接口，当service1改动的时候调用这2个接口，但是这样很不优雅而且耦合太大。用了消息队列的话就可以将这个改动push到消息队列，谁用谁自己去取。</li>\n</ul>\n</li>\n<li><p>test</p>\n</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>之前也算做过一点web开发，一直对nginx,apache,tomcat在高并发，多进程下的原理不太了解，现在终于搞清楚一些了。<ul>\n<li>nginx,apahe属于一类，都属于静态服务器，适合展示静态资源。对于动态请求，通常要靠php，python等cgi程序。真正处理用户请求的是cgi程序。一个用户请求就会开一个php进程（类似php index.php这样）。</li>\n<li>tomcat是动态服务器，tomcat本身就是一个java程序，一个java程序对应一个jvm,一个jvm就是一个进程。所以tomcat只有一个进程，每个请求会在jvm开一个线程来处理。</li>\n<li>nginx,apache的区别：<ul>\n<li>nginx本身有1个master进程，4个worker进程（cpu核数），nginx内部用了epoll，一个进程处理多个socket连接，实现高并发。(当该进程在等待某个cgi程序的处理结果时，不能让它阻塞在这里，而是注册一个回调函数，然后去接收新的socket连接)一般用来做反向代理，负载均衡。</li>\n<li>apache给每个连接都开一个进程。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>epoll是实现io复用的一种方法，目的是在一个进程中处理多个socket连接。玩法：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">while(1)&#123;</div><div class=\"line\">\tevents=epoll_wait();    //内核去轮询</div><div class=\"line\">\tfor(event: events)&#123;</div><div class=\"line\">\t\tif(事件被触发)&#123;</div><div class=\"line\">\t\t\tevent.callback()</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\taccept();  // epoll中加入新的socket</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>mq消息队列</p>\n<ul>\n<li>典型用法：用于进程或者服务间通信，还可以共享消息，一个生产者可以对应多个消费者。比如有多个service,service1,service2,service3。service1对数据库的某个改动影响到了service2,3。不用消息队列的话，service2，3需要提供一个接口，当service1改动的时候调用这2个接口，但是这样很不优雅而且耦合太大。用了消息队列的话就可以将这个改动push到消息队列，谁用谁自己去取。</li>\n</ul>\n</li>\n<li><p>test</p>\n</li>\n</ul>\n"},{"title":"变量的声明和定义","date":"2015-05-19T12:42:58.000Z","_content":"\n\n我们在程序设计中，时时刻刻都用到变量的定义和变量的声明，可有些时候我们对这个概念不是很清楚，知道它是怎么用，但却不知是怎么一会事，下面我就简单的把他们的区别介绍如下：(望我的指点对你受益)\n\n变量的声明有两种情况：\n\n1、一种是需要建立存储空间的。例如：int a 在声明的时候就已经建立了存储空间。\n\n2、另一种是不需要建立存储空间的。 例如：extern int a 其中变量a是在别的文件中定义的。\n\n前者是“定义性声明（defining declaration）”或者称为“定义（definition）”，而后者是“引用性声明（referncing declaration）”，从广义的角度来讲声明中包含着定义，即定义是声明的一个特例，所以并非所有的声明都是定义，例如：int a 它既是声明，同时又是定义。然而对于 extern a 来讲它只是声明不是定义。一般的情况下我们常常这样叙述，把建立空间的声明称之为“定义”，而把不需要建立存储空间的声明称之为“声明”。很明显我们在这里指的声明是范围比较窄的，即狭义上的声明，也就是说非定义性质的声明，例如：在主函数中：\n\nint main() {    \nextern int A;\n//这是个声明而不是定义，声明A是一个已经定义了的外部变量\n//注意：声明外部变量时可以把变量类型去掉如：extern A;\ndosth(); //执行函数   \n}    \nint A; //是定义，定义了A为整型的外部变量\n外部变量的“定义”与外部变量的“声明”是不相同的,外部变量的定义只能有一次，它的位置是在所有函数之外，而同一个文件中的外部变量声明可以是多次的，它可以在函数之内(哪个函数要用就在那个函数中声明)也可以在函数之外(在外部变量的定义点之前)。系统会根据外部变量的定义(而不是根据外部变量的声明)分配存储空间的。                    \n对于外部变量来讲，初始化只能是在“定义”中进行,而不是在“声明”中。所谓的“声明”，其作用，是声明该变量是一个已在后面定义过的外部变量，仅仅是为了“提前”引用该变量而作的“声明”而已。extern 只作声明，不作任何定义。\n\n（我们声明的最终目的是为了提前使用，即在定义之前使用，如果不需要提前使用就没有单独声明的必要，变量是如此，函数也是如此，所以声明不会分配存储空间，只有定义时才会分配存储空间。）\n\n用static来声明一个变量的作用有二：\n\n(1)对于局部变量用static声明，则是为该变量分配的空间在整个程序的执行期内都始终存在。\n\n(2)外部变量用static来声明，则该变量的作用只限于本文件模块。\n\n\n\n\n\n\n\n\n\n我的几点理解：\n\n1.关于变量名，变量名只是一个语法上的概念，编译之后就不存在这个概念了，如果是全局变量，直接编译时就分配内存，变量名直接用地址代替了，如果是局部变量，是在运行时分配内存，堆栈，变量名可以用当前分配的地址代替。总之，想的太深会涉及很多 编译原理的知识。","source":"_posts/变量的声明和定义.md","raw":"---\ntitle: 变量的声明和定义\ndate: 2015-05-19 20:42:58\ntags: \n  - 声明和定义\n  - c/c++\n  - 外部变量\ncategories: c/c++\n---\n\n\n我们在程序设计中，时时刻刻都用到变量的定义和变量的声明，可有些时候我们对这个概念不是很清楚，知道它是怎么用，但却不知是怎么一会事，下面我就简单的把他们的区别介绍如下：(望我的指点对你受益)\n\n变量的声明有两种情况：\n\n1、一种是需要建立存储空间的。例如：int a 在声明的时候就已经建立了存储空间。\n\n2、另一种是不需要建立存储空间的。 例如：extern int a 其中变量a是在别的文件中定义的。\n\n前者是“定义性声明（defining declaration）”或者称为“定义（definition）”，而后者是“引用性声明（referncing declaration）”，从广义的角度来讲声明中包含着定义，即定义是声明的一个特例，所以并非所有的声明都是定义，例如：int a 它既是声明，同时又是定义。然而对于 extern a 来讲它只是声明不是定义。一般的情况下我们常常这样叙述，把建立空间的声明称之为“定义”，而把不需要建立存储空间的声明称之为“声明”。很明显我们在这里指的声明是范围比较窄的，即狭义上的声明，也就是说非定义性质的声明，例如：在主函数中：\n\nint main() {    \nextern int A;\n//这是个声明而不是定义，声明A是一个已经定义了的外部变量\n//注意：声明外部变量时可以把变量类型去掉如：extern A;\ndosth(); //执行函数   \n}    \nint A; //是定义，定义了A为整型的外部变量\n外部变量的“定义”与外部变量的“声明”是不相同的,外部变量的定义只能有一次，它的位置是在所有函数之外，而同一个文件中的外部变量声明可以是多次的，它可以在函数之内(哪个函数要用就在那个函数中声明)也可以在函数之外(在外部变量的定义点之前)。系统会根据外部变量的定义(而不是根据外部变量的声明)分配存储空间的。                    \n对于外部变量来讲，初始化只能是在“定义”中进行,而不是在“声明”中。所谓的“声明”，其作用，是声明该变量是一个已在后面定义过的外部变量，仅仅是为了“提前”引用该变量而作的“声明”而已。extern 只作声明，不作任何定义。\n\n（我们声明的最终目的是为了提前使用，即在定义之前使用，如果不需要提前使用就没有单独声明的必要，变量是如此，函数也是如此，所以声明不会分配存储空间，只有定义时才会分配存储空间。）\n\n用static来声明一个变量的作用有二：\n\n(1)对于局部变量用static声明，则是为该变量分配的空间在整个程序的执行期内都始终存在。\n\n(2)外部变量用static来声明，则该变量的作用只限于本文件模块。\n\n\n\n\n\n\n\n\n\n我的几点理解：\n\n1.关于变量名，变量名只是一个语法上的概念，编译之后就不存在这个概念了，如果是全局变量，直接编译时就分配内存，变量名直接用地址代替了，如果是局部变量，是在运行时分配内存，堆栈，变量名可以用当前分配的地址代替。总之，想的太深会涉及很多 编译原理的知识。","slug":"变量的声明和定义","published":1,"updated":"2016-10-21T05:51:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu3g002ehb58q8vyxlsj","content":"<p>我们在程序设计中，时时刻刻都用到变量的定义和变量的声明，可有些时候我们对这个概念不是很清楚，知道它是怎么用，但却不知是怎么一会事，下面我就简单的把他们的区别介绍如下：(望我的指点对你受益)</p>\n<p>变量的声明有两种情况：</p>\n<p>1、一种是需要建立存储空间的。例如：int a 在声明的时候就已经建立了存储空间。</p>\n<p>2、另一种是不需要建立存储空间的。 例如：extern int a 其中变量a是在别的文件中定义的。</p>\n<p>前者是“定义性声明（defining declaration）”或者称为“定义（definition）”，而后者是“引用性声明（referncing declaration）”，从广义的角度来讲声明中包含着定义，即定义是声明的一个特例，所以并非所有的声明都是定义，例如：int a 它既是声明，同时又是定义。然而对于 extern a 来讲它只是声明不是定义。一般的情况下我们常常这样叙述，把建立空间的声明称之为“定义”，而把不需要建立存储空间的声明称之为“声明”。很明显我们在这里指的声明是范围比较窄的，即狭义上的声明，也就是说非定义性质的声明，例如：在主函数中：</p>\n<p>int main() {<br>extern int A;<br>//这是个声明而不是定义，声明A是一个已经定义了的外部变量<br>//注意：声明外部变量时可以把变量类型去掉如：extern A;<br>dosth(); //执行函数<br>}<br>int A; //是定义，定义了A为整型的外部变量<br>外部变量的“定义”与外部变量的“声明”是不相同的,外部变量的定义只能有一次，它的位置是在所有函数之外，而同一个文件中的外部变量声明可以是多次的，它可以在函数之内(哪个函数要用就在那个函数中声明)也可以在函数之外(在外部变量的定义点之前)。系统会根据外部变量的定义(而不是根据外部变量的声明)分配存储空间的。<br>对于外部变量来讲，初始化只能是在“定义”中进行,而不是在“声明”中。所谓的“声明”，其作用，是声明该变量是一个已在后面定义过的外部变量，仅仅是为了“提前”引用该变量而作的“声明”而已。extern 只作声明，不作任何定义。</p>\n<p>（我们声明的最终目的是为了提前使用，即在定义之前使用，如果不需要提前使用就没有单独声明的必要，变量是如此，函数也是如此，所以声明不会分配存储空间，只有定义时才会分配存储空间。）</p>\n<p>用static来声明一个变量的作用有二：</p>\n<p>(1)对于局部变量用static声明，则是为该变量分配的空间在整个程序的执行期内都始终存在。</p>\n<p>(2)外部变量用static来声明，则该变量的作用只限于本文件模块。</p>\n<p>我的几点理解：</p>\n<p>1.关于变量名，变量名只是一个语法上的概念，编译之后就不存在这个概念了，如果是全局变量，直接编译时就分配内存，变量名直接用地址代替了，如果是局部变量，是在运行时分配内存，堆栈，变量名可以用当前分配的地址代替。总之，想的太深会涉及很多 编译原理的知识。</p>\n","excerpt":"","more":"<p>我们在程序设计中，时时刻刻都用到变量的定义和变量的声明，可有些时候我们对这个概念不是很清楚，知道它是怎么用，但却不知是怎么一会事，下面我就简单的把他们的区别介绍如下：(望我的指点对你受益)</p>\n<p>变量的声明有两种情况：</p>\n<p>1、一种是需要建立存储空间的。例如：int a 在声明的时候就已经建立了存储空间。</p>\n<p>2、另一种是不需要建立存储空间的。 例如：extern int a 其中变量a是在别的文件中定义的。</p>\n<p>前者是“定义性声明（defining declaration）”或者称为“定义（definition）”，而后者是“引用性声明（referncing declaration）”，从广义的角度来讲声明中包含着定义，即定义是声明的一个特例，所以并非所有的声明都是定义，例如：int a 它既是声明，同时又是定义。然而对于 extern a 来讲它只是声明不是定义。一般的情况下我们常常这样叙述，把建立空间的声明称之为“定义”，而把不需要建立存储空间的声明称之为“声明”。很明显我们在这里指的声明是范围比较窄的，即狭义上的声明，也就是说非定义性质的声明，例如：在主函数中：</p>\n<p>int main() {<br>extern int A;<br>//这是个声明而不是定义，声明A是一个已经定义了的外部变量<br>//注意：声明外部变量时可以把变量类型去掉如：extern A;<br>dosth(); //执行函数<br>}<br>int A; //是定义，定义了A为整型的外部变量<br>外部变量的“定义”与外部变量的“声明”是不相同的,外部变量的定义只能有一次，它的位置是在所有函数之外，而同一个文件中的外部变量声明可以是多次的，它可以在函数之内(哪个函数要用就在那个函数中声明)也可以在函数之外(在外部变量的定义点之前)。系统会根据外部变量的定义(而不是根据外部变量的声明)分配存储空间的。<br>对于外部变量来讲，初始化只能是在“定义”中进行,而不是在“声明”中。所谓的“声明”，其作用，是声明该变量是一个已在后面定义过的外部变量，仅仅是为了“提前”引用该变量而作的“声明”而已。extern 只作声明，不作任何定义。</p>\n<p>（我们声明的最终目的是为了提前使用，即在定义之前使用，如果不需要提前使用就没有单独声明的必要，变量是如此，函数也是如此，所以声明不会分配存储空间，只有定义时才会分配存储空间。）</p>\n<p>用static来声明一个变量的作用有二：</p>\n<p>(1)对于局部变量用static声明，则是为该变量分配的空间在整个程序的执行期内都始终存在。</p>\n<p>(2)外部变量用static来声明，则该变量的作用只限于本文件模块。</p>\n<p>我的几点理解：</p>\n<p>1.关于变量名，变量名只是一个语法上的概念，编译之后就不存在这个概念了，如果是全局变量，直接编译时就分配内存，变量名直接用地址代替了，如果是局部变量，是在运行时分配内存，堆栈，变量名可以用当前分配的地址代替。总之，想的太深会涉及很多 编译原理的知识。</p>\n"},{"title":"图片像素和分辨率的一些知识","date":"2017-01-01T13:29:14.000Z","_content":"* 像素：实际上就是显示器上的一个一个点，可以把显示器想象成一个个坑（矩阵），由照片上的信息将它填满。\n* 分辨率：本来是用来描述单位长度的像素点的。用PPI或者DPI更准确。\n但是现在一般都混用，一般用长宽的像素点个数来表示。\n* 屏幕分辨率：1280p*720p指的就是长有1280个像素点，宽有720个像素点，一张1280 *720照片就可以填满屏幕，更大就需要滚轮了。\n* 照片分辨率：1280p*720p,指的就是这张照片长有1280个像素点，宽有720个像素点\n* 照片如何显示: 照片的尺寸=照片的像素/显示器的ppi\n* 照片放大：本来10英寸，抢先拉大到20，那么显示器的有些像素点就填不满，所以就不清楚了。\n","source":"_posts/图片像素和分辨率的一些知识.md","raw":"---\ntitle: 图片像素和分辨率的一些知识\ndate: 2017-01-01 21:29:14\ntags:  \n  - 分辨率\n  - 像素\ncategories: 其他\n---\n* 像素：实际上就是显示器上的一个一个点，可以把显示器想象成一个个坑（矩阵），由照片上的信息将它填满。\n* 分辨率：本来是用来描述单位长度的像素点的。用PPI或者DPI更准确。\n但是现在一般都混用，一般用长宽的像素点个数来表示。\n* 屏幕分辨率：1280p*720p指的就是长有1280个像素点，宽有720个像素点，一张1280 *720照片就可以填满屏幕，更大就需要滚轮了。\n* 照片分辨率：1280p*720p,指的就是这张照片长有1280个像素点，宽有720个像素点\n* 照片如何显示: 照片的尺寸=照片的像素/显示器的ppi\n* 照片放大：本来10英寸，抢先拉大到20，那么显示器的有些像素点就填不满，所以就不清楚了。\n","slug":"图片像素和分辨率的一些知识","published":1,"updated":"2017-01-01T14:11:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu3i002ghb585pmye5rh","content":"<ul>\n<li>像素：实际上就是显示器上的一个一个点，可以把显示器想象成一个个坑（矩阵），由照片上的信息将它填满。</li>\n<li>分辨率：本来是用来描述单位长度的像素点的。用PPI或者DPI更准确。<br>但是现在一般都混用，一般用长宽的像素点个数来表示。</li>\n<li>屏幕分辨率：1280p<em>720p指的就是长有1280个像素点，宽有720个像素点，一张1280 </em>720照片就可以填满屏幕，更大就需要滚轮了。</li>\n<li>照片分辨率：1280p*720p,指的就是这张照片长有1280个像素点，宽有720个像素点</li>\n<li>照片如何显示: 照片的尺寸=照片的像素/显示器的ppi</li>\n<li>照片放大：本来10英寸，抢先拉大到20，那么显示器的有些像素点就填不满，所以就不清楚了。</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>像素：实际上就是显示器上的一个一个点，可以把显示器想象成一个个坑（矩阵），由照片上的信息将它填满。</li>\n<li>分辨率：本来是用来描述单位长度的像素点的。用PPI或者DPI更准确。<br>但是现在一般都混用，一般用长宽的像素点个数来表示。</li>\n<li>屏幕分辨率：1280p<em>720p指的就是长有1280个像素点，宽有720个像素点，一张1280 </em>720照片就可以填满屏幕，更大就需要滚轮了。</li>\n<li>照片分辨率：1280p*720p,指的就是这张照片长有1280个像素点，宽有720个像素点</li>\n<li>照片如何显示: 照片的尺寸=照片的像素/显示器的ppi</li>\n<li>照片放大：本来10英寸，抢先拉大到20，那么显示器的有些像素点就填不满，所以就不清楚了。</li>\n</ul>\n"},{"title":"尝试用AE做年会视频","date":"2017-01-01T13:02:11.000Z","_content":"最近需要帮组里的年会做个视频，需要用到AE，之前完全没有接触过，前前后后做了一个星期，最终通过套模板+学习教程也算是交差了。现在小小总结一下，以后可能也用的到。\n\n* AE的基本单位是合成，所以最好把每个模块都做成合成的形式。\n* 视频的编码和格式：\n\t*  编码:一般指的是压缩的方式，如H.264，MPEG-4等，这个直接影响视频的大小。视频先编码，播放的时候再由相应的解码器来解码。我做了个实验，将做好的视频再用tar等方式压缩大小不变，因为已经压缩过了。\n\t*  格式：如mov,avi等，这个值得是视频的打包方式，因为视频一般还包括音频，等其他信息，这个格式值得就是视频的组织方式。\n* 输出格式：AE渲染的视频都非常大。这里可以调小的话一般可以选择：\n\t* H.264/MPEG4,而不是无损\n\t* 调节尺寸，可以选择720p等，一般不建议，因为这样放到显示器上无法铺满屏幕,现在屏幕的分辨率都很高了。\n* 快捷键\n\t* command+shift+d 切割视频\n\t* command+x   删除\n\t*  command+i 插入素材\n\t*  command+k 修改时长\n\t*  右键->time stretch: 快进放慢\n\t*  左下角三个键前两个点灭： 调节时间轴面板\n","source":"_posts/尝试用AE做年会视频.md","raw":"---\ntitle: 尝试用AE做年会视频\ndate: 2017-01-01 21:02:11\ntags:\n  - AE\ncategories: 其他\n---\n最近需要帮组里的年会做个视频，需要用到AE，之前完全没有接触过，前前后后做了一个星期，最终通过套模板+学习教程也算是交差了。现在小小总结一下，以后可能也用的到。\n\n* AE的基本单位是合成，所以最好把每个模块都做成合成的形式。\n* 视频的编码和格式：\n\t*  编码:一般指的是压缩的方式，如H.264，MPEG-4等，这个直接影响视频的大小。视频先编码，播放的时候再由相应的解码器来解码。我做了个实验，将做好的视频再用tar等方式压缩大小不变，因为已经压缩过了。\n\t*  格式：如mov,avi等，这个值得是视频的打包方式，因为视频一般还包括音频，等其他信息，这个格式值得就是视频的组织方式。\n* 输出格式：AE渲染的视频都非常大。这里可以调小的话一般可以选择：\n\t* H.264/MPEG4,而不是无损\n\t* 调节尺寸，可以选择720p等，一般不建议，因为这样放到显示器上无法铺满屏幕,现在屏幕的分辨率都很高了。\n* 快捷键\n\t* command+shift+d 切割视频\n\t* command+x   删除\n\t*  command+i 插入素材\n\t*  command+k 修改时长\n\t*  右键->time stretch: 快进放慢\n\t*  左下角三个键前两个点灭： 调节时间轴面板\n","slug":"尝试用AE做年会视频","published":1,"updated":"2017-01-01T14:08:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu3k002khb58sqgni7ru","content":"<p>最近需要帮组里的年会做个视频，需要用到AE，之前完全没有接触过，前前后后做了一个星期，最终通过套模板+学习教程也算是交差了。现在小小总结一下，以后可能也用的到。</p>\n<ul>\n<li>AE的基本单位是合成，所以最好把每个模块都做成合成的形式。</li>\n<li>视频的编码和格式：<ul>\n<li>编码:一般指的是压缩的方式，如H.264，MPEG-4等，这个直接影响视频的大小。视频先编码，播放的时候再由相应的解码器来解码。我做了个实验，将做好的视频再用tar等方式压缩大小不变，因为已经压缩过了。</li>\n<li>格式：如mov,avi等，这个值得是视频的打包方式，因为视频一般还包括音频，等其他信息，这个格式值得就是视频的组织方式。</li>\n</ul>\n</li>\n<li>输出格式：AE渲染的视频都非常大。这里可以调小的话一般可以选择：<ul>\n<li>H.264/MPEG4,而不是无损</li>\n<li>调节尺寸，可以选择720p等，一般不建议，因为这样放到显示器上无法铺满屏幕,现在屏幕的分辨率都很高了。</li>\n</ul>\n</li>\n<li>快捷键<ul>\n<li>command+shift+d 切割视频</li>\n<li>command+x   删除</li>\n<li>command+i 插入素材</li>\n<li>command+k 修改时长</li>\n<li>右键-&gt;time stretch: 快进放慢</li>\n<li>左下角三个键前两个点灭： 调节时间轴面板</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<p>最近需要帮组里的年会做个视频，需要用到AE，之前完全没有接触过，前前后后做了一个星期，最终通过套模板+学习教程也算是交差了。现在小小总结一下，以后可能也用的到。</p>\n<ul>\n<li>AE的基本单位是合成，所以最好把每个模块都做成合成的形式。</li>\n<li>视频的编码和格式：<ul>\n<li>编码:一般指的是压缩的方式，如H.264，MPEG-4等，这个直接影响视频的大小。视频先编码，播放的时候再由相应的解码器来解码。我做了个实验，将做好的视频再用tar等方式压缩大小不变，因为已经压缩过了。</li>\n<li>格式：如mov,avi等，这个值得是视频的打包方式，因为视频一般还包括音频，等其他信息，这个格式值得就是视频的组织方式。</li>\n</ul>\n</li>\n<li>输出格式：AE渲染的视频都非常大。这里可以调小的话一般可以选择：<ul>\n<li>H.264/MPEG4,而不是无损</li>\n<li>调节尺寸，可以选择720p等，一般不建议，因为这样放到显示器上无法铺满屏幕,现在屏幕的分辨率都很高了。</li>\n</ul>\n</li>\n<li>快捷键<ul>\n<li>command+shift+d 切割视频</li>\n<li>command+x   删除</li>\n<li>command+i 插入素材</li>\n<li>command+k 修改时长</li>\n<li>右键-&gt;time stretch: 快进放慢</li>\n<li>左下角三个键前两个点灭： 调节时间轴面板</li>\n</ul>\n</li>\n</ul>\n"},{"title":"并行，并发和锁","date":"2016-10-20T12:15:25.000Z","_content":"\n\n并行：多个处理器，从硬件角度真正意义的同时进行  \n多线程：只是逻辑上的并行，同一时刻还是只有一个线程发生  \n并发：并行和多线程都叫并发\n\n关于锁：\n不管并发并行，只要存在共享内存，就要考虑加锁的问题。\n\n锁的实质：都是通过阻塞线程实现的(一个线程申请锁未释放，另一个锁再申请就会线程就会阻塞)，区别就是这个锁作用的范围，是否多个进程可以共享这个锁。\n\n几种锁的区别:（都是阻塞线程）   \n\nsemphore:信号量，多个进程之间也可以用，多用于共享内存 \n   \nmutex: 互斥锁，多个进程之间不能用，阻塞的，由操作系统唤醒。\n   \n自旋锁：和互斥锁相似，区别就是不是阻塞的，不是休眠然后被操作系统唤醒，而是自己占用cpu，一直查询锁是否被释放   \n\ndpdk自带的读写锁：\nrte_write_lock:  该锁被申请后，其他线程不能读也不能写\nrte_read_lock:  该锁被申请后，其他线程不能写\n写时独占，读时共享  => 写的时候加写的锁，读的时候加读的锁。\n\n\n\n","source":"_posts/并行，并发和锁.md","raw":"---\ntitle: 并行，并发和锁\ndate: 2016-10-20 20:15:25\ntags: \n  - 多线程\n  - 锁\n  - 并发\ncategories: 操作系统\n---\n\n\n并行：多个处理器，从硬件角度真正意义的同时进行  \n多线程：只是逻辑上的并行，同一时刻还是只有一个线程发生  \n并发：并行和多线程都叫并发\n\n关于锁：\n不管并发并行，只要存在共享内存，就要考虑加锁的问题。\n\n锁的实质：都是通过阻塞线程实现的(一个线程申请锁未释放，另一个锁再申请就会线程就会阻塞)，区别就是这个锁作用的范围，是否多个进程可以共享这个锁。\n\n几种锁的区别:（都是阻塞线程）   \n\nsemphore:信号量，多个进程之间也可以用，多用于共享内存 \n   \nmutex: 互斥锁，多个进程之间不能用，阻塞的，由操作系统唤醒。\n   \n自旋锁：和互斥锁相似，区别就是不是阻塞的，不是休眠然后被操作系统唤醒，而是自己占用cpu，一直查询锁是否被释放   \n\ndpdk自带的读写锁：\nrte_write_lock:  该锁被申请后，其他线程不能读也不能写\nrte_read_lock:  该锁被申请后，其他线程不能写\n写时独占，读时共享  => 写的时候加写的锁，读的时候加读的锁。\n\n\n\n","slug":"并行，并发和锁","published":1,"updated":"2016-10-21T05:58:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu3l002mhb581s8gob80","content":"<p>并行：多个处理器，从硬件角度真正意义的同时进行<br>多线程：只是逻辑上的并行，同一时刻还是只有一个线程发生<br>并发：并行和多线程都叫并发</p>\n<p>关于锁：<br>不管并发并行，只要存在共享内存，就要考虑加锁的问题。</p>\n<p>锁的实质：都是通过阻塞线程实现的(一个线程申请锁未释放，另一个锁再申请就会线程就会阻塞)，区别就是这个锁作用的范围，是否多个进程可以共享这个锁。</p>\n<p>几种锁的区别:（都是阻塞线程）   </p>\n<p>semphore:信号量，多个进程之间也可以用，多用于共享内存 </p>\n<p>mutex: 互斥锁，多个进程之间不能用，阻塞的，由操作系统唤醒。</p>\n<p>自旋锁：和互斥锁相似，区别就是不是阻塞的，不是休眠然后被操作系统唤醒，而是自己占用cpu，一直查询锁是否被释放   </p>\n<p>dpdk自带的读写锁：<br>rte_write_lock:  该锁被申请后，其他线程不能读也不能写<br>rte_read_lock:  该锁被申请后，其他线程不能写<br>写时独占，读时共享  =&gt; 写的时候加写的锁，读的时候加读的锁。</p>\n","excerpt":"","more":"<p>并行：多个处理器，从硬件角度真正意义的同时进行<br>多线程：只是逻辑上的并行，同一时刻还是只有一个线程发生<br>并发：并行和多线程都叫并发</p>\n<p>关于锁：<br>不管并发并行，只要存在共享内存，就要考虑加锁的问题。</p>\n<p>锁的实质：都是通过阻塞线程实现的(一个线程申请锁未释放，另一个锁再申请就会线程就会阻塞)，区别就是这个锁作用的范围，是否多个进程可以共享这个锁。</p>\n<p>几种锁的区别:（都是阻塞线程）   </p>\n<p>semphore:信号量，多个进程之间也可以用，多用于共享内存 </p>\n<p>mutex: 互斥锁，多个进程之间不能用，阻塞的，由操作系统唤醒。</p>\n<p>自旋锁：和互斥锁相似，区别就是不是阻塞的，不是休眠然后被操作系统唤醒，而是自己占用cpu，一直查询锁是否被释放   </p>\n<p>dpdk自带的读写锁：<br>rte_write_lock:  该锁被申请后，其他线程不能读也不能写<br>rte_read_lock:  该锁被申请后，其他线程不能写<br>写时独占，读时共享  =&gt; 写的时候加写的锁，读的时候加读的锁。</p>\n"},{"title":"数据库基础知识","date":"2017-11-11T09:00:18.000Z","_content":"* 基本语句：\\G\n\t* show index from tableName\n\t* alter table tablename add index (columnList)\n\t* show create table tableName\n\t* desc tableNamed\n\t\n\t```\n\tCREATE TABLE animals (\n     id int(20) NOT NULL AUTO_INCREMENT,\n     title vchar(255)  NOT NULL DEFAULT  ‘’,\n     url vchar(255) \tNOT NULL DEFAULT ‘’,\n     pv int(20) NOT NULL DEFAULT 0,\n     comment_number int(20) NOT NULL DEFAULT 0,\n     publish_time timestamp NOT NULL DEFAULT ‘0000-00-00 00:00:00’,\n     create_time timestamp NOT NULL DEFAULT ‘0000-00-00 00:00:00’,\n     update_time timestamp NOT NULL DEFAULT ‘0000-00-00 00:00:00’,\n     PRIMARY KEY (id)\n);\n\t```\n* 事务四大特性：ACID\n\t* Atomicity: 原子性，一个事务里面的所有操作要么全部成功，要么全部失败回滚。\n\t* Consistency: 一致性，一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。\n\t* Isolation: 隔离性，隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。\n\t* Durability: 持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。\n\t* 事务提交： 当一组操作都成功完成时，就可以提交事务。\n* 数据库索引：\n\t* 数据库索引内部包括B+树索引，hash索引，大部分是B+树索引。查询时间是o(logn)的。B+树索引支持多种比较，如>,<,like，hash索引只支持=。\n\t* B+树对中文的索引，之前一直想不清楚，其实中文也是按照utf8编码存储的，本质上也可以看做是一个字符串。\n\t* 索引的类型包括主键索引，唯一索引，聚集索引。\n\t* 索引提高了查询速度，但是增加了空间，同时也提高了增删改的时间，因为需要改索引。","source":"_posts/数据库基础知识.md","raw":"---\ntitle: 数据库基础知识\ndate: 2017-11-11 17:00:18\ntags:\n\t- 数据库\ncategories: 计算机基础\n---\n* 基本语句：\\G\n\t* show index from tableName\n\t* alter table tablename add index (columnList)\n\t* show create table tableName\n\t* desc tableNamed\n\t\n\t```\n\tCREATE TABLE animals (\n     id int(20) NOT NULL AUTO_INCREMENT,\n     title vchar(255)  NOT NULL DEFAULT  ‘’,\n     url vchar(255) \tNOT NULL DEFAULT ‘’,\n     pv int(20) NOT NULL DEFAULT 0,\n     comment_number int(20) NOT NULL DEFAULT 0,\n     publish_time timestamp NOT NULL DEFAULT ‘0000-00-00 00:00:00’,\n     create_time timestamp NOT NULL DEFAULT ‘0000-00-00 00:00:00’,\n     update_time timestamp NOT NULL DEFAULT ‘0000-00-00 00:00:00’,\n     PRIMARY KEY (id)\n);\n\t```\n* 事务四大特性：ACID\n\t* Atomicity: 原子性，一个事务里面的所有操作要么全部成功，要么全部失败回滚。\n\t* Consistency: 一致性，一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。\n\t* Isolation: 隔离性，隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。\n\t* Durability: 持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。\n\t* 事务提交： 当一组操作都成功完成时，就可以提交事务。\n* 数据库索引：\n\t* 数据库索引内部包括B+树索引，hash索引，大部分是B+树索引。查询时间是o(logn)的。B+树索引支持多种比较，如>,<,like，hash索引只支持=。\n\t* B+树对中文的索引，之前一直想不清楚，其实中文也是按照utf8编码存储的，本质上也可以看做是一个字符串。\n\t* 索引的类型包括主键索引，唯一索引，聚集索引。\n\t* 索引提高了查询速度，但是增加了空间，同时也提高了增删改的时间，因为需要改索引。","slug":"数据库基础知识","published":1,"updated":"2018-01-05T13:39:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu3o002qhb58cr8ymb9b","content":"<ul>\n<li><p>基本语句：\\G</p>\n<ul>\n<li>show index from tableName</li>\n<li>alter table tablename add index (columnList)</li>\n<li>show create table tableName</li>\n<li><p>desc tableNamed</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">\tCREATE TABLE animals (</div><div class=\"line\">     id int(20) NOT NULL AUTO_INCREMENT,</div><div class=\"line\">     title vchar(255)  NOT NULL DEFAULT  ‘’,</div><div class=\"line\">     url vchar(255) \tNOT NULL DEFAULT ‘’,</div><div class=\"line\">     pv int(20) NOT NULL DEFAULT 0,</div><div class=\"line\">     comment_number int(20) NOT NULL DEFAULT 0,</div><div class=\"line\">     publish_time timestamp NOT NULL DEFAULT ‘0000-00-00 00:00:00’,</div><div class=\"line\">     create_time timestamp NOT NULL DEFAULT ‘0000-00-00 00:00:00’,</div><div class=\"line\">     update_time timestamp NOT NULL DEFAULT ‘0000-00-00 00:00:00’,</div><div class=\"line\">     PRIMARY KEY (id)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>事务四大特性：ACID</p>\n<ul>\n<li>Atomicity: 原子性，一个事务里面的所有操作要么全部成功，要么全部失败回滚。</li>\n<li>Consistency: 一致性，一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。</li>\n<li>Isolation: 隔离性，隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。</li>\n<li>Durability: 持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</li>\n<li>事务提交： 当一组操作都成功完成时，就可以提交事务。</li>\n</ul>\n</li>\n<li>数据库索引：<ul>\n<li>数据库索引内部包括B+树索引，hash索引，大部分是B+树索引。查询时间是o(logn)的。B+树索引支持多种比较，如&gt;,&lt;,like，hash索引只支持=。</li>\n<li>B+树对中文的索引，之前一直想不清楚，其实中文也是按照utf8编码存储的，本质上也可以看做是一个字符串。</li>\n<li>索引的类型包括主键索引，唯一索引，聚集索引。</li>\n<li>索引提高了查询速度，但是增加了空间，同时也提高了增删改的时间，因为需要改索引。</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li><p>基本语句：\\G</p>\n<ul>\n<li>show index from tableName</li>\n<li>alter table tablename add index (columnList)</li>\n<li>show create table tableName</li>\n<li><p>desc tableNamed</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">\tCREATE TABLE animals (</div><div class=\"line\">     id int(20) NOT NULL AUTO_INCREMENT,</div><div class=\"line\">     title vchar(255)  NOT NULL DEFAULT  ‘’,</div><div class=\"line\">     url vchar(255) \tNOT NULL DEFAULT ‘’,</div><div class=\"line\">     pv int(20) NOT NULL DEFAULT 0,</div><div class=\"line\">     comment_number int(20) NOT NULL DEFAULT 0,</div><div class=\"line\">     publish_time timestamp NOT NULL DEFAULT ‘0000-00-00 00:00:00’,</div><div class=\"line\">     create_time timestamp NOT NULL DEFAULT ‘0000-00-00 00:00:00’,</div><div class=\"line\">     update_time timestamp NOT NULL DEFAULT ‘0000-00-00 00:00:00’,</div><div class=\"line\">     PRIMARY KEY (id)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>事务四大特性：ACID</p>\n<ul>\n<li>Atomicity: 原子性，一个事务里面的所有操作要么全部成功，要么全部失败回滚。</li>\n<li>Consistency: 一致性，一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。</li>\n<li>Isolation: 隔离性，隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。</li>\n<li>Durability: 持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</li>\n<li>事务提交： 当一组操作都成功完成时，就可以提交事务。</li>\n</ul>\n</li>\n<li>数据库索引：<ul>\n<li>数据库索引内部包括B+树索引，hash索引，大部分是B+树索引。查询时间是o(logn)的。B+树索引支持多种比较，如&gt;,&lt;,like，hash索引只支持=。</li>\n<li>B+树对中文的索引，之前一直想不清楚，其实中文也是按照utf8编码存储的，本质上也可以看做是一个字符串。</li>\n<li>索引的类型包括主键索引，唯一索引，聚集索引。</li>\n<li>索引提高了查询速度，但是增加了空间，同时也提高了增删改的时间，因为需要改索引。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"编译过程","date":"2015-10-10T12:39:51.000Z","_content":"我的理解：\n \n预处理：处理带#的，如将include的文件内容全部包含进来，处理end if 等.\n\n编译：词法分析，生成汇编代码，编译后没有变量名概念，编译同时对代码进行优化。\n\n汇编：将汇编代码生成机器代码。\n\n连接：现在一个工程比如有很多文件，分开编译后会形成很多个机器代码文件，链接就是就是将这些文件组合起来。分为静态，动态。\n静态链接(库)：比如把函数调用部分换成对应的机器代码，将很多的机器代码直接拼在一起形成一个exe文件。\n动态链接（库）：比如把函数调用部分换成对应的机器代码的地址，运行的时候在去加载对应的机器代码。这些机器代码都存在.dll 文件中。\n\n\n机器代码：    Cpu能够直接执行的指令。与机器有关，理论上机器换了，可能机器代码就不能执行了。但是现在 的cpu，intel,AMD,都用的是相同的指令集。所以由于硬件的\n原因基本不存在了。剩下的就是操作系统的问题。\n\n\nc,c++等都不是跨平台的，exe 文件不能在linux 下运行：\n原因：  1.文件格式不同, exe文件不止有机器指令等信息，还有其他内容\n             2.可能要加载系统的dll文件。\n\n\n但是可以说c.c++是源代码跨平台的，因为不同平台，不同的编译器之后，是同样的结果。（使用标准库的情况下），如果使用MFC等windows  api的话，代码移植到linux下就不行了。因为缺少对应的系统类库的支持。\n但是也可以说c++ 不是跨平台的，比如不同的操作系统，int 的字节长度就不同。\n","source":"_posts/编译过程.md","raw":"---\ntitle: 编译过程\ndate: 2015-10-10 20:39:51\ntags: \n  - 编译原理\ncategories: 计算机基础\n---\n我的理解：\n \n预处理：处理带#的，如将include的文件内容全部包含进来，处理end if 等.\n\n编译：词法分析，生成汇编代码，编译后没有变量名概念，编译同时对代码进行优化。\n\n汇编：将汇编代码生成机器代码。\n\n连接：现在一个工程比如有很多文件，分开编译后会形成很多个机器代码文件，链接就是就是将这些文件组合起来。分为静态，动态。\n静态链接(库)：比如把函数调用部分换成对应的机器代码，将很多的机器代码直接拼在一起形成一个exe文件。\n动态链接（库）：比如把函数调用部分换成对应的机器代码的地址，运行的时候在去加载对应的机器代码。这些机器代码都存在.dll 文件中。\n\n\n机器代码：    Cpu能够直接执行的指令。与机器有关，理论上机器换了，可能机器代码就不能执行了。但是现在 的cpu，intel,AMD,都用的是相同的指令集。所以由于硬件的\n原因基本不存在了。剩下的就是操作系统的问题。\n\n\nc,c++等都不是跨平台的，exe 文件不能在linux 下运行：\n原因：  1.文件格式不同, exe文件不止有机器指令等信息，还有其他内容\n             2.可能要加载系统的dll文件。\n\n\n但是可以说c.c++是源代码跨平台的，因为不同平台，不同的编译器之后，是同样的结果。（使用标准库的情况下），如果使用MFC等windows  api的话，代码移植到linux下就不行了。因为缺少对应的系统类库的支持。\n但是也可以说c++ 不是跨平台的，比如不同的操作系统，int 的字节长度就不同。\n","slug":"编译过程","published":1,"updated":"2016-11-03T10:34:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu3q002thb58kix93yuw","content":"<p>我的理解：</p>\n<p>预处理：处理带#的，如将include的文件内容全部包含进来，处理end if 等.</p>\n<p>编译：词法分析，生成汇编代码，编译后没有变量名概念，编译同时对代码进行优化。</p>\n<p>汇编：将汇编代码生成机器代码。</p>\n<p>连接：现在一个工程比如有很多文件，分开编译后会形成很多个机器代码文件，链接就是就是将这些文件组合起来。分为静态，动态。<br>静态链接(库)：比如把函数调用部分换成对应的机器代码，将很多的机器代码直接拼在一起形成一个exe文件。<br>动态链接（库）：比如把函数调用部分换成对应的机器代码的地址，运行的时候在去加载对应的机器代码。这些机器代码都存在.dll 文件中。</p>\n<p>机器代码：    Cpu能够直接执行的指令。与机器有关，理论上机器换了，可能机器代码就不能执行了。但是现在 的cpu，intel,AMD,都用的是相同的指令集。所以由于硬件的<br>原因基本不存在了。剩下的就是操作系统的问题。</p>\n<p>c,c++等都不是跨平台的，exe 文件不能在linux 下运行：<br>原因：  1.文件格式不同, exe文件不止有机器指令等信息，还有其他内容<br>             2.可能要加载系统的dll文件。</p>\n<p>但是可以说c.c++是源代码跨平台的，因为不同平台，不同的编译器之后，是同样的结果。（使用标准库的情况下），如果使用MFC等windows  api的话，代码移植到linux下就不行了。因为缺少对应的系统类库的支持。<br>但是也可以说c++ 不是跨平台的，比如不同的操作系统，int 的字节长度就不同。</p>\n","excerpt":"","more":"<p>我的理解：</p>\n<p>预处理：处理带#的，如将include的文件内容全部包含进来，处理end if 等.</p>\n<p>编译：词法分析，生成汇编代码，编译后没有变量名概念，编译同时对代码进行优化。</p>\n<p>汇编：将汇编代码生成机器代码。</p>\n<p>连接：现在一个工程比如有很多文件，分开编译后会形成很多个机器代码文件，链接就是就是将这些文件组合起来。分为静态，动态。<br>静态链接(库)：比如把函数调用部分换成对应的机器代码，将很多的机器代码直接拼在一起形成一个exe文件。<br>动态链接（库）：比如把函数调用部分换成对应的机器代码的地址，运行的时候在去加载对应的机器代码。这些机器代码都存在.dll 文件中。</p>\n<p>机器代码：    Cpu能够直接执行的指令。与机器有关，理论上机器换了，可能机器代码就不能执行了。但是现在 的cpu，intel,AMD,都用的是相同的指令集。所以由于硬件的<br>原因基本不存在了。剩下的就是操作系统的问题。</p>\n<p>c,c++等都不是跨平台的，exe 文件不能在linux 下运行：<br>原因：  1.文件格式不同, exe文件不止有机器指令等信息，还有其他内容<br>             2.可能要加载系统的dll文件。</p>\n<p>但是可以说c.c++是源代码跨平台的，因为不同平台，不同的编译器之后，是同样的结果。（使用标准库的情况下），如果使用MFC等windows  api的话，代码移植到linux下就不行了。因为缺少对应的系统类库的支持。<br>但是也可以说c++ 不是跨平台的，比如不同的操作系统，int 的字节长度就不同。</p>\n"},{"title":"百度内容生态质量部测试实习面试","date":"2017-03-01T07:19:21.000Z","_content":"* 事情是这样的，一直以来都想找份公司的实习，错过了大三的实习，保研之后又到实验室实习，所以完美错过各种实习，大四实习机会越来越少，基本上都不招大四的学生，所以大规模春招我投不了，那是为了校招提前招的。\n* 到了三月我真的急了，写了个爬虫，爬取北邮人的招聘信息，随便投了几个公司。其中只有百度回我了，而且是中午12点投的，下午3点多，我还在听师兄们答辩，hr就打电话问我明天能不能来面试，我说可以。当时我的心里是懵逼的，压根没准备啊，赶紧回来看书，因为我在简历上写了很多网络编程的东西，什么IO复用，多线程，epoll啊，其实我压根不熟悉啊，所以睡觉之前一直在恶补《linux高性能服务器开发》，而且很多算法题都没做啊，所以很慌，一直到去的车上还在看数据库（数据库忘光了啊）。\n* 然后第二天去面试，我10点多到的，去了之后没什么人，在前台登记后，10点半的时候，有个姐姐过来喊我去面试，我跟着她去了个会议室，一对一面试。\n* 一面\n\t* 开始让我自我介绍，我简单说了一下，然后问我简历上的东西，让我介绍了一下逃逸系统，这个是最近正在做的，给她讲了一下，感觉她大概觉得还不错，是自己做的。\n\t* 然后问我用过python吗，我说自学过，只会写简单的爬虫，她说我看你带了电脑，不如看下你的爬虫啊，我就给她看了爬实习信息的爬虫，她看了下，没说什么。\n\t* 然后问我会不会linux命令，我说会一些网络相关的，她问我知不知道awk,sed，我说不知道，说了些网络的，nc，ps，netstat，感觉她也不懂。\n\t* 然后她说看你写了捕包，你都怎么捕包啊，我说windows下用wireshark，她说你这不是mac系统吗，我说mac下我一般用tcpdump，tcpdump也是用pcap实现的，她好像很满意。\n\t* 然后问我道题，很多字符串存在一个很大的文件中，怎么提高检索速度，我说用Hash表，她说可以，然后问还有呢，我说，将字符串计算md5，然后再Hash。好像她还是不满意，提醒我说，如果某个词的出现频率很高呢，我说那按照出现频率排序，然后从出现频率高的开始找。这个后来想想不对，但是她也没问了。\n\t* 然后问我测试的话，百度搜索输入框应该如何测试呢，我说可以输入敏感词，比如xjp，输入框计算，输入乱码，输入攻击代码等，她说可以，然后问还有吗，我想不出来了，她提醒我还要超过多少字之后，最近新闻的优先放，我补了一句比如百度的优先放在前面，她说不是，我们是根据用户点击量来的，我的内心毫无波动，甚至还有点想笑。后来想想还可以英文，其他语言等。\n\t* 然后她又问了下我从你在百度搜索到返回结果发生了什么，我说了dns解析，http请求等，她好像不满意，问我http回复的是什么东西，我说是html源代码，css，js代码，她说那是怎么显示出你看的效果来的呢，我懂了，然后说这是浏览器渲染解析得到的，然后她就没问了。\n\t* 最后又问了我一道题，说怎么在一个很大的文件中找到出现次数最小的10个数，我想了下，这不是找最小的k个数吗，然后说先预处理，统计每个词出现次数，然后快排，或者大根堆的方法，她说可以，估计她没听懂。然后一面就结束了，我问还有二面吗，她说有，再给我联系。最后她走的时候和我说其实最后一道题用shell命令几行就可以了，我说哦，那shell的原理是什么呢，她说这你就别管了（估计她也不知道），反正别人封装好了，肯定比你的那些方法好。\n* 二面\n\t* 本来想问我项目的，说前面是不是问过了，我说是的，她说那你直接说这个项目最好的地方是什么，不好的地方是什么，我说好在模块化设计，不好在于特定场景下，她也没问了。\n\t* 然后让我写一道题，合并两个有序数组，我说是归并排序的merge操作吗，她说是，我想这太简单了，2分钟就写好了，然后给她讲了一下，她说可以，然后问我你怎么测试你的程序，我说输入为空，数组长度为0，非法输入等，然后她一直问还有吗，因为我是用vector写的，所以根本没有其他的问题，最后实在想不出来了，我说vector也会爆栈，她说还有吗，我说没有了。\n\t* 然后问我怎么交换两个变量，不用额外空间，我说大二数值分析（其实是离散数学）学过用异或来实现，然后给她写了一下，她说还有吗，我想了几分钟，实在想不出来，就说没有了。\n\t* 然后让我测试一下旁边的自动售货机，我说输入假币，买不存在的物品，暴力破坏，她一直问还有吗，我最后都说停电怎么办，灯坏了怎么办，她还问还有吗（难道你叫还有吗）。然后她说你这都是异常情况下，正常情况下呢，我说正常就投入真钱，买存在的物品就可以了啊，然后她没问了。\n\t* 然后她说你做过测试吗，我说没有，之前只是测试过自己的程序，不需要考虑复杂的场景下，她说哦。\n\t* 然后问我如果需求和开发的结果不一样怎么办，我听不懂，她给我解释了半天我才明白，然后我说当然让开发跟着需求走啊。\n\t* 然后问我会php吗，我说不会，然后问我有没有用过服务器,apache，nginx等，我说没有，用过tomcat，她就没问了。\n\t* 然后她说你有什么问题吗，我问了下百度这个地点是做什么的，她说是做百度知道，百度百科和地图方面的，我问那西二旗呢，她说西二旗现在没有业务了，都在百度科技园。然后我又问了下，测试和开发的技能书，她说测试可能技术要求没有那么高，但是你什么都要知道。（跟我差不多）\n\t* 然后她问我去吃饭吗，我说我还要三面吗，她说有，我说那直接面吧，然后她就去联系boss了。\n* 三面\n\t* 三面应该是部门负责人，看起来30多岁，上来先问我多大，哪里人呀，在实验室怎么融入团队的。我以为是聊聊天。\n\t* 然后突然就问我tcp三次握手，为什么不能是两次或者四次，这太简单了，我给她画了三次握手和四次挥手的图。然后说为什么四次挥手，三次握手，她说为什么不能是两次呢，我说这样不能保证连接建立。她说为什么，你说为什么，我想了一下，说如果没有第三次的ack，如果第二次的syn丢了，那么tcp会误认为连接已经建立。她好像很满意。\n\t* 然后让我写socket编程的过程，我给她写了几个，她好像不太懂，还问我哪个是客户端，哪个是服务器。\n\t* 然后她说我们来写道题吧，删除字符串中重复的字符。我想了一下，写了一个，先遍历统计每个字符出现的次数，然后再遍历一遍，次数>0的就加入结果，并将次数记为0,她一开始没懂，一直问我为什么要置为0，可不可以不要，我说不可以，她想了一会才明白（我的锅，其实只要一遍遍历标记一下有没有出现过就行，不用遍历两遍，我的方法比较奇葩）。然后问我结果1000有没有问题，我说没有，她提醒我说字符串，所以最多256位（我的锅，当时脑子懵逼）。然后又说如果不是ascll码呢，我说那就设为输入的长度，她说对。\n\t* 然后她又把题改了，不能用标记数组，字符改为a-z,只给一个int，我想了半天没有想出来，她提醒我说int32位，字幕26位。我说我刚才想到了位图法，没敢说，我说了用每个二进制位表示一个状态，0表示没出现过，1表示出现过，她说思路是对的，那你会位运算吗，我说会，她说那你写试试吧。然后我写出来了。她看了下，还可以。\n\t* 最后问我实习时间，能不能马上来，我说最多两周后，最多8月初，我说实验室还有些东西要交接。她说那你开学后还能来吗，我说不能，因为在雁栖湖上课。她说那你最多只能实习4个多月，熟悉环境就要2-3个月，刚上手就走了。然后我说我最快15号来，她说好吧，走吧，我请你吃饭，然后就和她吃饭去了。我问她我是回去等通知吗，她说我回去再看看前面面试官的评价，你等hr的邮件吧。\n* 人生第一次面试就结束了，最后一面那个算法其实很简单，没回答好，其他还行。就这样吧，等待hr通知，但愿能够通过。\n* 3.3号更新：拿到offer了，效率挺高，两天就给offer了","source":"_posts/百度内容生态质量部测试实习面试.md","raw":"---\ntitle: 百度内容生态质量部测试实习面试\ndate: 2017-03-01 15:19:21\ntags:\n  - 百度\n  - 内容生态质量部\n  - 测试开发\n  - 实习\ncategories: 面试题\n\n---\n* 事情是这样的，一直以来都想找份公司的实习，错过了大三的实习，保研之后又到实验室实习，所以完美错过各种实习，大四实习机会越来越少，基本上都不招大四的学生，所以大规模春招我投不了，那是为了校招提前招的。\n* 到了三月我真的急了，写了个爬虫，爬取北邮人的招聘信息，随便投了几个公司。其中只有百度回我了，而且是中午12点投的，下午3点多，我还在听师兄们答辩，hr就打电话问我明天能不能来面试，我说可以。当时我的心里是懵逼的，压根没准备啊，赶紧回来看书，因为我在简历上写了很多网络编程的东西，什么IO复用，多线程，epoll啊，其实我压根不熟悉啊，所以睡觉之前一直在恶补《linux高性能服务器开发》，而且很多算法题都没做啊，所以很慌，一直到去的车上还在看数据库（数据库忘光了啊）。\n* 然后第二天去面试，我10点多到的，去了之后没什么人，在前台登记后，10点半的时候，有个姐姐过来喊我去面试，我跟着她去了个会议室，一对一面试。\n* 一面\n\t* 开始让我自我介绍，我简单说了一下，然后问我简历上的东西，让我介绍了一下逃逸系统，这个是最近正在做的，给她讲了一下，感觉她大概觉得还不错，是自己做的。\n\t* 然后问我用过python吗，我说自学过，只会写简单的爬虫，她说我看你带了电脑，不如看下你的爬虫啊，我就给她看了爬实习信息的爬虫，她看了下，没说什么。\n\t* 然后问我会不会linux命令，我说会一些网络相关的，她问我知不知道awk,sed，我说不知道，说了些网络的，nc，ps，netstat，感觉她也不懂。\n\t* 然后她说看你写了捕包，你都怎么捕包啊，我说windows下用wireshark，她说你这不是mac系统吗，我说mac下我一般用tcpdump，tcpdump也是用pcap实现的，她好像很满意。\n\t* 然后问我道题，很多字符串存在一个很大的文件中，怎么提高检索速度，我说用Hash表，她说可以，然后问还有呢，我说，将字符串计算md5，然后再Hash。好像她还是不满意，提醒我说，如果某个词的出现频率很高呢，我说那按照出现频率排序，然后从出现频率高的开始找。这个后来想想不对，但是她也没问了。\n\t* 然后问我测试的话，百度搜索输入框应该如何测试呢，我说可以输入敏感词，比如xjp，输入框计算，输入乱码，输入攻击代码等，她说可以，然后问还有吗，我想不出来了，她提醒我还要超过多少字之后，最近新闻的优先放，我补了一句比如百度的优先放在前面，她说不是，我们是根据用户点击量来的，我的内心毫无波动，甚至还有点想笑。后来想想还可以英文，其他语言等。\n\t* 然后她又问了下我从你在百度搜索到返回结果发生了什么，我说了dns解析，http请求等，她好像不满意，问我http回复的是什么东西，我说是html源代码，css，js代码，她说那是怎么显示出你看的效果来的呢，我懂了，然后说这是浏览器渲染解析得到的，然后她就没问了。\n\t* 最后又问了我一道题，说怎么在一个很大的文件中找到出现次数最小的10个数，我想了下，这不是找最小的k个数吗，然后说先预处理，统计每个词出现次数，然后快排，或者大根堆的方法，她说可以，估计她没听懂。然后一面就结束了，我问还有二面吗，她说有，再给我联系。最后她走的时候和我说其实最后一道题用shell命令几行就可以了，我说哦，那shell的原理是什么呢，她说这你就别管了（估计她也不知道），反正别人封装好了，肯定比你的那些方法好。\n* 二面\n\t* 本来想问我项目的，说前面是不是问过了，我说是的，她说那你直接说这个项目最好的地方是什么，不好的地方是什么，我说好在模块化设计，不好在于特定场景下，她也没问了。\n\t* 然后让我写一道题，合并两个有序数组，我说是归并排序的merge操作吗，她说是，我想这太简单了，2分钟就写好了，然后给她讲了一下，她说可以，然后问我你怎么测试你的程序，我说输入为空，数组长度为0，非法输入等，然后她一直问还有吗，因为我是用vector写的，所以根本没有其他的问题，最后实在想不出来了，我说vector也会爆栈，她说还有吗，我说没有了。\n\t* 然后问我怎么交换两个变量，不用额外空间，我说大二数值分析（其实是离散数学）学过用异或来实现，然后给她写了一下，她说还有吗，我想了几分钟，实在想不出来，就说没有了。\n\t* 然后让我测试一下旁边的自动售货机，我说输入假币，买不存在的物品，暴力破坏，她一直问还有吗，我最后都说停电怎么办，灯坏了怎么办，她还问还有吗（难道你叫还有吗）。然后她说你这都是异常情况下，正常情况下呢，我说正常就投入真钱，买存在的物品就可以了啊，然后她没问了。\n\t* 然后她说你做过测试吗，我说没有，之前只是测试过自己的程序，不需要考虑复杂的场景下，她说哦。\n\t* 然后问我如果需求和开发的结果不一样怎么办，我听不懂，她给我解释了半天我才明白，然后我说当然让开发跟着需求走啊。\n\t* 然后问我会php吗，我说不会，然后问我有没有用过服务器,apache，nginx等，我说没有，用过tomcat，她就没问了。\n\t* 然后她说你有什么问题吗，我问了下百度这个地点是做什么的，她说是做百度知道，百度百科和地图方面的，我问那西二旗呢，她说西二旗现在没有业务了，都在百度科技园。然后我又问了下，测试和开发的技能书，她说测试可能技术要求没有那么高，但是你什么都要知道。（跟我差不多）\n\t* 然后她问我去吃饭吗，我说我还要三面吗，她说有，我说那直接面吧，然后她就去联系boss了。\n* 三面\n\t* 三面应该是部门负责人，看起来30多岁，上来先问我多大，哪里人呀，在实验室怎么融入团队的。我以为是聊聊天。\n\t* 然后突然就问我tcp三次握手，为什么不能是两次或者四次，这太简单了，我给她画了三次握手和四次挥手的图。然后说为什么四次挥手，三次握手，她说为什么不能是两次呢，我说这样不能保证连接建立。她说为什么，你说为什么，我想了一下，说如果没有第三次的ack，如果第二次的syn丢了，那么tcp会误认为连接已经建立。她好像很满意。\n\t* 然后让我写socket编程的过程，我给她写了几个，她好像不太懂，还问我哪个是客户端，哪个是服务器。\n\t* 然后她说我们来写道题吧，删除字符串中重复的字符。我想了一下，写了一个，先遍历统计每个字符出现的次数，然后再遍历一遍，次数>0的就加入结果，并将次数记为0,她一开始没懂，一直问我为什么要置为0，可不可以不要，我说不可以，她想了一会才明白（我的锅，其实只要一遍遍历标记一下有没有出现过就行，不用遍历两遍，我的方法比较奇葩）。然后问我结果1000有没有问题，我说没有，她提醒我说字符串，所以最多256位（我的锅，当时脑子懵逼）。然后又说如果不是ascll码呢，我说那就设为输入的长度，她说对。\n\t* 然后她又把题改了，不能用标记数组，字符改为a-z,只给一个int，我想了半天没有想出来，她提醒我说int32位，字幕26位。我说我刚才想到了位图法，没敢说，我说了用每个二进制位表示一个状态，0表示没出现过，1表示出现过，她说思路是对的，那你会位运算吗，我说会，她说那你写试试吧。然后我写出来了。她看了下，还可以。\n\t* 最后问我实习时间，能不能马上来，我说最多两周后，最多8月初，我说实验室还有些东西要交接。她说那你开学后还能来吗，我说不能，因为在雁栖湖上课。她说那你最多只能实习4个多月，熟悉环境就要2-3个月，刚上手就走了。然后我说我最快15号来，她说好吧，走吧，我请你吃饭，然后就和她吃饭去了。我问她我是回去等通知吗，她说我回去再看看前面面试官的评价，你等hr的邮件吧。\n* 人生第一次面试就结束了，最后一面那个算法其实很简单，没回答好，其他还行。就这样吧，等待hr通知，但愿能够通过。\n* 3.3号更新：拿到offer了，效率挺高，两天就给offer了","slug":"百度内容生态质量部测试实习面试","published":1,"updated":"2017-07-11T06:58:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu3u002xhb58zapby1t8","content":"<ul>\n<li>事情是这样的，一直以来都想找份公司的实习，错过了大三的实习，保研之后又到实验室实习，所以完美错过各种实习，大四实习机会越来越少，基本上都不招大四的学生，所以大规模春招我投不了，那是为了校招提前招的。</li>\n<li>到了三月我真的急了，写了个爬虫，爬取北邮人的招聘信息，随便投了几个公司。其中只有百度回我了，而且是中午12点投的，下午3点多，我还在听师兄们答辩，hr就打电话问我明天能不能来面试，我说可以。当时我的心里是懵逼的，压根没准备啊，赶紧回来看书，因为我在简历上写了很多网络编程的东西，什么IO复用，多线程，epoll啊，其实我压根不熟悉啊，所以睡觉之前一直在恶补《linux高性能服务器开发》，而且很多算法题都没做啊，所以很慌，一直到去的车上还在看数据库（数据库忘光了啊）。</li>\n<li>然后第二天去面试，我10点多到的，去了之后没什么人，在前台登记后，10点半的时候，有个姐姐过来喊我去面试，我跟着她去了个会议室，一对一面试。</li>\n<li>一面<ul>\n<li>开始让我自我介绍，我简单说了一下，然后问我简历上的东西，让我介绍了一下逃逸系统，这个是最近正在做的，给她讲了一下，感觉她大概觉得还不错，是自己做的。</li>\n<li>然后问我用过python吗，我说自学过，只会写简单的爬虫，她说我看你带了电脑，不如看下你的爬虫啊，我就给她看了爬实习信息的爬虫，她看了下，没说什么。</li>\n<li>然后问我会不会linux命令，我说会一些网络相关的，她问我知不知道awk,sed，我说不知道，说了些网络的，nc，ps，netstat，感觉她也不懂。</li>\n<li>然后她说看你写了捕包，你都怎么捕包啊，我说windows下用wireshark，她说你这不是mac系统吗，我说mac下我一般用tcpdump，tcpdump也是用pcap实现的，她好像很满意。</li>\n<li>然后问我道题，很多字符串存在一个很大的文件中，怎么提高检索速度，我说用Hash表，她说可以，然后问还有呢，我说，将字符串计算md5，然后再Hash。好像她还是不满意，提醒我说，如果某个词的出现频率很高呢，我说那按照出现频率排序，然后从出现频率高的开始找。这个后来想想不对，但是她也没问了。</li>\n<li>然后问我测试的话，百度搜索输入框应该如何测试呢，我说可以输入敏感词，比如xjp，输入框计算，输入乱码，输入攻击代码等，她说可以，然后问还有吗，我想不出来了，她提醒我还要超过多少字之后，最近新闻的优先放，我补了一句比如百度的优先放在前面，她说不是，我们是根据用户点击量来的，我的内心毫无波动，甚至还有点想笑。后来想想还可以英文，其他语言等。</li>\n<li>然后她又问了下我从你在百度搜索到返回结果发生了什么，我说了dns解析，http请求等，她好像不满意，问我http回复的是什么东西，我说是html源代码，css，js代码，她说那是怎么显示出你看的效果来的呢，我懂了，然后说这是浏览器渲染解析得到的，然后她就没问了。</li>\n<li>最后又问了我一道题，说怎么在一个很大的文件中找到出现次数最小的10个数，我想了下，这不是找最小的k个数吗，然后说先预处理，统计每个词出现次数，然后快排，或者大根堆的方法，她说可以，估计她没听懂。然后一面就结束了，我问还有二面吗，她说有，再给我联系。最后她走的时候和我说其实最后一道题用shell命令几行就可以了，我说哦，那shell的原理是什么呢，她说这你就别管了（估计她也不知道），反正别人封装好了，肯定比你的那些方法好。</li>\n</ul>\n</li>\n<li>二面<ul>\n<li>本来想问我项目的，说前面是不是问过了，我说是的，她说那你直接说这个项目最好的地方是什么，不好的地方是什么，我说好在模块化设计，不好在于特定场景下，她也没问了。</li>\n<li>然后让我写一道题，合并两个有序数组，我说是归并排序的merge操作吗，她说是，我想这太简单了，2分钟就写好了，然后给她讲了一下，她说可以，然后问我你怎么测试你的程序，我说输入为空，数组长度为0，非法输入等，然后她一直问还有吗，因为我是用vector写的，所以根本没有其他的问题，最后实在想不出来了，我说vector也会爆栈，她说还有吗，我说没有了。</li>\n<li>然后问我怎么交换两个变量，不用额外空间，我说大二数值分析（其实是离散数学）学过用异或来实现，然后给她写了一下，她说还有吗，我想了几分钟，实在想不出来，就说没有了。</li>\n<li>然后让我测试一下旁边的自动售货机，我说输入假币，买不存在的物品，暴力破坏，她一直问还有吗，我最后都说停电怎么办，灯坏了怎么办，她还问还有吗（难道你叫还有吗）。然后她说你这都是异常情况下，正常情况下呢，我说正常就投入真钱，买存在的物品就可以了啊，然后她没问了。</li>\n<li>然后她说你做过测试吗，我说没有，之前只是测试过自己的程序，不需要考虑复杂的场景下，她说哦。</li>\n<li>然后问我如果需求和开发的结果不一样怎么办，我听不懂，她给我解释了半天我才明白，然后我说当然让开发跟着需求走啊。</li>\n<li>然后问我会php吗，我说不会，然后问我有没有用过服务器,apache，nginx等，我说没有，用过tomcat，她就没问了。</li>\n<li>然后她说你有什么问题吗，我问了下百度这个地点是做什么的，她说是做百度知道，百度百科和地图方面的，我问那西二旗呢，她说西二旗现在没有业务了，都在百度科技园。然后我又问了下，测试和开发的技能书，她说测试可能技术要求没有那么高，但是你什么都要知道。（跟我差不多）</li>\n<li>然后她问我去吃饭吗，我说我还要三面吗，她说有，我说那直接面吧，然后她就去联系boss了。</li>\n</ul>\n</li>\n<li>三面<ul>\n<li>三面应该是部门负责人，看起来30多岁，上来先问我多大，哪里人呀，在实验室怎么融入团队的。我以为是聊聊天。</li>\n<li>然后突然就问我tcp三次握手，为什么不能是两次或者四次，这太简单了，我给她画了三次握手和四次挥手的图。然后说为什么四次挥手，三次握手，她说为什么不能是两次呢，我说这样不能保证连接建立。她说为什么，你说为什么，我想了一下，说如果没有第三次的ack，如果第二次的syn丢了，那么tcp会误认为连接已经建立。她好像很满意。</li>\n<li>然后让我写socket编程的过程，我给她写了几个，她好像不太懂，还问我哪个是客户端，哪个是服务器。</li>\n<li>然后她说我们来写道题吧，删除字符串中重复的字符。我想了一下，写了一个，先遍历统计每个字符出现的次数，然后再遍历一遍，次数&gt;0的就加入结果，并将次数记为0,她一开始没懂，一直问我为什么要置为0，可不可以不要，我说不可以，她想了一会才明白（我的锅，其实只要一遍遍历标记一下有没有出现过就行，不用遍历两遍，我的方法比较奇葩）。然后问我结果1000有没有问题，我说没有，她提醒我说字符串，所以最多256位（我的锅，当时脑子懵逼）。然后又说如果不是ascll码呢，我说那就设为输入的长度，她说对。</li>\n<li>然后她又把题改了，不能用标记数组，字符改为a-z,只给一个int，我想了半天没有想出来，她提醒我说int32位，字幕26位。我说我刚才想到了位图法，没敢说，我说了用每个二进制位表示一个状态，0表示没出现过，1表示出现过，她说思路是对的，那你会位运算吗，我说会，她说那你写试试吧。然后我写出来了。她看了下，还可以。</li>\n<li>最后问我实习时间，能不能马上来，我说最多两周后，最多8月初，我说实验室还有些东西要交接。她说那你开学后还能来吗，我说不能，因为在雁栖湖上课。她说那你最多只能实习4个多月，熟悉环境就要2-3个月，刚上手就走了。然后我说我最快15号来，她说好吧，走吧，我请你吃饭，然后就和她吃饭去了。我问她我是回去等通知吗，她说我回去再看看前面面试官的评价，你等hr的邮件吧。</li>\n</ul>\n</li>\n<li>人生第一次面试就结束了，最后一面那个算法其实很简单，没回答好，其他还行。就这样吧，等待hr通知，但愿能够通过。</li>\n<li>3.3号更新：拿到offer了，效率挺高，两天就给offer了</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>事情是这样的，一直以来都想找份公司的实习，错过了大三的实习，保研之后又到实验室实习，所以完美错过各种实习，大四实习机会越来越少，基本上都不招大四的学生，所以大规模春招我投不了，那是为了校招提前招的。</li>\n<li>到了三月我真的急了，写了个爬虫，爬取北邮人的招聘信息，随便投了几个公司。其中只有百度回我了，而且是中午12点投的，下午3点多，我还在听师兄们答辩，hr就打电话问我明天能不能来面试，我说可以。当时我的心里是懵逼的，压根没准备啊，赶紧回来看书，因为我在简历上写了很多网络编程的东西，什么IO复用，多线程，epoll啊，其实我压根不熟悉啊，所以睡觉之前一直在恶补《linux高性能服务器开发》，而且很多算法题都没做啊，所以很慌，一直到去的车上还在看数据库（数据库忘光了啊）。</li>\n<li>然后第二天去面试，我10点多到的，去了之后没什么人，在前台登记后，10点半的时候，有个姐姐过来喊我去面试，我跟着她去了个会议室，一对一面试。</li>\n<li>一面<ul>\n<li>开始让我自我介绍，我简单说了一下，然后问我简历上的东西，让我介绍了一下逃逸系统，这个是最近正在做的，给她讲了一下，感觉她大概觉得还不错，是自己做的。</li>\n<li>然后问我用过python吗，我说自学过，只会写简单的爬虫，她说我看你带了电脑，不如看下你的爬虫啊，我就给她看了爬实习信息的爬虫，她看了下，没说什么。</li>\n<li>然后问我会不会linux命令，我说会一些网络相关的，她问我知不知道awk,sed，我说不知道，说了些网络的，nc，ps，netstat，感觉她也不懂。</li>\n<li>然后她说看你写了捕包，你都怎么捕包啊，我说windows下用wireshark，她说你这不是mac系统吗，我说mac下我一般用tcpdump，tcpdump也是用pcap实现的，她好像很满意。</li>\n<li>然后问我道题，很多字符串存在一个很大的文件中，怎么提高检索速度，我说用Hash表，她说可以，然后问还有呢，我说，将字符串计算md5，然后再Hash。好像她还是不满意，提醒我说，如果某个词的出现频率很高呢，我说那按照出现频率排序，然后从出现频率高的开始找。这个后来想想不对，但是她也没问了。</li>\n<li>然后问我测试的话，百度搜索输入框应该如何测试呢，我说可以输入敏感词，比如xjp，输入框计算，输入乱码，输入攻击代码等，她说可以，然后问还有吗，我想不出来了，她提醒我还要超过多少字之后，最近新闻的优先放，我补了一句比如百度的优先放在前面，她说不是，我们是根据用户点击量来的，我的内心毫无波动，甚至还有点想笑。后来想想还可以英文，其他语言等。</li>\n<li>然后她又问了下我从你在百度搜索到返回结果发生了什么，我说了dns解析，http请求等，她好像不满意，问我http回复的是什么东西，我说是html源代码，css，js代码，她说那是怎么显示出你看的效果来的呢，我懂了，然后说这是浏览器渲染解析得到的，然后她就没问了。</li>\n<li>最后又问了我一道题，说怎么在一个很大的文件中找到出现次数最小的10个数，我想了下，这不是找最小的k个数吗，然后说先预处理，统计每个词出现次数，然后快排，或者大根堆的方法，她说可以，估计她没听懂。然后一面就结束了，我问还有二面吗，她说有，再给我联系。最后她走的时候和我说其实最后一道题用shell命令几行就可以了，我说哦，那shell的原理是什么呢，她说这你就别管了（估计她也不知道），反正别人封装好了，肯定比你的那些方法好。</li>\n</ul>\n</li>\n<li>二面<ul>\n<li>本来想问我项目的，说前面是不是问过了，我说是的，她说那你直接说这个项目最好的地方是什么，不好的地方是什么，我说好在模块化设计，不好在于特定场景下，她也没问了。</li>\n<li>然后让我写一道题，合并两个有序数组，我说是归并排序的merge操作吗，她说是，我想这太简单了，2分钟就写好了，然后给她讲了一下，她说可以，然后问我你怎么测试你的程序，我说输入为空，数组长度为0，非法输入等，然后她一直问还有吗，因为我是用vector写的，所以根本没有其他的问题，最后实在想不出来了，我说vector也会爆栈，她说还有吗，我说没有了。</li>\n<li>然后问我怎么交换两个变量，不用额外空间，我说大二数值分析（其实是离散数学）学过用异或来实现，然后给她写了一下，她说还有吗，我想了几分钟，实在想不出来，就说没有了。</li>\n<li>然后让我测试一下旁边的自动售货机，我说输入假币，买不存在的物品，暴力破坏，她一直问还有吗，我最后都说停电怎么办，灯坏了怎么办，她还问还有吗（难道你叫还有吗）。然后她说你这都是异常情况下，正常情况下呢，我说正常就投入真钱，买存在的物品就可以了啊，然后她没问了。</li>\n<li>然后她说你做过测试吗，我说没有，之前只是测试过自己的程序，不需要考虑复杂的场景下，她说哦。</li>\n<li>然后问我如果需求和开发的结果不一样怎么办，我听不懂，她给我解释了半天我才明白，然后我说当然让开发跟着需求走啊。</li>\n<li>然后问我会php吗，我说不会，然后问我有没有用过服务器,apache，nginx等，我说没有，用过tomcat，她就没问了。</li>\n<li>然后她说你有什么问题吗，我问了下百度这个地点是做什么的，她说是做百度知道，百度百科和地图方面的，我问那西二旗呢，她说西二旗现在没有业务了，都在百度科技园。然后我又问了下，测试和开发的技能书，她说测试可能技术要求没有那么高，但是你什么都要知道。（跟我差不多）</li>\n<li>然后她问我去吃饭吗，我说我还要三面吗，她说有，我说那直接面吧，然后她就去联系boss了。</li>\n</ul>\n</li>\n<li>三面<ul>\n<li>三面应该是部门负责人，看起来30多岁，上来先问我多大，哪里人呀，在实验室怎么融入团队的。我以为是聊聊天。</li>\n<li>然后突然就问我tcp三次握手，为什么不能是两次或者四次，这太简单了，我给她画了三次握手和四次挥手的图。然后说为什么四次挥手，三次握手，她说为什么不能是两次呢，我说这样不能保证连接建立。她说为什么，你说为什么，我想了一下，说如果没有第三次的ack，如果第二次的syn丢了，那么tcp会误认为连接已经建立。她好像很满意。</li>\n<li>然后让我写socket编程的过程，我给她写了几个，她好像不太懂，还问我哪个是客户端，哪个是服务器。</li>\n<li>然后她说我们来写道题吧，删除字符串中重复的字符。我想了一下，写了一个，先遍历统计每个字符出现的次数，然后再遍历一遍，次数&gt;0的就加入结果，并将次数记为0,她一开始没懂，一直问我为什么要置为0，可不可以不要，我说不可以，她想了一会才明白（我的锅，其实只要一遍遍历标记一下有没有出现过就行，不用遍历两遍，我的方法比较奇葩）。然后问我结果1000有没有问题，我说没有，她提醒我说字符串，所以最多256位（我的锅，当时脑子懵逼）。然后又说如果不是ascll码呢，我说那就设为输入的长度，她说对。</li>\n<li>然后她又把题改了，不能用标记数组，字符改为a-z,只给一个int，我想了半天没有想出来，她提醒我说int32位，字幕26位。我说我刚才想到了位图法，没敢说，我说了用每个二进制位表示一个状态，0表示没出现过，1表示出现过，她说思路是对的，那你会位运算吗，我说会，她说那你写试试吧。然后我写出来了。她看了下，还可以。</li>\n<li>最后问我实习时间，能不能马上来，我说最多两周后，最多8月初，我说实验室还有些东西要交接。她说那你开学后还能来吗，我说不能，因为在雁栖湖上课。她说那你最多只能实习4个多月，熟悉环境就要2-3个月，刚上手就走了。然后我说我最快15号来，她说好吧，走吧，我请你吃饭，然后就和她吃饭去了。我问她我是回去等通知吗，她说我回去再看看前面面试官的评价，你等hr的邮件吧。</li>\n</ul>\n</li>\n<li>人生第一次面试就结束了，最后一面那个算法其实很简单，没回答好，其他还行。就这样吧，等待hr通知，但愿能够通过。</li>\n<li>3.3号更新：拿到offer了，效率挺高，两天就给offer了</li>\n</ul>\n"},{"title":"网络代理调研","date":"2017-11-11T07:33:33.000Z","catagories":"计算机网络","_content":"超哥让我调研网络代理情况，网络代理大致分为以下几种：\n\n* socks代理：会话层，不管上层协议是什么，只是负责盲转发。应用层内容不解析。\n* http/https代理： 又称网页代理，是一个应用层的代理，典型的如fidder,charles,这种代理可以解析https的内容。这里以charles为例简单说一下它的原理：\n\t* charles打开之后，浏览器所有的请求都会被转发到charles来处理。手机抓包的时候需要保证手机和电脑在一台局域网内并且在手机上设置代理到电脑的8888端口，这是charles的默认端口，可以改，这样手机上的所有请求都会被转发到charles来处理\n\t* 默认情况下，charles只能解析http包，这样对https的包就会乱码，解决这个问题需要开启charles的ssl代理，然后443的端口也会被解析。charles解析https协议的原理如下：\n\t\t* 对ssl的握手信息，伪造一份目标网站的证书，这样就相当于一个中间人攻击，charles在客户端和服务端分别建立了2条https链接，2套不同的密钥。这样的问题就是怎么让证书通过认证，所以需要安装charles的一个根证书颁发机构rootCA,rootCA对每个域名动态签发一个证书。由于rootCA被客户端信任(手动),所以rootCA颁发的证书也都被信任。\n\t\n* 建立多个网站的镜像，这也是http/https的代理，比如zmirror","source":"_posts/网络代理调研.md","raw":"---\ntitle: 网络代理调研\ndate: 2017-11-11 15:33:33\ntags: \n\t- 代理\ncatagories: 计算机网络\n---\n超哥让我调研网络代理情况，网络代理大致分为以下几种：\n\n* socks代理：会话层，不管上层协议是什么，只是负责盲转发。应用层内容不解析。\n* http/https代理： 又称网页代理，是一个应用层的代理，典型的如fidder,charles,这种代理可以解析https的内容。这里以charles为例简单说一下它的原理：\n\t* charles打开之后，浏览器所有的请求都会被转发到charles来处理。手机抓包的时候需要保证手机和电脑在一台局域网内并且在手机上设置代理到电脑的8888端口，这是charles的默认端口，可以改，这样手机上的所有请求都会被转发到charles来处理\n\t* 默认情况下，charles只能解析http包，这样对https的包就会乱码，解决这个问题需要开启charles的ssl代理，然后443的端口也会被解析。charles解析https协议的原理如下：\n\t\t* 对ssl的握手信息，伪造一份目标网站的证书，这样就相当于一个中间人攻击，charles在客户端和服务端分别建立了2条https链接，2套不同的密钥。这样的问题就是怎么让证书通过认证，所以需要安装charles的一个根证书颁发机构rootCA,rootCA对每个域名动态签发一个证书。由于rootCA被客户端信任(手动),所以rootCA颁发的证书也都被信任。\n\t\n* 建立多个网站的镜像，这也是http/https的代理，比如zmirror","slug":"网络代理调研","published":1,"updated":"2017-11-11T08:59:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu3x0031hb58ks4abgv6","content":"<p>超哥让我调研网络代理情况，网络代理大致分为以下几种：</p>\n<ul>\n<li>socks代理：会话层，不管上层协议是什么，只是负责盲转发。应用层内容不解析。</li>\n<li><p>http/https代理： 又称网页代理，是一个应用层的代理，典型的如fidder,charles,这种代理可以解析https的内容。这里以charles为例简单说一下它的原理：</p>\n<ul>\n<li>charles打开之后，浏览器所有的请求都会被转发到charles来处理。手机抓包的时候需要保证手机和电脑在一台局域网内并且在手机上设置代理到电脑的8888端口，这是charles的默认端口，可以改，这样手机上的所有请求都会被转发到charles来处理</li>\n<li>默认情况下，charles只能解析http包，这样对https的包就会乱码，解决这个问题需要开启charles的ssl代理，然后443的端口也会被解析。charles解析https协议的原理如下：<ul>\n<li>对ssl的握手信息，伪造一份目标网站的证书，这样就相当于一个中间人攻击，charles在客户端和服务端分别建立了2条https链接，2套不同的密钥。这样的问题就是怎么让证书通过认证，所以需要安装charles的一个根证书颁发机构rootCA,rootCA对每个域名动态签发一个证书。由于rootCA被客户端信任(手动),所以rootCA颁发的证书也都被信任。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>建立多个网站的镜像，这也是http/https的代理，比如zmirror</p>\n</li>\n</ul>\n","excerpt":"","more":"<p>超哥让我调研网络代理情况，网络代理大致分为以下几种：</p>\n<ul>\n<li>socks代理：会话层，不管上层协议是什么，只是负责盲转发。应用层内容不解析。</li>\n<li><p>http/https代理： 又称网页代理，是一个应用层的代理，典型的如fidder,charles,这种代理可以解析https的内容。这里以charles为例简单说一下它的原理：</p>\n<ul>\n<li>charles打开之后，浏览器所有的请求都会被转发到charles来处理。手机抓包的时候需要保证手机和电脑在一台局域网内并且在手机上设置代理到电脑的8888端口，这是charles的默认端口，可以改，这样手机上的所有请求都会被转发到charles来处理</li>\n<li>默认情况下，charles只能解析http包，这样对https的包就会乱码，解决这个问题需要开启charles的ssl代理，然后443的端口也会被解析。charles解析https协议的原理如下：<ul>\n<li>对ssl的握手信息，伪造一份目标网站的证书，这样就相当于一个中间人攻击，charles在客户端和服务端分别建立了2条https链接，2套不同的密钥。这样的问题就是怎么让证书通过认证，所以需要安装charles的一个根证书颁发机构rootCA,rootCA对每个域名动态签发一个证书。由于rootCA被客户端信任(手动),所以rootCA颁发的证书也都被信任。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>建立多个网站的镜像，这也是http/https的代理，比如zmirror</p>\n</li>\n</ul>\n"},{"title":"百度地图交通路线部门实习面试","date":"2017-03-03T08:48:58.000Z","_content":"* 今天下午去面试了百度地图，下午两点在前台登记后，然后过了一会就有人带我去面试了，一个小型的茶水室，有很多零食，周围还有人在讨论问题，反正很吵。一面面试官是给我发邮件的那个男生，感觉挺厉害的。人也非常好（程序员都比较单纯？），然后简单自我介绍下就开始面试了。\n* 一面\n\t* 开始让我介绍了下自己的项目，我给他介绍了我的逃逸系统，然后他问我这个过程中最难的是什么，我都准备过，这个没什么问题，\n\t* 然后他看我简历上网络的比较多，说你对网络比较熟悉吧，我说恩，那他说你讲一下你知道的吧，然后我就开始说TCP，UDP区别呀，三次握手什么的，后悔很多其他的（拥塞控制，滑动窗口，快速重传等）比较高端的没有说。只是说了最简单的一些东西。\n\t* 然后他看见我的简历上的东西有抢红包软件，挺感兴趣的，我就给他讲了一下他的原理。他好像就是随便问问。\n\t* 然后就开始写题，让我写一个把字符串转换成数字，leetcode原题，但是我很久以前做的，都忘记了。有了上次的经验，我先问他有没有字母，他说有，我说那都是ascll码吧，他说是。然后我就开始写了。这里直接血崩，我当时不知道怎么脑子一抽，直接从后往前遍历，还考虑什么末尾有很多0的情况。给他讲的时候，他说你这为什么从后往前呀，我突然意识到自己错了。妈的直接从前往后就行了，太傻逼了。然后就又写了一个，写完之后他问我如果有负数怎么办，（艹，我直接没有考虑），又判断了一下。这下问题来了，他问我异常情况怎么办，我说返回-1，他说那要本来就是-1呢，我一看gg了，说那我直接cout输出，他说直接cout不好吧，我去调用你这个函数你总得给我返回点什么吧，我说那抛出异常，try catch，他说可以，是一种方法。然后他提醒我用一用引用，我懂了，直接将结果用引用传进函数，然后异常就可以返回-1了，然后就没了。\n\t* 标准代码在这：\n\n```\nint transform(int& result,string str){\n\tint len=str.length();\t\n\tresult=0;\n\tint flag=1;\t\t\t\t\n\tif(len==0)\n\t\treturn -1; //error\n\tif(str[0]=='-') //负数\n\t\tflag=-1;\n\tint i=0;\n\tif(flag==-1){\n\t\ti=1;\n\t}\n\tfor(;i<len;i++){\n\t\tif(str[i]>='0'&&str[i]<='9')\n\t\t\tresult=result*10+str[i]-'0';\n\t\telse\n\t\t\treturn -1; //有其他字符\n\t}\n\tresult*=flag;\n\treturn 0; //无异常\n}\n```\n然后他问我简历上解决常见算法问题，都有哪些啊，我说dp，快排，什么的，他说，那你写个快排吧，这次我一下子就写好了，他问我有什么问题，我说没有，然后他说你看key=nums[0]，每次都取这个吗，我一看傻逼了，赶紧说应该是key=nums[left].然后他又看了看，没说什么了。然后说你等会我给你找二面。我没想到还要二面，以为自己gg了。\n\n* 二面\n\t* 二面看起来就像个领导，上来让我介绍自己的项目，我说哪一个，他说你随便介绍一个吧，我又把逃逸系统说了一遍，给他详细讲了原理和架构以及逃逸方法，然后他问我这个有什么用，我说用来测试IDS的性能，帮助更好的改进。\n\t* 然后他问我实习时间呀什么的，我说可以从四月到8月，然后他说你愿意做前端吗，我说可以啊，感觉他好像对我的前端很感兴趣，我赶紧说我不熟，只是当时项目要用才临时学的。然后他说你说你自学能力比较强，怎么证明，我说比如当时要写爬虫，就临时学个python就去写了。他说让你来pc端的前端你愿意吗，我说也可以呀。估计去了做前端？\n\t* 然后他说你知道C++的什么高级特性吗，我本来想说STL，lambda表达式什么的，但是我实在不太会，就不敢说。他说那你用过STL吗，我说用过map，hashmap，stack，queue,priorqueue等，他好像不太满意。最后问了我一个问题，说static是什么，我说是静态变量，说了下静态变量在编译时分配内存，画了下c语言的内存模型，在.data段。他好像不是想问这个，问我那在类里面的静态变量呢，我说类里面静态变量是属于这个类，new一个对象的时候不会为实例分配内存，这个对象对static变量的改动会影响另一个类。静态成员函数只能调用静态变量等，然后他就没问了。\n\t* 然后他说面试结束了，你有什么问题吗，我问了个百度加班是不是996，他说了一大堆我也没听，然后问他百度对实习生有没有什么培训，他说实习生比较少，培训主要有讲座什么的，可以自愿去。然后他说面试结束了，我送你出去吧。只有两面，估计gg了。\n* 出来的时候，我滴滴打了一辆车，然后正在等车的时候接到了hr的电话，说我前天面试的百度内容生态质量部的面试过了。还说我不能同时接受两个offer。所以我百度地图不管结果怎样都没用。然后我又发了封邮件问了下面试官，他人真的很好，建议我先接受offer。感觉百度的人都挺好的。\n* 最后总结一下，一定要多刷题，百度至少要做两道算法题，感觉百度问的字符串处理比较多。然后一定要写以前问清楚要求。多沟通，多考虑特殊情况。不要想我一样上来就闷头写，结果要求都搞错了。\n* 刷题的话，leetcode其实不用刷完，很多太难的不会考，把经典的多看几遍就可以了。其实常考的面试题就那么多，这里推荐张斌师兄给我的《程序员面试金典》，《剑指offer》，好多原理，要多看几遍。还有就是多练习在白板上写代码，和在IDE上写差别还是挺大的，白板上不能随便改。\n* 就这样吧。\n","source":"_posts/百度地图交通路线部门实习面试.md","raw":"---\ntitle: 百度地图交通路线部门实习面试\ndate: 2017-03-03 16:48:58\ntags: 百度地图  实习生  面试 \ncategories: 面试题\n---\n* 今天下午去面试了百度地图，下午两点在前台登记后，然后过了一会就有人带我去面试了，一个小型的茶水室，有很多零食，周围还有人在讨论问题，反正很吵。一面面试官是给我发邮件的那个男生，感觉挺厉害的。人也非常好（程序员都比较单纯？），然后简单自我介绍下就开始面试了。\n* 一面\n\t* 开始让我介绍了下自己的项目，我给他介绍了我的逃逸系统，然后他问我这个过程中最难的是什么，我都准备过，这个没什么问题，\n\t* 然后他看我简历上网络的比较多，说你对网络比较熟悉吧，我说恩，那他说你讲一下你知道的吧，然后我就开始说TCP，UDP区别呀，三次握手什么的，后悔很多其他的（拥塞控制，滑动窗口，快速重传等）比较高端的没有说。只是说了最简单的一些东西。\n\t* 然后他看见我的简历上的东西有抢红包软件，挺感兴趣的，我就给他讲了一下他的原理。他好像就是随便问问。\n\t* 然后就开始写题，让我写一个把字符串转换成数字，leetcode原题，但是我很久以前做的，都忘记了。有了上次的经验，我先问他有没有字母，他说有，我说那都是ascll码吧，他说是。然后我就开始写了。这里直接血崩，我当时不知道怎么脑子一抽，直接从后往前遍历，还考虑什么末尾有很多0的情况。给他讲的时候，他说你这为什么从后往前呀，我突然意识到自己错了。妈的直接从前往后就行了，太傻逼了。然后就又写了一个，写完之后他问我如果有负数怎么办，（艹，我直接没有考虑），又判断了一下。这下问题来了，他问我异常情况怎么办，我说返回-1，他说那要本来就是-1呢，我一看gg了，说那我直接cout输出，他说直接cout不好吧，我去调用你这个函数你总得给我返回点什么吧，我说那抛出异常，try catch，他说可以，是一种方法。然后他提醒我用一用引用，我懂了，直接将结果用引用传进函数，然后异常就可以返回-1了，然后就没了。\n\t* 标准代码在这：\n\n```\nint transform(int& result,string str){\n\tint len=str.length();\t\n\tresult=0;\n\tint flag=1;\t\t\t\t\n\tif(len==0)\n\t\treturn -1; //error\n\tif(str[0]=='-') //负数\n\t\tflag=-1;\n\tint i=0;\n\tif(flag==-1){\n\t\ti=1;\n\t}\n\tfor(;i<len;i++){\n\t\tif(str[i]>='0'&&str[i]<='9')\n\t\t\tresult=result*10+str[i]-'0';\n\t\telse\n\t\t\treturn -1; //有其他字符\n\t}\n\tresult*=flag;\n\treturn 0; //无异常\n}\n```\n然后他问我简历上解决常见算法问题，都有哪些啊，我说dp，快排，什么的，他说，那你写个快排吧，这次我一下子就写好了，他问我有什么问题，我说没有，然后他说你看key=nums[0]，每次都取这个吗，我一看傻逼了，赶紧说应该是key=nums[left].然后他又看了看，没说什么了。然后说你等会我给你找二面。我没想到还要二面，以为自己gg了。\n\n* 二面\n\t* 二面看起来就像个领导，上来让我介绍自己的项目，我说哪一个，他说你随便介绍一个吧，我又把逃逸系统说了一遍，给他详细讲了原理和架构以及逃逸方法，然后他问我这个有什么用，我说用来测试IDS的性能，帮助更好的改进。\n\t* 然后他问我实习时间呀什么的，我说可以从四月到8月，然后他说你愿意做前端吗，我说可以啊，感觉他好像对我的前端很感兴趣，我赶紧说我不熟，只是当时项目要用才临时学的。然后他说你说你自学能力比较强，怎么证明，我说比如当时要写爬虫，就临时学个python就去写了。他说让你来pc端的前端你愿意吗，我说也可以呀。估计去了做前端？\n\t* 然后他说你知道C++的什么高级特性吗，我本来想说STL，lambda表达式什么的，但是我实在不太会，就不敢说。他说那你用过STL吗，我说用过map，hashmap，stack，queue,priorqueue等，他好像不太满意。最后问了我一个问题，说static是什么，我说是静态变量，说了下静态变量在编译时分配内存，画了下c语言的内存模型，在.data段。他好像不是想问这个，问我那在类里面的静态变量呢，我说类里面静态变量是属于这个类，new一个对象的时候不会为实例分配内存，这个对象对static变量的改动会影响另一个类。静态成员函数只能调用静态变量等，然后他就没问了。\n\t* 然后他说面试结束了，你有什么问题吗，我问了个百度加班是不是996，他说了一大堆我也没听，然后问他百度对实习生有没有什么培训，他说实习生比较少，培训主要有讲座什么的，可以自愿去。然后他说面试结束了，我送你出去吧。只有两面，估计gg了。\n* 出来的时候，我滴滴打了一辆车，然后正在等车的时候接到了hr的电话，说我前天面试的百度内容生态质量部的面试过了。还说我不能同时接受两个offer。所以我百度地图不管结果怎样都没用。然后我又发了封邮件问了下面试官，他人真的很好，建议我先接受offer。感觉百度的人都挺好的。\n* 最后总结一下，一定要多刷题，百度至少要做两道算法题，感觉百度问的字符串处理比较多。然后一定要写以前问清楚要求。多沟通，多考虑特殊情况。不要想我一样上来就闷头写，结果要求都搞错了。\n* 刷题的话，leetcode其实不用刷完，很多太难的不会考，把经典的多看几遍就可以了。其实常考的面试题就那么多，这里推荐张斌师兄给我的《程序员面试金典》，《剑指offer》，好多原理，要多看几遍。还有就是多练习在白板上写代码，和在IDE上写差别还是挺大的，白板上不能随便改。\n* 就这样吧。\n","slug":"百度地图交通路线部门实习面试","published":1,"updated":"2017-07-11T07:01:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu3z0034hb58gvrskulp","content":"<ul>\n<li>今天下午去面试了百度地图，下午两点在前台登记后，然后过了一会就有人带我去面试了，一个小型的茶水室，有很多零食，周围还有人在讨论问题，反正很吵。一面面试官是给我发邮件的那个男生，感觉挺厉害的。人也非常好（程序员都比较单纯？），然后简单自我介绍下就开始面试了。</li>\n<li>一面<ul>\n<li>开始让我介绍了下自己的项目，我给他介绍了我的逃逸系统，然后他问我这个过程中最难的是什么，我都准备过，这个没什么问题，</li>\n<li>然后他看我简历上网络的比较多，说你对网络比较熟悉吧，我说恩，那他说你讲一下你知道的吧，然后我就开始说TCP，UDP区别呀，三次握手什么的，后悔很多其他的（拥塞控制，滑动窗口，快速重传等）比较高端的没有说。只是说了最简单的一些东西。</li>\n<li>然后他看见我的简历上的东西有抢红包软件，挺感兴趣的，我就给他讲了一下他的原理。他好像就是随便问问。</li>\n<li>然后就开始写题，让我写一个把字符串转换成数字，leetcode原题，但是我很久以前做的，都忘记了。有了上次的经验，我先问他有没有字母，他说有，我说那都是ascll码吧，他说是。然后我就开始写了。这里直接血崩，我当时不知道怎么脑子一抽，直接从后往前遍历，还考虑什么末尾有很多0的情况。给他讲的时候，他说你这为什么从后往前呀，我突然意识到自己错了。妈的直接从前往后就行了，太傻逼了。然后就又写了一个，写完之后他问我如果有负数怎么办，（艹，我直接没有考虑），又判断了一下。这下问题来了，他问我异常情况怎么办，我说返回-1，他说那要本来就是-1呢，我一看gg了，说那我直接cout输出，他说直接cout不好吧，我去调用你这个函数你总得给我返回点什么吧，我说那抛出异常，try catch，他说可以，是一种方法。然后他提醒我用一用引用，我懂了，直接将结果用引用传进函数，然后异常就可以返回-1了，然后就没了。</li>\n<li>标准代码在这：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">int transform(int&amp; result,string str)&#123;</div><div class=\"line\">\tint len=str.length();\t</div><div class=\"line\">\tresult=0;</div><div class=\"line\">\tint flag=1;\t\t\t\t</div><div class=\"line\">\tif(len==0)</div><div class=\"line\">\t\treturn -1; //error</div><div class=\"line\">\tif(str[0]==&apos;-&apos;) //负数</div><div class=\"line\">\t\tflag=-1;</div><div class=\"line\">\tint i=0;</div><div class=\"line\">\tif(flag==-1)&#123;</div><div class=\"line\">\t\ti=1;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tfor(;i&lt;len;i++)&#123;</div><div class=\"line\">\t\tif(str[i]&gt;=&apos;0&apos;&amp;&amp;str[i]&lt;=&apos;9&apos;)</div><div class=\"line\">\t\t\tresult=result*10+str[i]-&apos;0&apos;;</div><div class=\"line\">\t\telse</div><div class=\"line\">\t\t\treturn -1; //有其他字符</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tresult*=flag;</div><div class=\"line\">\treturn 0; //无异常</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后他问我简历上解决常见算法问题，都有哪些啊，我说dp，快排，什么的，他说，那你写个快排吧，这次我一下子就写好了，他问我有什么问题，我说没有，然后他说你看key=nums[0]，每次都取这个吗，我一看傻逼了，赶紧说应该是key=nums[left].然后他又看了看，没说什么了。然后说你等会我给你找二面。我没想到还要二面，以为自己gg了。</p>\n<ul>\n<li>二面<ul>\n<li>二面看起来就像个领导，上来让我介绍自己的项目，我说哪一个，他说你随便介绍一个吧，我又把逃逸系统说了一遍，给他详细讲了原理和架构以及逃逸方法，然后他问我这个有什么用，我说用来测试IDS的性能，帮助更好的改进。</li>\n<li>然后他问我实习时间呀什么的，我说可以从四月到8月，然后他说你愿意做前端吗，我说可以啊，感觉他好像对我的前端很感兴趣，我赶紧说我不熟，只是当时项目要用才临时学的。然后他说你说你自学能力比较强，怎么证明，我说比如当时要写爬虫，就临时学个python就去写了。他说让你来pc端的前端你愿意吗，我说也可以呀。估计去了做前端？</li>\n<li>然后他说你知道C++的什么高级特性吗，我本来想说STL，lambda表达式什么的，但是我实在不太会，就不敢说。他说那你用过STL吗，我说用过map，hashmap，stack，queue,priorqueue等，他好像不太满意。最后问了我一个问题，说static是什么，我说是静态变量，说了下静态变量在编译时分配内存，画了下c语言的内存模型，在.data段。他好像不是想问这个，问我那在类里面的静态变量呢，我说类里面静态变量是属于这个类，new一个对象的时候不会为实例分配内存，这个对象对static变量的改动会影响另一个类。静态成员函数只能调用静态变量等，然后他就没问了。</li>\n<li>然后他说面试结束了，你有什么问题吗，我问了个百度加班是不是996，他说了一大堆我也没听，然后问他百度对实习生有没有什么培训，他说实习生比较少，培训主要有讲座什么的，可以自愿去。然后他说面试结束了，我送你出去吧。只有两面，估计gg了。</li>\n</ul>\n</li>\n<li>出来的时候，我滴滴打了一辆车，然后正在等车的时候接到了hr的电话，说我前天面试的百度内容生态质量部的面试过了。还说我不能同时接受两个offer。所以我百度地图不管结果怎样都没用。然后我又发了封邮件问了下面试官，他人真的很好，建议我先接受offer。感觉百度的人都挺好的。</li>\n<li>最后总结一下，一定要多刷题，百度至少要做两道算法题，感觉百度问的字符串处理比较多。然后一定要写以前问清楚要求。多沟通，多考虑特殊情况。不要想我一样上来就闷头写，结果要求都搞错了。</li>\n<li>刷题的话，leetcode其实不用刷完，很多太难的不会考，把经典的多看几遍就可以了。其实常考的面试题就那么多，这里推荐张斌师兄给我的《程序员面试金典》，《剑指offer》，好多原理，要多看几遍。还有就是多练习在白板上写代码，和在IDE上写差别还是挺大的，白板上不能随便改。</li>\n<li>就这样吧。</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>今天下午去面试了百度地图，下午两点在前台登记后，然后过了一会就有人带我去面试了，一个小型的茶水室，有很多零食，周围还有人在讨论问题，反正很吵。一面面试官是给我发邮件的那个男生，感觉挺厉害的。人也非常好（程序员都比较单纯？），然后简单自我介绍下就开始面试了。</li>\n<li>一面<ul>\n<li>开始让我介绍了下自己的项目，我给他介绍了我的逃逸系统，然后他问我这个过程中最难的是什么，我都准备过，这个没什么问题，</li>\n<li>然后他看我简历上网络的比较多，说你对网络比较熟悉吧，我说恩，那他说你讲一下你知道的吧，然后我就开始说TCP，UDP区别呀，三次握手什么的，后悔很多其他的（拥塞控制，滑动窗口，快速重传等）比较高端的没有说。只是说了最简单的一些东西。</li>\n<li>然后他看见我的简历上的东西有抢红包软件，挺感兴趣的，我就给他讲了一下他的原理。他好像就是随便问问。</li>\n<li>然后就开始写题，让我写一个把字符串转换成数字，leetcode原题，但是我很久以前做的，都忘记了。有了上次的经验，我先问他有没有字母，他说有，我说那都是ascll码吧，他说是。然后我就开始写了。这里直接血崩，我当时不知道怎么脑子一抽，直接从后往前遍历，还考虑什么末尾有很多0的情况。给他讲的时候，他说你这为什么从后往前呀，我突然意识到自己错了。妈的直接从前往后就行了，太傻逼了。然后就又写了一个，写完之后他问我如果有负数怎么办，（艹，我直接没有考虑），又判断了一下。这下问题来了，他问我异常情况怎么办，我说返回-1，他说那要本来就是-1呢，我一看gg了，说那我直接cout输出，他说直接cout不好吧，我去调用你这个函数你总得给我返回点什么吧，我说那抛出异常，try catch，他说可以，是一种方法。然后他提醒我用一用引用，我懂了，直接将结果用引用传进函数，然后异常就可以返回-1了，然后就没了。</li>\n<li>标准代码在这：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">int transform(int&amp; result,string str)&#123;</div><div class=\"line\">\tint len=str.length();\t</div><div class=\"line\">\tresult=0;</div><div class=\"line\">\tint flag=1;\t\t\t\t</div><div class=\"line\">\tif(len==0)</div><div class=\"line\">\t\treturn -1; //error</div><div class=\"line\">\tif(str[0]==&apos;-&apos;) //负数</div><div class=\"line\">\t\tflag=-1;</div><div class=\"line\">\tint i=0;</div><div class=\"line\">\tif(flag==-1)&#123;</div><div class=\"line\">\t\ti=1;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tfor(;i&lt;len;i++)&#123;</div><div class=\"line\">\t\tif(str[i]&gt;=&apos;0&apos;&amp;&amp;str[i]&lt;=&apos;9&apos;)</div><div class=\"line\">\t\t\tresult=result*10+str[i]-&apos;0&apos;;</div><div class=\"line\">\t\telse</div><div class=\"line\">\t\t\treturn -1; //有其他字符</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tresult*=flag;</div><div class=\"line\">\treturn 0; //无异常</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后他问我简历上解决常见算法问题，都有哪些啊，我说dp，快排，什么的，他说，那你写个快排吧，这次我一下子就写好了，他问我有什么问题，我说没有，然后他说你看key=nums[0]，每次都取这个吗，我一看傻逼了，赶紧说应该是key=nums[left].然后他又看了看，没说什么了。然后说你等会我给你找二面。我没想到还要二面，以为自己gg了。</p>\n<ul>\n<li>二面<ul>\n<li>二面看起来就像个领导，上来让我介绍自己的项目，我说哪一个，他说你随便介绍一个吧，我又把逃逸系统说了一遍，给他详细讲了原理和架构以及逃逸方法，然后他问我这个有什么用，我说用来测试IDS的性能，帮助更好的改进。</li>\n<li>然后他问我实习时间呀什么的，我说可以从四月到8月，然后他说你愿意做前端吗，我说可以啊，感觉他好像对我的前端很感兴趣，我赶紧说我不熟，只是当时项目要用才临时学的。然后他说你说你自学能力比较强，怎么证明，我说比如当时要写爬虫，就临时学个python就去写了。他说让你来pc端的前端你愿意吗，我说也可以呀。估计去了做前端？</li>\n<li>然后他说你知道C++的什么高级特性吗，我本来想说STL，lambda表达式什么的，但是我实在不太会，就不敢说。他说那你用过STL吗，我说用过map，hashmap，stack，queue,priorqueue等，他好像不太满意。最后问了我一个问题，说static是什么，我说是静态变量，说了下静态变量在编译时分配内存，画了下c语言的内存模型，在.data段。他好像不是想问这个，问我那在类里面的静态变量呢，我说类里面静态变量是属于这个类，new一个对象的时候不会为实例分配内存，这个对象对static变量的改动会影响另一个类。静态成员函数只能调用静态变量等，然后他就没问了。</li>\n<li>然后他说面试结束了，你有什么问题吗，我问了个百度加班是不是996，他说了一大堆我也没听，然后问他百度对实习生有没有什么培训，他说实习生比较少，培训主要有讲座什么的，可以自愿去。然后他说面试结束了，我送你出去吧。只有两面，估计gg了。</li>\n</ul>\n</li>\n<li>出来的时候，我滴滴打了一辆车，然后正在等车的时候接到了hr的电话，说我前天面试的百度内容生态质量部的面试过了。还说我不能同时接受两个offer。所以我百度地图不管结果怎样都没用。然后我又发了封邮件问了下面试官，他人真的很好，建议我先接受offer。感觉百度的人都挺好的。</li>\n<li>最后总结一下，一定要多刷题，百度至少要做两道算法题，感觉百度问的字符串处理比较多。然后一定要写以前问清楚要求。多沟通，多考虑特殊情况。不要想我一样上来就闷头写，结果要求都搞错了。</li>\n<li>刷题的话，leetcode其实不用刷完，很多太难的不会考，把经典的多看几遍就可以了。其实常考的面试题就那么多，这里推荐张斌师兄给我的《程序员面试金典》，《剑指offer》，好多原理，要多看几遍。还有就是多练习在白板上写代码，和在IDE上写差别还是挺大的，白板上不能随便改。</li>\n<li>就这样吧。</li>\n</ul>\n"},{"title":"百度实习体验","date":"2017-07-10T07:27:58.000Z","_content":"\n* 今天是在百度的最后一天了，4个月的实习经历一眨眼就要过去了。回头看一下，发现自己竟然已经走了那么远，看看当时面试时候的博客，觉得自己当时那么傻逼，除了会做点算法题什么都不会,虽然现在仍然很菜。\n* 总体来说，这段实习经历还是非常值得的。虽然每天都很累，从来没有10前下过班，但是也成长了许多。从刚开始的啥都不懂到现在独立负责一个项目，我觉得自己可以hold住，并不比正式的差。\n* 简单说下自己的几点感悟吧：\n\t* 进入BAT并没有那么难（老大一直劝我转正，被我拒绝了）。但是同样都是BAT的码农，差别却大了去了。有的只能做一些基础的业务开发（比如我所在的百家号），每天用php写一些简单的逻辑，实在是没有意思，写10个项目和写1个项目没有什么区别。在我实习的这段时间内，没有见过任何的算法，但凡涉及到算法的，都是调用IDL或者大搜的服务。但是同时百度也有IDL这样的高端部门。这也是我读研的原因，如果研究生毕业还是以进入BAT为目标，那么说明研究生白读了，还不如直接转正留下来呢。读完研后的目标应该是进入BAT的核心部门，做算法工程师。不要写没有技术含量的业务代码，否则很容易被替代，要做一点有门槛的工作，才能避免吃青春饭。\n\t* 关于百度的工程师文化，具体的体现就是技术人员的话语权很大，RD>FE>QA>PM>BD>外包。由于QA和PM大部分都是女生，所以很多时候需要一些沟通技巧（比如撒娇卖萌哄着RD）。参与过几次评审，基本上是RD占据主动，PM只能妥协（不好意思，这个需求做不了）。QA基本打酱油。这样的好处和坏处都很明显，好处就是百度出去的技术都不是很水，但是百度的产品很弱就是了，我见到的PM每天就是研究竞品，然后想着怎么抄袭就行了，奇怪的是，高层竟然认同这种行为，美名其曰：人类共同的财富。\n\t* 关于业务和算法，2017年，百度押宝内容分发，我所在的百家号也属于疯狂扩张之中，不停的来新人，我3月份来的，走的时候已经是老人了。特别是来了很多糯米的人（糯米倒闭了）。但是可能由于技术没有什么难度，招进来不少水货RD（有的还要我这个实习生教他写代码）高T很少，T6都不多。大部分都是T3，T4，T5.听说策略那边有很多高T（T8，T9）。所以还是不要做业务，尽量做算法方向或者分布式系统方向，有点难度的。做业务真的没有意思，我来的时候一点都不会php，但是没关系，就算你不会，你照猫画虎，照着别人的抄都能把功能实现。因为大部分都是一些逻辑判断，数据库操作，ral调用，拼一下就行了。\n\t* 关于QA和RD，反正在百度，基本QA都是白盒测试，QA也是按照RD的标准招的。不存在只是点点点的情况（\u0010外包的活）。有些RD比QA的技术还菜。但是QA和RD的技能点不一样倒是真的。根据我的观察：\n\t\t* QA重要的技能点：\n\t\t* linux知识（特别是像awk,sed等命令的用法熟练，还有vim的操作）。\n\t\t* 熟练掌握一门脚本语言如python/shell/php（因为\u0010QA经常需要写一些脚本来统计一些东西或者搭建环境，这是基础技能）。\n\t\t* 技术的广度（你需要什么都了解一些，大到机器学习，spark,nmq，小到一个框架的原理，如Bingo框架的路由分发原理）。\n\t\t* 基本的测试技能（如怎么压测）。\n\t\t* 追查问题能力，这个特别重要，因为很多时候，比如线上出了问题和用户报了case.是QA在第一时间定位到问题然后给对应的RD去修复。这也是QA的优势，因为RD大多只是负责自己的那个模块，对其他模块都不太熟悉，但是QA因为各个模块都要测试，所以对各个模块都比较了解，比较容易定位到问题。\n\t\t* 自动化测试框架的搭建。怎么搭建环境，放在持续集成平台（agile）。怎么编写自动化case,覆盖到所有分支，上线之前跑一遍自动化case.\n\t\t\n\t\t* RD重要的技能点：\n\t\t* 跟职位有关，技能可能相对来说比较单一，但是必须精通，比如你php开发，那你必须精通php和相关的框架，和nginx服务器原理等。但是你如果是一个算法工程师，那你只要知道相关的机器学习算法即可。比如我们这有一个博士，只会用python，但这就够了。\n\n* 简单说下自己的收获吧：\n\t* 首先是在一个成熟的大公司待了4个月，学了很多流程和规范。就像正规军一样。比如一个项目从开始到结束：首先要PM立项, 然后编写MRD，然后确定排期，然后需求评审，PM，QA，RD都要参加，在这里确定需求，什么能做，什么不能做，然后技术评审，确定技术方案。在这里确定RD和QA的排期。然后RD开始介入开发，同时QA开始编写测试case和准入case.RD过了准入case后开始提测（项目比较大可能需要分步提测）。如果项目质量太差QA可以提测直接打回。然后QA开始测试，RD修bug，测试可能需要几轮，不停回归。测试通过后就要上线了，首先需要确定上线方案，上线一般是先上预览机（小流量，设置cookie可以打到预览机）。在预览机上线上回归，然后上单台，然后上单边，然后全量。上线之后还需要线上继续回归。最后需要加上监控和报警。如果上线之后出了问题，先回滚，止损然后再追查问题。必要时需要服务降级。事故之后要做一个case study，大家一起总结问题，吸取经验。还有一些其他的规范比如提交代码必须经过code review(机器审核，代码风格检查+人工审核)。比如分支开发，分支发布，上线之前不能合入主干。上线之后删除分支。\n\t* 然后学到了一些线上问题的处理方案：我记得刚来的时候就出了一次比较严重的事故，我们线上的一个非核心服务挂掉了，这个服务是通过nmq调用的，导致nmq不停重试。但是核心服务和这个服务共用一个nmq，一个topic，导致nmq队列严重积压。影响了核心服务的处理。当时这个问题的解决方案是紧急下掉那个非核心服务，然后跳过nmq的命令点，先止损，不能影响核心的发文服务。事后总结的结论是架构不合理，核心服务依赖于非核心服务，需要做服务拆分，不能放在一个消息队列里面。\n\t* 还有一次是我们被盗链，别人利用百家号上传视频，但是并不发文，然后将mediaID拼出播放链接。相当于利用我们的流量来获取利润。当时上传的是泄露出的人民的名义，流量巨大，造成了很大的损失。当时的紧急方案是连夜加班，对mediaID 进行加密。\n\t* 还有就是学会了一门语言，php,上手简单，框架方便，开发起来无脑。不愧为最好的语言。但是写的时间长了可能会变得退化。\n\t* 还有就是了解了一些常用的技术，如nmq（百度内部的消息队列），redis（k-v型的nosql数据库）。nginx反向代理用来做负载均衡，spark用来做大数据流处理计算，我们主要用来统计日志。bns百度内部的域名解析服务，bfe百度内部的统一外部接入层。\n\t* 参加了3个比较大的项目，用户等级权益，父子账号，马甲号视频。\n\t* 还有就是参与了组里自动化测试框架的开发，当时我刚来的时候完全没有任何自动化测试，后来在一个高工的带领下，我开始编写自动化测试框架，框架主要基于phpunit单元测试，编写自动化测试case.我走的时候已经覆盖了80%的接口测试并且接入了我们的持续集成平台，上线之前必须跑一遍自动化测试。收益很大。\n\t* 然后就是写了很多的脚本，和一些接口，用来做一些统计，并且接入百度内部的统一前端展示平台showx（包含折线图，表格等）进行展示。给老大看，主要包括每日发文量统计，发文成功率统计，作者分润统计等。\n\t* 然后给RD提供了很多有价值的建议，我记得有一次，有一个数据库的事务，3个数据库必须同时修改成功才成功，然后需要发送短信，但是rd把发送短信放在了3个修改数据库操作的中间，这样如果失败的话，数据库操作会回滚，但是发送短信又不能回滚，我建议他把发送短信放在最后面。\n\n* 最后，感谢这段忙碌但是每天都能感受到自己的成长的日子，感谢我的老大，对我特别好，感谢我的师傅，教了我很多。感谢一起工作的一群靠谱的百度同学，感谢一起实习的小伙伴。这段经历对我来说很难忘。PS： 百度的PM同学真的都特别漂亮，百度科技园的饭真的特别好吃。\n\n","source":"_posts/百度实习体验.md","raw":"---\ntitle: 百度实习体验\ndate: 2017-07-10 15:27:58\ntags: \n - 百度\n - 实习\ncategories: 实习\n---\n\n* 今天是在百度的最后一天了，4个月的实习经历一眨眼就要过去了。回头看一下，发现自己竟然已经走了那么远，看看当时面试时候的博客，觉得自己当时那么傻逼，除了会做点算法题什么都不会,虽然现在仍然很菜。\n* 总体来说，这段实习经历还是非常值得的。虽然每天都很累，从来没有10前下过班，但是也成长了许多。从刚开始的啥都不懂到现在独立负责一个项目，我觉得自己可以hold住，并不比正式的差。\n* 简单说下自己的几点感悟吧：\n\t* 进入BAT并没有那么难（老大一直劝我转正，被我拒绝了）。但是同样都是BAT的码农，差别却大了去了。有的只能做一些基础的业务开发（比如我所在的百家号），每天用php写一些简单的逻辑，实在是没有意思，写10个项目和写1个项目没有什么区别。在我实习的这段时间内，没有见过任何的算法，但凡涉及到算法的，都是调用IDL或者大搜的服务。但是同时百度也有IDL这样的高端部门。这也是我读研的原因，如果研究生毕业还是以进入BAT为目标，那么说明研究生白读了，还不如直接转正留下来呢。读完研后的目标应该是进入BAT的核心部门，做算法工程师。不要写没有技术含量的业务代码，否则很容易被替代，要做一点有门槛的工作，才能避免吃青春饭。\n\t* 关于百度的工程师文化，具体的体现就是技术人员的话语权很大，RD>FE>QA>PM>BD>外包。由于QA和PM大部分都是女生，所以很多时候需要一些沟通技巧（比如撒娇卖萌哄着RD）。参与过几次评审，基本上是RD占据主动，PM只能妥协（不好意思，这个需求做不了）。QA基本打酱油。这样的好处和坏处都很明显，好处就是百度出去的技术都不是很水，但是百度的产品很弱就是了，我见到的PM每天就是研究竞品，然后想着怎么抄袭就行了，奇怪的是，高层竟然认同这种行为，美名其曰：人类共同的财富。\n\t* 关于业务和算法，2017年，百度押宝内容分发，我所在的百家号也属于疯狂扩张之中，不停的来新人，我3月份来的，走的时候已经是老人了。特别是来了很多糯米的人（糯米倒闭了）。但是可能由于技术没有什么难度，招进来不少水货RD（有的还要我这个实习生教他写代码）高T很少，T6都不多。大部分都是T3，T4，T5.听说策略那边有很多高T（T8，T9）。所以还是不要做业务，尽量做算法方向或者分布式系统方向，有点难度的。做业务真的没有意思，我来的时候一点都不会php，但是没关系，就算你不会，你照猫画虎，照着别人的抄都能把功能实现。因为大部分都是一些逻辑判断，数据库操作，ral调用，拼一下就行了。\n\t* 关于QA和RD，反正在百度，基本QA都是白盒测试，QA也是按照RD的标准招的。不存在只是点点点的情况（\u0010外包的活）。有些RD比QA的技术还菜。但是QA和RD的技能点不一样倒是真的。根据我的观察：\n\t\t* QA重要的技能点：\n\t\t* linux知识（特别是像awk,sed等命令的用法熟练，还有vim的操作）。\n\t\t* 熟练掌握一门脚本语言如python/shell/php（因为\u0010QA经常需要写一些脚本来统计一些东西或者搭建环境，这是基础技能）。\n\t\t* 技术的广度（你需要什么都了解一些，大到机器学习，spark,nmq，小到一个框架的原理，如Bingo框架的路由分发原理）。\n\t\t* 基本的测试技能（如怎么压测）。\n\t\t* 追查问题能力，这个特别重要，因为很多时候，比如线上出了问题和用户报了case.是QA在第一时间定位到问题然后给对应的RD去修复。这也是QA的优势，因为RD大多只是负责自己的那个模块，对其他模块都不太熟悉，但是QA因为各个模块都要测试，所以对各个模块都比较了解，比较容易定位到问题。\n\t\t* 自动化测试框架的搭建。怎么搭建环境，放在持续集成平台（agile）。怎么编写自动化case,覆盖到所有分支，上线之前跑一遍自动化case.\n\t\t\n\t\t* RD重要的技能点：\n\t\t* 跟职位有关，技能可能相对来说比较单一，但是必须精通，比如你php开发，那你必须精通php和相关的框架，和nginx服务器原理等。但是你如果是一个算法工程师，那你只要知道相关的机器学习算法即可。比如我们这有一个博士，只会用python，但这就够了。\n\n* 简单说下自己的收获吧：\n\t* 首先是在一个成熟的大公司待了4个月，学了很多流程和规范。就像正规军一样。比如一个项目从开始到结束：首先要PM立项, 然后编写MRD，然后确定排期，然后需求评审，PM，QA，RD都要参加，在这里确定需求，什么能做，什么不能做，然后技术评审，确定技术方案。在这里确定RD和QA的排期。然后RD开始介入开发，同时QA开始编写测试case和准入case.RD过了准入case后开始提测（项目比较大可能需要分步提测）。如果项目质量太差QA可以提测直接打回。然后QA开始测试，RD修bug，测试可能需要几轮，不停回归。测试通过后就要上线了，首先需要确定上线方案，上线一般是先上预览机（小流量，设置cookie可以打到预览机）。在预览机上线上回归，然后上单台，然后上单边，然后全量。上线之后还需要线上继续回归。最后需要加上监控和报警。如果上线之后出了问题，先回滚，止损然后再追查问题。必要时需要服务降级。事故之后要做一个case study，大家一起总结问题，吸取经验。还有一些其他的规范比如提交代码必须经过code review(机器审核，代码风格检查+人工审核)。比如分支开发，分支发布，上线之前不能合入主干。上线之后删除分支。\n\t* 然后学到了一些线上问题的处理方案：我记得刚来的时候就出了一次比较严重的事故，我们线上的一个非核心服务挂掉了，这个服务是通过nmq调用的，导致nmq不停重试。但是核心服务和这个服务共用一个nmq，一个topic，导致nmq队列严重积压。影响了核心服务的处理。当时这个问题的解决方案是紧急下掉那个非核心服务，然后跳过nmq的命令点，先止损，不能影响核心的发文服务。事后总结的结论是架构不合理，核心服务依赖于非核心服务，需要做服务拆分，不能放在一个消息队列里面。\n\t* 还有一次是我们被盗链，别人利用百家号上传视频，但是并不发文，然后将mediaID拼出播放链接。相当于利用我们的流量来获取利润。当时上传的是泄露出的人民的名义，流量巨大，造成了很大的损失。当时的紧急方案是连夜加班，对mediaID 进行加密。\n\t* 还有就是学会了一门语言，php,上手简单，框架方便，开发起来无脑。不愧为最好的语言。但是写的时间长了可能会变得退化。\n\t* 还有就是了解了一些常用的技术，如nmq（百度内部的消息队列），redis（k-v型的nosql数据库）。nginx反向代理用来做负载均衡，spark用来做大数据流处理计算，我们主要用来统计日志。bns百度内部的域名解析服务，bfe百度内部的统一外部接入层。\n\t* 参加了3个比较大的项目，用户等级权益，父子账号，马甲号视频。\n\t* 还有就是参与了组里自动化测试框架的开发，当时我刚来的时候完全没有任何自动化测试，后来在一个高工的带领下，我开始编写自动化测试框架，框架主要基于phpunit单元测试，编写自动化测试case.我走的时候已经覆盖了80%的接口测试并且接入了我们的持续集成平台，上线之前必须跑一遍自动化测试。收益很大。\n\t* 然后就是写了很多的脚本，和一些接口，用来做一些统计，并且接入百度内部的统一前端展示平台showx（包含折线图，表格等）进行展示。给老大看，主要包括每日发文量统计，发文成功率统计，作者分润统计等。\n\t* 然后给RD提供了很多有价值的建议，我记得有一次，有一个数据库的事务，3个数据库必须同时修改成功才成功，然后需要发送短信，但是rd把发送短信放在了3个修改数据库操作的中间，这样如果失败的话，数据库操作会回滚，但是发送短信又不能回滚，我建议他把发送短信放在最后面。\n\n* 最后，感谢这段忙碌但是每天都能感受到自己的成长的日子，感谢我的老大，对我特别好，感谢我的师傅，教了我很多。感谢一起工作的一群靠谱的百度同学，感谢一起实习的小伙伴。这段经历对我来说很难忘。PS： 百度的PM同学真的都特别漂亮，百度科技园的饭真的特别好吃。\n\n","slug":"百度实习体验","published":1,"updated":"2017-08-25T08:57:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu410038hb58lcepq03y","content":"<ul>\n<li>今天是在百度的最后一天了，4个月的实习经历一眨眼就要过去了。回头看一下，发现自己竟然已经走了那么远，看看当时面试时候的博客，觉得自己当时那么傻逼，除了会做点算法题什么都不会,虽然现在仍然很菜。</li>\n<li>总体来说，这段实习经历还是非常值得的。虽然每天都很累，从来没有10前下过班，但是也成长了许多。从刚开始的啥都不懂到现在独立负责一个项目，我觉得自己可以hold住，并不比正式的差。</li>\n<li><p>简单说下自己的几点感悟吧：</p>\n<ul>\n<li>进入BAT并没有那么难（老大一直劝我转正，被我拒绝了）。但是同样都是BAT的码农，差别却大了去了。有的只能做一些基础的业务开发（比如我所在的百家号），每天用php写一些简单的逻辑，实在是没有意思，写10个项目和写1个项目没有什么区别。在我实习的这段时间内，没有见过任何的算法，但凡涉及到算法的，都是调用IDL或者大搜的服务。但是同时百度也有IDL这样的高端部门。这也是我读研的原因，如果研究生毕业还是以进入BAT为目标，那么说明研究生白读了，还不如直接转正留下来呢。读完研后的目标应该是进入BAT的核心部门，做算法工程师。不要写没有技术含量的业务代码，否则很容易被替代，要做一点有门槛的工作，才能避免吃青春饭。</li>\n<li>关于百度的工程师文化，具体的体现就是技术人员的话语权很大，RD&gt;FE&gt;QA&gt;PM&gt;BD&gt;外包。由于QA和PM大部分都是女生，所以很多时候需要一些沟通技巧（比如撒娇卖萌哄着RD）。参与过几次评审，基本上是RD占据主动，PM只能妥协（不好意思，这个需求做不了）。QA基本打酱油。这样的好处和坏处都很明显，好处就是百度出去的技术都不是很水，但是百度的产品很弱就是了，我见到的PM每天就是研究竞品，然后想着怎么抄袭就行了，奇怪的是，高层竟然认同这种行为，美名其曰：人类共同的财富。</li>\n<li>关于业务和算法，2017年，百度押宝内容分发，我所在的百家号也属于疯狂扩张之中，不停的来新人，我3月份来的，走的时候已经是老人了。特别是来了很多糯米的人（糯米倒闭了）。但是可能由于技术没有什么难度，招进来不少水货RD（有的还要我这个实习生教他写代码）高T很少，T6都不多。大部分都是T3，T4，T5.听说策略那边有很多高T（T8，T9）。所以还是不要做业务，尽量做算法方向或者分布式系统方向，有点难度的。做业务真的没有意思，我来的时候一点都不会php，但是没关系，就算你不会，你照猫画虎，照着别人的抄都能把功能实现。因为大部分都是一些逻辑判断，数据库操作，ral调用，拼一下就行了。</li>\n<li><p>关于QA和RD，反正在百度，基本QA都是白盒测试，QA也是按照RD的标准招的。不存在只是点点点的情况（\u0010外包的活）。有些RD比QA的技术还菜。但是QA和RD的技能点不一样倒是真的。根据我的观察：</p>\n<ul>\n<li>QA重要的技能点：</li>\n<li>linux知识（特别是像awk,sed等命令的用法熟练，还有vim的操作）。</li>\n<li>熟练掌握一门脚本语言如python/shell/php（因为\u0010QA经常需要写一些脚本来统计一些东西或者搭建环境，这是基础技能）。</li>\n<li>技术的广度（你需要什么都了解一些，大到机器学习，spark,nmq，小到一个框架的原理，如Bingo框架的路由分发原理）。</li>\n<li>基本的测试技能（如怎么压测）。</li>\n<li>追查问题能力，这个特别重要，因为很多时候，比如线上出了问题和用户报了case.是QA在第一时间定位到问题然后给对应的RD去修复。这也是QA的优势，因为RD大多只是负责自己的那个模块，对其他模块都不太熟悉，但是QA因为各个模块都要测试，所以对各个模块都比较了解，比较容易定位到问题。</li>\n<li><p>自动化测试框架的搭建。怎么搭建环境，放在持续集成平台（agile）。怎么编写自动化case,覆盖到所有分支，上线之前跑一遍自动化case.</p>\n</li>\n<li><p>RD重要的技能点：</p>\n</li>\n<li>跟职位有关，技能可能相对来说比较单一，但是必须精通，比如你php开发，那你必须精通php和相关的框架，和nginx服务器原理等。但是你如果是一个算法工程师，那你只要知道相关的机器学习算法即可。比如我们这有一个博士，只会用python，但这就够了。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>简单说下自己的收获吧：</p>\n<ul>\n<li>首先是在一个成熟的大公司待了4个月，学了很多流程和规范。就像正规军一样。比如一个项目从开始到结束：首先要PM立项, 然后编写MRD，然后确定排期，然后需求评审，PM，QA，RD都要参加，在这里确定需求，什么能做，什么不能做，然后技术评审，确定技术方案。在这里确定RD和QA的排期。然后RD开始介入开发，同时QA开始编写测试case和准入case.RD过了准入case后开始提测（项目比较大可能需要分步提测）。如果项目质量太差QA可以提测直接打回。然后QA开始测试，RD修bug，测试可能需要几轮，不停回归。测试通过后就要上线了，首先需要确定上线方案，上线一般是先上预览机（小流量，设置cookie可以打到预览机）。在预览机上线上回归，然后上单台，然后上单边，然后全量。上线之后还需要线上继续回归。最后需要加上监控和报警。如果上线之后出了问题，先回滚，止损然后再追查问题。必要时需要服务降级。事故之后要做一个case study，大家一起总结问题，吸取经验。还有一些其他的规范比如提交代码必须经过code review(机器审核，代码风格检查+人工审核)。比如分支开发，分支发布，上线之前不能合入主干。上线之后删除分支。</li>\n<li>然后学到了一些线上问题的处理方案：我记得刚来的时候就出了一次比较严重的事故，我们线上的一个非核心服务挂掉了，这个服务是通过nmq调用的，导致nmq不停重试。但是核心服务和这个服务共用一个nmq，一个topic，导致nmq队列严重积压。影响了核心服务的处理。当时这个问题的解决方案是紧急下掉那个非核心服务，然后跳过nmq的命令点，先止损，不能影响核心的发文服务。事后总结的结论是架构不合理，核心服务依赖于非核心服务，需要做服务拆分，不能放在一个消息队列里面。</li>\n<li>还有一次是我们被盗链，别人利用百家号上传视频，但是并不发文，然后将mediaID拼出播放链接。相当于利用我们的流量来获取利润。当时上传的是泄露出的人民的名义，流量巨大，造成了很大的损失。当时的紧急方案是连夜加班，对mediaID 进行加密。</li>\n<li>还有就是学会了一门语言，php,上手简单，框架方便，开发起来无脑。不愧为最好的语言。但是写的时间长了可能会变得退化。</li>\n<li>还有就是了解了一些常用的技术，如nmq（百度内部的消息队列），redis（k-v型的nosql数据库）。nginx反向代理用来做负载均衡，spark用来做大数据流处理计算，我们主要用来统计日志。bns百度内部的域名解析服务，bfe百度内部的统一外部接入层。</li>\n<li>参加了3个比较大的项目，用户等级权益，父子账号，马甲号视频。</li>\n<li>还有就是参与了组里自动化测试框架的开发，当时我刚来的时候完全没有任何自动化测试，后来在一个高工的带领下，我开始编写自动化测试框架，框架主要基于phpunit单元测试，编写自动化测试case.我走的时候已经覆盖了80%的接口测试并且接入了我们的持续集成平台，上线之前必须跑一遍自动化测试。收益很大。</li>\n<li>然后就是写了很多的脚本，和一些接口，用来做一些统计，并且接入百度内部的统一前端展示平台showx（包含折线图，表格等）进行展示。给老大看，主要包括每日发文量统计，发文成功率统计，作者分润统计等。</li>\n<li>然后给RD提供了很多有价值的建议，我记得有一次，有一个数据库的事务，3个数据库必须同时修改成功才成功，然后需要发送短信，但是rd把发送短信放在了3个修改数据库操作的中间，这样如果失败的话，数据库操作会回滚，但是发送短信又不能回滚，我建议他把发送短信放在最后面。</li>\n</ul>\n</li>\n<li><p>最后，感谢这段忙碌但是每天都能感受到自己的成长的日子，感谢我的老大，对我特别好，感谢我的师傅，教了我很多。感谢一起工作的一群靠谱的百度同学，感谢一起实习的小伙伴。这段经历对我来说很难忘。PS： 百度的PM同学真的都特别漂亮，百度科技园的饭真的特别好吃。</p>\n</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>今天是在百度的最后一天了，4个月的实习经历一眨眼就要过去了。回头看一下，发现自己竟然已经走了那么远，看看当时面试时候的博客，觉得自己当时那么傻逼，除了会做点算法题什么都不会,虽然现在仍然很菜。</li>\n<li>总体来说，这段实习经历还是非常值得的。虽然每天都很累，从来没有10前下过班，但是也成长了许多。从刚开始的啥都不懂到现在独立负责一个项目，我觉得自己可以hold住，并不比正式的差。</li>\n<li><p>简单说下自己的几点感悟吧：</p>\n<ul>\n<li>进入BAT并没有那么难（老大一直劝我转正，被我拒绝了）。但是同样都是BAT的码农，差别却大了去了。有的只能做一些基础的业务开发（比如我所在的百家号），每天用php写一些简单的逻辑，实在是没有意思，写10个项目和写1个项目没有什么区别。在我实习的这段时间内，没有见过任何的算法，但凡涉及到算法的，都是调用IDL或者大搜的服务。但是同时百度也有IDL这样的高端部门。这也是我读研的原因，如果研究生毕业还是以进入BAT为目标，那么说明研究生白读了，还不如直接转正留下来呢。读完研后的目标应该是进入BAT的核心部门，做算法工程师。不要写没有技术含量的业务代码，否则很容易被替代，要做一点有门槛的工作，才能避免吃青春饭。</li>\n<li>关于百度的工程师文化，具体的体现就是技术人员的话语权很大，RD&gt;FE&gt;QA&gt;PM&gt;BD&gt;外包。由于QA和PM大部分都是女生，所以很多时候需要一些沟通技巧（比如撒娇卖萌哄着RD）。参与过几次评审，基本上是RD占据主动，PM只能妥协（不好意思，这个需求做不了）。QA基本打酱油。这样的好处和坏处都很明显，好处就是百度出去的技术都不是很水，但是百度的产品很弱就是了，我见到的PM每天就是研究竞品，然后想着怎么抄袭就行了，奇怪的是，高层竟然认同这种行为，美名其曰：人类共同的财富。</li>\n<li>关于业务和算法，2017年，百度押宝内容分发，我所在的百家号也属于疯狂扩张之中，不停的来新人，我3月份来的，走的时候已经是老人了。特别是来了很多糯米的人（糯米倒闭了）。但是可能由于技术没有什么难度，招进来不少水货RD（有的还要我这个实习生教他写代码）高T很少，T6都不多。大部分都是T3，T4，T5.听说策略那边有很多高T（T8，T9）。所以还是不要做业务，尽量做算法方向或者分布式系统方向，有点难度的。做业务真的没有意思，我来的时候一点都不会php，但是没关系，就算你不会，你照猫画虎，照着别人的抄都能把功能实现。因为大部分都是一些逻辑判断，数据库操作，ral调用，拼一下就行了。</li>\n<li><p>关于QA和RD，反正在百度，基本QA都是白盒测试，QA也是按照RD的标准招的。不存在只是点点点的情况（\u0010外包的活）。有些RD比QA的技术还菜。但是QA和RD的技能点不一样倒是真的。根据我的观察：</p>\n<ul>\n<li>QA重要的技能点：</li>\n<li>linux知识（特别是像awk,sed等命令的用法熟练，还有vim的操作）。</li>\n<li>熟练掌握一门脚本语言如python/shell/php（因为\u0010QA经常需要写一些脚本来统计一些东西或者搭建环境，这是基础技能）。</li>\n<li>技术的广度（你需要什么都了解一些，大到机器学习，spark,nmq，小到一个框架的原理，如Bingo框架的路由分发原理）。</li>\n<li>基本的测试技能（如怎么压测）。</li>\n<li>追查问题能力，这个特别重要，因为很多时候，比如线上出了问题和用户报了case.是QA在第一时间定位到问题然后给对应的RD去修复。这也是QA的优势，因为RD大多只是负责自己的那个模块，对其他模块都不太熟悉，但是QA因为各个模块都要测试，所以对各个模块都比较了解，比较容易定位到问题。</li>\n<li><p>自动化测试框架的搭建。怎么搭建环境，放在持续集成平台（agile）。怎么编写自动化case,覆盖到所有分支，上线之前跑一遍自动化case.</p>\n</li>\n<li><p>RD重要的技能点：</p>\n</li>\n<li>跟职位有关，技能可能相对来说比较单一，但是必须精通，比如你php开发，那你必须精通php和相关的框架，和nginx服务器原理等。但是你如果是一个算法工程师，那你只要知道相关的机器学习算法即可。比如我们这有一个博士，只会用python，但这就够了。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>简单说下自己的收获吧：</p>\n<ul>\n<li>首先是在一个成熟的大公司待了4个月，学了很多流程和规范。就像正规军一样。比如一个项目从开始到结束：首先要PM立项, 然后编写MRD，然后确定排期，然后需求评审，PM，QA，RD都要参加，在这里确定需求，什么能做，什么不能做，然后技术评审，确定技术方案。在这里确定RD和QA的排期。然后RD开始介入开发，同时QA开始编写测试case和准入case.RD过了准入case后开始提测（项目比较大可能需要分步提测）。如果项目质量太差QA可以提测直接打回。然后QA开始测试，RD修bug，测试可能需要几轮，不停回归。测试通过后就要上线了，首先需要确定上线方案，上线一般是先上预览机（小流量，设置cookie可以打到预览机）。在预览机上线上回归，然后上单台，然后上单边，然后全量。上线之后还需要线上继续回归。最后需要加上监控和报警。如果上线之后出了问题，先回滚，止损然后再追查问题。必要时需要服务降级。事故之后要做一个case study，大家一起总结问题，吸取经验。还有一些其他的规范比如提交代码必须经过code review(机器审核，代码风格检查+人工审核)。比如分支开发，分支发布，上线之前不能合入主干。上线之后删除分支。</li>\n<li>然后学到了一些线上问题的处理方案：我记得刚来的时候就出了一次比较严重的事故，我们线上的一个非核心服务挂掉了，这个服务是通过nmq调用的，导致nmq不停重试。但是核心服务和这个服务共用一个nmq，一个topic，导致nmq队列严重积压。影响了核心服务的处理。当时这个问题的解决方案是紧急下掉那个非核心服务，然后跳过nmq的命令点，先止损，不能影响核心的发文服务。事后总结的结论是架构不合理，核心服务依赖于非核心服务，需要做服务拆分，不能放在一个消息队列里面。</li>\n<li>还有一次是我们被盗链，别人利用百家号上传视频，但是并不发文，然后将mediaID拼出播放链接。相当于利用我们的流量来获取利润。当时上传的是泄露出的人民的名义，流量巨大，造成了很大的损失。当时的紧急方案是连夜加班，对mediaID 进行加密。</li>\n<li>还有就是学会了一门语言，php,上手简单，框架方便，开发起来无脑。不愧为最好的语言。但是写的时间长了可能会变得退化。</li>\n<li>还有就是了解了一些常用的技术，如nmq（百度内部的消息队列），redis（k-v型的nosql数据库）。nginx反向代理用来做负载均衡，spark用来做大数据流处理计算，我们主要用来统计日志。bns百度内部的域名解析服务，bfe百度内部的统一外部接入层。</li>\n<li>参加了3个比较大的项目，用户等级权益，父子账号，马甲号视频。</li>\n<li>还有就是参与了组里自动化测试框架的开发，当时我刚来的时候完全没有任何自动化测试，后来在一个高工的带领下，我开始编写自动化测试框架，框架主要基于phpunit单元测试，编写自动化测试case.我走的时候已经覆盖了80%的接口测试并且接入了我们的持续集成平台，上线之前必须跑一遍自动化测试。收益很大。</li>\n<li>然后就是写了很多的脚本，和一些接口，用来做一些统计，并且接入百度内部的统一前端展示平台showx（包含折线图，表格等）进行展示。给老大看，主要包括每日发文量统计，发文成功率统计，作者分润统计等。</li>\n<li>然后给RD提供了很多有价值的建议，我记得有一次，有一个数据库的事务，3个数据库必须同时修改成功才成功，然后需要发送短信，但是rd把发送短信放在了3个修改数据库操作的中间，这样如果失败的话，数据库操作会回滚，但是发送短信又不能回滚，我建议他把发送短信放在最后面。</li>\n</ul>\n</li>\n<li><p>最后，感谢这段忙碌但是每天都能感受到自己的成长的日子，感谢我的老大，对我特别好，感谢我的师傅，教了我很多。感谢一起工作的一群靠谱的百度同学，感谢一起实习的小伙伴。这段经历对我来说很难忘。PS： 百度的PM同学真的都特别漂亮，百度科技园的饭真的特别好吃。</p>\n</li>\n</ul>\n"},{"title":"计算机组成原理基础","date":"2015-11-03T12:37:11.000Z","_content":"\n* 寄存器： 在CPU中   \n地址总线： 传送地址，在内存中找到相应的地址。只能是从CPU---\n地址总线： 传送数据，从CPU到外面，或者从外面到CPU\n举例：   mov   [BX]，AX\ncpu先计算出物理地址，再通过地址总线（AB）找到内存中的地址（数电讲过，16根线可以1，0找到2^16个地址）\n然后将AX中的值通过数据总线（DB）写到该内存。（怎么实现的就是硬件的问题了）。\n\n* 所以处理器的位数一般指的是 通用寄存器的位数。跟总线根数没有直接关系。寄存器越大，计算能力就越快，因为运算都是通过寄存器进行的。\n\n* 寻址能力与地址总线根数有关系。32根总线寻址空间就是2^32=4G\n\n* 关于操作系统位数和CPU 位数，其实没有什么区别，64位只有配合64 位的操作系统和64 位的软件才能发挥最大效能。64 CPU从硬件上提供了\n支持，如地址总线变大，寄存器变大，但是如果采用32 的系统，就相当于给你提供了 FAX（假设，64位）但是你的程序不用。\n\n* 64位程序只能64位系统，比如可能寻址超过4G,32位系统就跟不上，但是64位却可以。\n\n* 64位系统必须64位CPU，因为64位系统就是为64位的处理器设计的，处理器变了，操作系统肯定也需要变，因为毕竟操作系统\n在软件执行时很重要。举个例子，存储器管理，可能32位系统最多设计的就是分配4G内存，但是现在64位寻址能力更强，系统\n就应该相应的分配更大内存。\n\n###总结：都是向下兼容：硬件升级-----操作系统升级-----软件升级硬件兼容旧操作系统。操作系统兼容旧软件。反之就不兼容。\n\n* 程序向下兼容问题：\n机器码跟平台有很大关系：\nlinux,window 就不说了，文件格式，DLL什么都不一样。\n都是windows,系统升级了有时软件不兼容，因为dll之类的要重新做，可能就不兼容了.\n源代码级别的，跟平台关系：\njava 完全跨平台。所有类型都是定的。\nc常常说是源代码级别跨平台的，但是不严谨。因为c并没有规定 int 的字长，字长是编译器根据操作系统来决定的。所以可能申请内存扩平台会错误，\n但是写成 sizeof(int )一般就没有问题了。比如为了兼容DOS程序引入DOS系统和实模式。\n\n* 大端和小端： 小端：低字节在低地址，高字节在高字节，大端：低字节在高地址，高字节在低地址","source":"_posts/计算机组成原理基础.md","raw":"---\ntitle: 计算机组成原理基础\ndate: 2015-11-03 20:37:11\ntags: \n  - 总线\n  - cpu位数\n  - 计算机组成原理\ncategories: 计算机基础\n---\n\n* 寄存器： 在CPU中   \n地址总线： 传送地址，在内存中找到相应的地址。只能是从CPU---\n地址总线： 传送数据，从CPU到外面，或者从外面到CPU\n举例：   mov   [BX]，AX\ncpu先计算出物理地址，再通过地址总线（AB）找到内存中的地址（数电讲过，16根线可以1，0找到2^16个地址）\n然后将AX中的值通过数据总线（DB）写到该内存。（怎么实现的就是硬件的问题了）。\n\n* 所以处理器的位数一般指的是 通用寄存器的位数。跟总线根数没有直接关系。寄存器越大，计算能力就越快，因为运算都是通过寄存器进行的。\n\n* 寻址能力与地址总线根数有关系。32根总线寻址空间就是2^32=4G\n\n* 关于操作系统位数和CPU 位数，其实没有什么区别，64位只有配合64 位的操作系统和64 位的软件才能发挥最大效能。64 CPU从硬件上提供了\n支持，如地址总线变大，寄存器变大，但是如果采用32 的系统，就相当于给你提供了 FAX（假设，64位）但是你的程序不用。\n\n* 64位程序只能64位系统，比如可能寻址超过4G,32位系统就跟不上，但是64位却可以。\n\n* 64位系统必须64位CPU，因为64位系统就是为64位的处理器设计的，处理器变了，操作系统肯定也需要变，因为毕竟操作系统\n在软件执行时很重要。举个例子，存储器管理，可能32位系统最多设计的就是分配4G内存，但是现在64位寻址能力更强，系统\n就应该相应的分配更大内存。\n\n###总结：都是向下兼容：硬件升级-----操作系统升级-----软件升级硬件兼容旧操作系统。操作系统兼容旧软件。反之就不兼容。\n\n* 程序向下兼容问题：\n机器码跟平台有很大关系：\nlinux,window 就不说了，文件格式，DLL什么都不一样。\n都是windows,系统升级了有时软件不兼容，因为dll之类的要重新做，可能就不兼容了.\n源代码级别的，跟平台关系：\njava 完全跨平台。所有类型都是定的。\nc常常说是源代码级别跨平台的，但是不严谨。因为c并没有规定 int 的字长，字长是编译器根据操作系统来决定的。所以可能申请内存扩平台会错误，\n但是写成 sizeof(int )一般就没有问题了。比如为了兼容DOS程序引入DOS系统和实模式。\n\n* 大端和小端： 小端：低字节在低地址，高字节在高字节，大端：低字节在高地址，高字节在低地址","slug":"计算机组成原理基础","published":1,"updated":"2016-11-03T09:52:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu43003bhb58jhudcq43","content":"<ul>\n<li><p>寄存器： 在CPU中<br>地址总线： 传送地址，在内存中找到相应的地址。只能是从CPU—<br>地址总线： 传送数据，从CPU到外面，或者从外面到CPU<br>举例：   mov   [BX]，AX<br>cpu先计算出物理地址，再通过地址总线（AB）找到内存中的地址（数电讲过，16根线可以1，0找到2^16个地址）<br>然后将AX中的值通过数据总线（DB）写到该内存。（怎么实现的就是硬件的问题了）。</p>\n</li>\n<li><p>所以处理器的位数一般指的是 通用寄存器的位数。跟总线根数没有直接关系。寄存器越大，计算能力就越快，因为运算都是通过寄存器进行的。</p>\n</li>\n<li><p>寻址能力与地址总线根数有关系。32根总线寻址空间就是2^32=4G</p>\n</li>\n<li><p>关于操作系统位数和CPU 位数，其实没有什么区别，64位只有配合64 位的操作系统和64 位的软件才能发挥最大效能。64 CPU从硬件上提供了<br>支持，如地址总线变大，寄存器变大，但是如果采用32 的系统，就相当于给你提供了 FAX（假设，64位）但是你的程序不用。</p>\n</li>\n<li><p>64位程序只能64位系统，比如可能寻址超过4G,32位系统就跟不上，但是64位却可以。</p>\n</li>\n<li><p>64位系统必须64位CPU，因为64位系统就是为64位的处理器设计的，处理器变了，操作系统肯定也需要变，因为毕竟操作系统<br>在软件执行时很重要。举个例子，存储器管理，可能32位系统最多设计的就是分配4G内存，但是现在64位寻址能力更强，系统<br>就应该相应的分配更大内存。</p>\n</li>\n</ul>\n<p>###总结：都是向下兼容：硬件升级—–操作系统升级—–软件升级硬件兼容旧操作系统。操作系统兼容旧软件。反之就不兼容。</p>\n<ul>\n<li><p>程序向下兼容问题：<br>机器码跟平台有很大关系：<br>linux,window 就不说了，文件格式，DLL什么都不一样。<br>都是windows,系统升级了有时软件不兼容，因为dll之类的要重新做，可能就不兼容了.<br>源代码级别的，跟平台关系：<br>java 完全跨平台。所有类型都是定的。<br>c常常说是源代码级别跨平台的，但是不严谨。因为c并没有规定 int 的字长，字长是编译器根据操作系统来决定的。所以可能申请内存扩平台会错误，<br>但是写成 sizeof(int )一般就没有问题了。比如为了兼容DOS程序引入DOS系统和实模式。</p>\n</li>\n<li><p>大端和小端： 小端：低字节在低地址，高字节在高字节，大端：低字节在高地址，高字节在低地址</p>\n</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li><p>寄存器： 在CPU中<br>地址总线： 传送地址，在内存中找到相应的地址。只能是从CPU—<br>地址总线： 传送数据，从CPU到外面，或者从外面到CPU<br>举例：   mov   [BX]，AX<br>cpu先计算出物理地址，再通过地址总线（AB）找到内存中的地址（数电讲过，16根线可以1，0找到2^16个地址）<br>然后将AX中的值通过数据总线（DB）写到该内存。（怎么实现的就是硬件的问题了）。</p>\n</li>\n<li><p>所以处理器的位数一般指的是 通用寄存器的位数。跟总线根数没有直接关系。寄存器越大，计算能力就越快，因为运算都是通过寄存器进行的。</p>\n</li>\n<li><p>寻址能力与地址总线根数有关系。32根总线寻址空间就是2^32=4G</p>\n</li>\n<li><p>关于操作系统位数和CPU 位数，其实没有什么区别，64位只有配合64 位的操作系统和64 位的软件才能发挥最大效能。64 CPU从硬件上提供了<br>支持，如地址总线变大，寄存器变大，但是如果采用32 的系统，就相当于给你提供了 FAX（假设，64位）但是你的程序不用。</p>\n</li>\n<li><p>64位程序只能64位系统，比如可能寻址超过4G,32位系统就跟不上，但是64位却可以。</p>\n</li>\n<li><p>64位系统必须64位CPU，因为64位系统就是为64位的处理器设计的，处理器变了，操作系统肯定也需要变，因为毕竟操作系统<br>在软件执行时很重要。举个例子，存储器管理，可能32位系统最多设计的就是分配4G内存，但是现在64位寻址能力更强，系统<br>就应该相应的分配更大内存。</p>\n</li>\n</ul>\n<p>###总结：都是向下兼容：硬件升级—–操作系统升级—–软件升级硬件兼容旧操作系统。操作系统兼容旧软件。反之就不兼容。</p>\n<ul>\n<li><p>程序向下兼容问题：<br>机器码跟平台有很大关系：<br>linux,window 就不说了，文件格式，DLL什么都不一样。<br>都是windows,系统升级了有时软件不兼容，因为dll之类的要重新做，可能就不兼容了.<br>源代码级别的，跟平台关系：<br>java 完全跨平台。所有类型都是定的。<br>c常常说是源代码级别跨平台的，但是不严谨。因为c并没有规定 int 的字长，字长是编译器根据操作系统来决定的。所以可能申请内存扩平台会错误，<br>但是写成 sizeof(int )一般就没有问题了。比如为了兼容DOS程序引入DOS系统和实模式。</p>\n</li>\n<li><p>大端和小端： 小端：低字节在低地址，高字节在高字节，大端：低字节在高地址，高字节在低地址</p>\n</li>\n</ul>\n"},{"title":"计网学习笔记","date":"2016-10-24T03:28:41.000Z","_content":"\n* 七层协议中，上一层对下一次是封装好的，比如tcp头，ip头对数据链路层来说都是一样的，都当成普通的报文来处理。\n\n* 在arp协议解析的时候，主机和路由器地位是等价的，主机(路由器)发送广播，ip符合条件的主机(路由器)接收消息，发送个回应，从而让发送方确定目的地址的mac地址。所以在硬件层面，不管是主机还是路由器，都是通过mac地址发送的。\n\n* arp表，存在电脑中，是当前局域网内ip和mac地址的对应表，一般来说，是通过ip查到mac地址，查不到才用到上面所说的确定mac地址，确定后就记录到当前的arp表中。\n\n* 内网，外网，一般来说ipconfig查到的都是内网ip，转换成外网ip要\n经过NAT地址转换,判断内网ip的方法是：     \n10.xxx.xxx.xxx                               \n192.168.xxx.xxx     \n172.16.0.0-172.31.255.255\n\n* 主机或者路由器在转发的时候先查route表，再查arp表                              \n![](../pictures/计网学习笔记1.jpg)\n先把目的ip和mask做&，然后选择路由        \neg1: 10.0.6.86, 符合第三条，Flags没有G，就是没有网关(属于同一局域网)，从eth0(网卡接口，一台计算机可能有多个网卡)出;然后再查arp表，找到了就直接发走，找不到发送广播(从eth0口)找到目的主机，再发出去。                                  \neg2: 10.0.6.203，这个比较特殊(localhost优先级高)通过lo发到本地环回     \neg3: 匹配不到，选择default网关，从eth0口出，然后网关再负责转发，网关就是局域网的出口。\n\n\n* 在手动设置网络时，需要设置ip,子网掩码，dns地址，默认网关。\n\t* 子网掩码：不用设置，按照DHCP的设置，因为DHCP表示的是这个局域网的大小，你没法改变。比如说一个路由器下的局域网的子网掩码为255.255.255.0，表示这是一个C类地址，子网内有255个主机。\n\t* ip和默认网关，这个可以改，但是需要在一定的范围内改，先用默认网关&子网掩码，可以得到网段，这部分你不能改，你只能改后面的主机。比如默认网关为192.168.1.1,子网掩码为255.255.255.0,则网段为192.168.1.x;x可以从0-255之间你随便改。\n\t* NAT地址转换: \n\t\t* 根据dst_ip区分\n\t\t* dst ip+src port区分\n\t\t* 需要对src_ip也做一个nat\n\t\t* [参考资料](http://www.cnblogs.com/wbxjiayou/p/5150753.html)\n\n* http：url和uri的区别：\n\t* url: universal resource location,我们通常见到的链接都是,url是uri的一种\n\t* uri: universal resource identifier,能够标识一个东西的很多，不一定是url","source":"_posts/计网学习笔记.md","raw":"---\ntitle: 计网学习笔记\ndate: 2016-10-24 11:28:41\ntags: \n  - arp\n  - 网络\ncategories: 计算机网络\n---\n\n* 七层协议中，上一层对下一次是封装好的，比如tcp头，ip头对数据链路层来说都是一样的，都当成普通的报文来处理。\n\n* 在arp协议解析的时候，主机和路由器地位是等价的，主机(路由器)发送广播，ip符合条件的主机(路由器)接收消息，发送个回应，从而让发送方确定目的地址的mac地址。所以在硬件层面，不管是主机还是路由器，都是通过mac地址发送的。\n\n* arp表，存在电脑中，是当前局域网内ip和mac地址的对应表，一般来说，是通过ip查到mac地址，查不到才用到上面所说的确定mac地址，确定后就记录到当前的arp表中。\n\n* 内网，外网，一般来说ipconfig查到的都是内网ip，转换成外网ip要\n经过NAT地址转换,判断内网ip的方法是：     \n10.xxx.xxx.xxx                               \n192.168.xxx.xxx     \n172.16.0.0-172.31.255.255\n\n* 主机或者路由器在转发的时候先查route表，再查arp表                              \n![](../pictures/计网学习笔记1.jpg)\n先把目的ip和mask做&，然后选择路由        \neg1: 10.0.6.86, 符合第三条，Flags没有G，就是没有网关(属于同一局域网)，从eth0(网卡接口，一台计算机可能有多个网卡)出;然后再查arp表，找到了就直接发走，找不到发送广播(从eth0口)找到目的主机，再发出去。                                  \neg2: 10.0.6.203，这个比较特殊(localhost优先级高)通过lo发到本地环回     \neg3: 匹配不到，选择default网关，从eth0口出，然后网关再负责转发，网关就是局域网的出口。\n\n\n* 在手动设置网络时，需要设置ip,子网掩码，dns地址，默认网关。\n\t* 子网掩码：不用设置，按照DHCP的设置，因为DHCP表示的是这个局域网的大小，你没法改变。比如说一个路由器下的局域网的子网掩码为255.255.255.0，表示这是一个C类地址，子网内有255个主机。\n\t* ip和默认网关，这个可以改，但是需要在一定的范围内改，先用默认网关&子网掩码，可以得到网段，这部分你不能改，你只能改后面的主机。比如默认网关为192.168.1.1,子网掩码为255.255.255.0,则网段为192.168.1.x;x可以从0-255之间你随便改。\n\t* NAT地址转换: \n\t\t* 根据dst_ip区分\n\t\t* dst ip+src port区分\n\t\t* 需要对src_ip也做一个nat\n\t\t* [参考资料](http://www.cnblogs.com/wbxjiayou/p/5150753.html)\n\n* http：url和uri的区别：\n\t* url: universal resource location,我们通常见到的链接都是,url是uri的一种\n\t* uri: universal resource identifier,能够标识一个东西的很多，不一定是url","slug":"计网学习笔记","published":1,"updated":"2017-08-24T13:22:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu45003ghb58iv37cl23","content":"<ul>\n<li><p>七层协议中，上一层对下一次是封装好的，比如tcp头，ip头对数据链路层来说都是一样的，都当成普通的报文来处理。</p>\n</li>\n<li><p>在arp协议解析的时候，主机和路由器地位是等价的，主机(路由器)发送广播，ip符合条件的主机(路由器)接收消息，发送个回应，从而让发送方确定目的地址的mac地址。所以在硬件层面，不管是主机还是路由器，都是通过mac地址发送的。</p>\n</li>\n<li><p>arp表，存在电脑中，是当前局域网内ip和mac地址的对应表，一般来说，是通过ip查到mac地址，查不到才用到上面所说的确定mac地址，确定后就记录到当前的arp表中。</p>\n</li>\n<li><p>内网，外网，一般来说ipconfig查到的都是内网ip，转换成外网ip要<br>经过NAT地址转换,判断内网ip的方法是：<br>10.xxx.xxx.xxx<br>192.168.xxx.xxx<br>172.16.0.0-172.31.255.255</p>\n</li>\n<li><p>主机或者路由器在转发的时候先查route表，再查arp表<br><img src=\"../pictures/计网学习笔记1.jpg\" alt=\"\"><br>先把目的ip和mask做&amp;，然后选择路由<br>eg1: 10.0.6.86, 符合第三条，Flags没有G，就是没有网关(属于同一局域网)，从eth0(网卡接口，一台计算机可能有多个网卡)出;然后再查arp表，找到了就直接发走，找不到发送广播(从eth0口)找到目的主机，再发出去。<br>eg2: 10.0.6.203，这个比较特殊(localhost优先级高)通过lo发到本地环回<br>eg3: 匹配不到，选择default网关，从eth0口出，然后网关再负责转发，网关就是局域网的出口。</p>\n</li>\n</ul>\n<ul>\n<li><p>在手动设置网络时，需要设置ip,子网掩码，dns地址，默认网关。</p>\n<ul>\n<li>子网掩码：不用设置，按照DHCP的设置，因为DHCP表示的是这个局域网的大小，你没法改变。比如说一个路由器下的局域网的子网掩码为255.255.255.0，表示这是一个C类地址，子网内有255个主机。</li>\n<li>ip和默认网关，这个可以改，但是需要在一定的范围内改，先用默认网关&amp;子网掩码，可以得到网段，这部分你不能改，你只能改后面的主机。比如默认网关为192.168.1.1,子网掩码为255.255.255.0,则网段为192.168.1.x;x可以从0-255之间你随便改。</li>\n<li>NAT地址转换: <ul>\n<li>根据dst_ip区分</li>\n<li>dst ip+src port区分</li>\n<li>需要对src_ip也做一个nat</li>\n<li><a href=\"http://www.cnblogs.com/wbxjiayou/p/5150753.html\" target=\"_blank\" rel=\"external\">参考资料</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>http：url和uri的区别：</p>\n<ul>\n<li>url: universal resource location,我们通常见到的链接都是,url是uri的一种</li>\n<li>uri: universal resource identifier,能够标识一个东西的很多，不一定是url</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li><p>七层协议中，上一层对下一次是封装好的，比如tcp头，ip头对数据链路层来说都是一样的，都当成普通的报文来处理。</p>\n</li>\n<li><p>在arp协议解析的时候，主机和路由器地位是等价的，主机(路由器)发送广播，ip符合条件的主机(路由器)接收消息，发送个回应，从而让发送方确定目的地址的mac地址。所以在硬件层面，不管是主机还是路由器，都是通过mac地址发送的。</p>\n</li>\n<li><p>arp表，存在电脑中，是当前局域网内ip和mac地址的对应表，一般来说，是通过ip查到mac地址，查不到才用到上面所说的确定mac地址，确定后就记录到当前的arp表中。</p>\n</li>\n<li><p>内网，外网，一般来说ipconfig查到的都是内网ip，转换成外网ip要<br>经过NAT地址转换,判断内网ip的方法是：<br>10.xxx.xxx.xxx<br>192.168.xxx.xxx<br>172.16.0.0-172.31.255.255</p>\n</li>\n<li><p>主机或者路由器在转发的时候先查route表，再查arp表<br><img src=\"../pictures/计网学习笔记1.jpg\" alt=\"\"><br>先把目的ip和mask做&amp;，然后选择路由<br>eg1: 10.0.6.86, 符合第三条，Flags没有G，就是没有网关(属于同一局域网)，从eth0(网卡接口，一台计算机可能有多个网卡)出;然后再查arp表，找到了就直接发走，找不到发送广播(从eth0口)找到目的主机，再发出去。<br>eg2: 10.0.6.203，这个比较特殊(localhost优先级高)通过lo发到本地环回<br>eg3: 匹配不到，选择default网关，从eth0口出，然后网关再负责转发，网关就是局域网的出口。</p>\n</li>\n</ul>\n<ul>\n<li><p>在手动设置网络时，需要设置ip,子网掩码，dns地址，默认网关。</p>\n<ul>\n<li>子网掩码：不用设置，按照DHCP的设置，因为DHCP表示的是这个局域网的大小，你没法改变。比如说一个路由器下的局域网的子网掩码为255.255.255.0，表示这是一个C类地址，子网内有255个主机。</li>\n<li>ip和默认网关，这个可以改，但是需要在一定的范围内改，先用默认网关&amp;子网掩码，可以得到网段，这部分你不能改，你只能改后面的主机。比如默认网关为192.168.1.1,子网掩码为255.255.255.0,则网段为192.168.1.x;x可以从0-255之间你随便改。</li>\n<li>NAT地址转换: <ul>\n<li>根据dst_ip区分</li>\n<li>dst ip+src port区分</li>\n<li>需要对src_ip也做一个nat</li>\n<li><a href=\"http://www.cnblogs.com/wbxjiayou/p/5150753.html\">参考资料</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>http：url和uri的区别：</p>\n<ul>\n<li>url: universal resource location,我们通常见到的链接都是,url是uri的一种</li>\n<li>uri: universal resource identifier,能够标识一个东西的很多，不一定是url</li>\n</ul>\n</li>\n</ul>\n"},{"title":"面试经典编程题","date":"2016-11-25T10:27:23.000Z","_content":"\n*  1：给定一个字符串，删去几个字符，使其成为回文串，求最少要删去几个字符\t\t\t\n  A：reverse字符串，求两个字符串的最长公共子序列为len,总长度减去len就是结果\n  \n*  2：求最长回文子序列\t\t\t\t\t\t\t                  \n  A: reverse字符串，求两个串的最长公共子序列\n  \n*  3：最长回文子串     \n    A:以一点为中心向外拓展法  \t\t\n    \n*  4：reverse链表\t(I,II)\t\n[reverse I](https://leetcode.com/submissions/detail/84872614/)\t\t\n[reverse II](https://leetcode.com/submissions/detail/69092284/)\n \n* 5：各种排序，冒泡，插入，选择，归并，快排，堆排序       \n[查看链接]()\n\n  \n* 6：最大子数组和(dp)\t\t\t\n[查看代码](https://leetcode.com/submissions/detail/84085745/)\n\n* 7：编辑距离问题\t\t\t\n[查看代码](https://leetcode.com/submissions/detail/90513333/)\n\n* 8：将一个字符串中的大写字母挪到后面去，相对位置不变，如将aAbcBd变成abcdAB\t\t\t\t\t\t\t\t\t\t\n\tA:类似冒泡排序，大写字母依次浮动到后面\t\t\n\t[查看代码](https://www.nowcoder.com/profile/330014/codeBookDetail?submissionId=8275254)\n* 9: 给一个数组，求一个子区间，满足该区间的最小值*区间和最大，输出这个最大和的值和对应的区间(@今日头条)。  \n\t* 暴力的解法是以枚举每个元素，以该元素为最小值向两边拓展，复杂度o(n^2)\n\t* 正确的解法：这是一道单调栈的典型例题，用单调栈来做复杂度o(n)。[代码](http://blog.csdn.net/u010885899/article/details/49148025)\n\t\t* 所谓的单调栈就是维护一个栈，从栈底到栈顶递增。维护方法：数组元素依次入栈，比栈顶元素小就pop，知道插入合适的位置中。\n\t\t* 需要注意：用到栈的时候，自已用数组模拟比stl快很多，因为stl的push，top都是函数，数组模拟不是。\n* 10：给一个二维平面上的集合，求所有符合要求的点，该点满足：其他点的x和y不能同时>它。也就是说不存在\u0010\u0010\u0010\u0010\u0010\u0010\u0010\u0010\u0010\u0010一个点，在它的右上方。  \n  A: 设struct {int x,int y}.对结构体数组按照x的大小排序，然后从后往前遍历，期间维护一个最大的Y，如果某个点的y大于等于Y，则该点满足条件。  \n* 11： 有一个随机函数A以p的概率返回0,(1-p)的概率返回1，设计一个函数，该函数以1/2的概率返回0和1?  \n A: 一开始证明这个算法的我是将random函数调用i次返回0的概率相加，然后算等比数列的和是1/2  \n 后来想想不管调用几层返回结果，每一层返回0和1的概率总是一样的。所以最终返回0和1的结果也是一样的。【二项分布】。\n \n ```\n int random(){\t\t\t\t\n \twhile(true){\n \t\tint i=A();\n \t\tint j=A();\n \t\tif(i==0&&j==1){\n \t\t\treturn 0;\n \t\t\tbreak;\n \t\t}\n \t\tif(i==1&&j==0){\n \t\t\treturn 1;\n \t\t\tbreak;\n \t\t}\n \t\tcontinue;\n \t}\n }\n ```\t\n* 12 统计单词个数：\n\t* 这道题本来非常简单，但是由于我在dennis ritchie的书上看到一种解法非常优雅，记录一下，常规做法要去掉两边的空格，这种解法不用。 \n\n\t```\n\t\twhile(getline(cin,str)){\n\t\t\tint state=0,count=0; //state=0表示当前状态不在一个单词中\n\t\t\tstring str;\n\t\t\tint len=str.length();\n\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\tif(str[i]==' '||str[i]=='\\t'||str[i]=='\\n'){\n\t\t\t\t\tstate=0;\n\t\t\t\t}\n\t\t\t\telse if(state==0){\n\t\t\t\t\tcount++;\n\t\t\t\t\tstate=1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcout<<count<<endl;\n\t}\n\t```\n* 数组右移k位:(就是把数组后面的k个挪到前面来)\n\n\t1,2,3,4,5,6 -> 5,6,1,2,3,4\n\t* 时间o(n)，空间o(n): 先把后面的k个存起来temp，然后再赋值给a的前面\n\t* 时间o(n*n)，空间o(1)：每次右移一个\n\t* 时间o(n),空间o(1): 整体reverse,前k个reverse,剩下的reverse","source":"_posts/面试经典编程题.md","raw":"---\ntitle: 面试经典编程题\ndate: 2016-11-25 18:27:23\ncategories: 面试题\ntags:\n  - 面试\n  - 编程题\n---\n\n*  1：给定一个字符串，删去几个字符，使其成为回文串，求最少要删去几个字符\t\t\t\n  A：reverse字符串，求两个字符串的最长公共子序列为len,总长度减去len就是结果\n  \n*  2：求最长回文子序列\t\t\t\t\t\t\t                  \n  A: reverse字符串，求两个串的最长公共子序列\n  \n*  3：最长回文子串     \n    A:以一点为中心向外拓展法  \t\t\n    \n*  4：reverse链表\t(I,II)\t\n[reverse I](https://leetcode.com/submissions/detail/84872614/)\t\t\n[reverse II](https://leetcode.com/submissions/detail/69092284/)\n \n* 5：各种排序，冒泡，插入，选择，归并，快排，堆排序       \n[查看链接]()\n\n  \n* 6：最大子数组和(dp)\t\t\t\n[查看代码](https://leetcode.com/submissions/detail/84085745/)\n\n* 7：编辑距离问题\t\t\t\n[查看代码](https://leetcode.com/submissions/detail/90513333/)\n\n* 8：将一个字符串中的大写字母挪到后面去，相对位置不变，如将aAbcBd变成abcdAB\t\t\t\t\t\t\t\t\t\t\n\tA:类似冒泡排序，大写字母依次浮动到后面\t\t\n\t[查看代码](https://www.nowcoder.com/profile/330014/codeBookDetail?submissionId=8275254)\n* 9: 给一个数组，求一个子区间，满足该区间的最小值*区间和最大，输出这个最大和的值和对应的区间(@今日头条)。  \n\t* 暴力的解法是以枚举每个元素，以该元素为最小值向两边拓展，复杂度o(n^2)\n\t* 正确的解法：这是一道单调栈的典型例题，用单调栈来做复杂度o(n)。[代码](http://blog.csdn.net/u010885899/article/details/49148025)\n\t\t* 所谓的单调栈就是维护一个栈，从栈底到栈顶递增。维护方法：数组元素依次入栈，比栈顶元素小就pop，知道插入合适的位置中。\n\t\t* 需要注意：用到栈的时候，自已用数组模拟比stl快很多，因为stl的push，top都是函数，数组模拟不是。\n* 10：给一个二维平面上的集合，求所有符合要求的点，该点满足：其他点的x和y不能同时>它。也就是说不存在\u0010\u0010\u0010\u0010\u0010\u0010\u0010\u0010\u0010\u0010一个点，在它的右上方。  \n  A: 设struct {int x,int y}.对结构体数组按照x的大小排序，然后从后往前遍历，期间维护一个最大的Y，如果某个点的y大于等于Y，则该点满足条件。  \n* 11： 有一个随机函数A以p的概率返回0,(1-p)的概率返回1，设计一个函数，该函数以1/2的概率返回0和1?  \n A: 一开始证明这个算法的我是将random函数调用i次返回0的概率相加，然后算等比数列的和是1/2  \n 后来想想不管调用几层返回结果，每一层返回0和1的概率总是一样的。所以最终返回0和1的结果也是一样的。【二项分布】。\n \n ```\n int random(){\t\t\t\t\n \twhile(true){\n \t\tint i=A();\n \t\tint j=A();\n \t\tif(i==0&&j==1){\n \t\t\treturn 0;\n \t\t\tbreak;\n \t\t}\n \t\tif(i==1&&j==0){\n \t\t\treturn 1;\n \t\t\tbreak;\n \t\t}\n \t\tcontinue;\n \t}\n }\n ```\t\n* 12 统计单词个数：\n\t* 这道题本来非常简单，但是由于我在dennis ritchie的书上看到一种解法非常优雅，记录一下，常规做法要去掉两边的空格，这种解法不用。 \n\n\t```\n\t\twhile(getline(cin,str)){\n\t\t\tint state=0,count=0; //state=0表示当前状态不在一个单词中\n\t\t\tstring str;\n\t\t\tint len=str.length();\n\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\tif(str[i]==' '||str[i]=='\\t'||str[i]=='\\n'){\n\t\t\t\t\tstate=0;\n\t\t\t\t}\n\t\t\t\telse if(state==0){\n\t\t\t\t\tcount++;\n\t\t\t\t\tstate=1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcout<<count<<endl;\n\t}\n\t```\n* 数组右移k位:(就是把数组后面的k个挪到前面来)\n\n\t1,2,3,4,5,6 -> 5,6,1,2,3,4\n\t* 时间o(n)，空间o(n): 先把后面的k个存起来temp，然后再赋值给a的前面\n\t* 时间o(n*n)，空间o(1)：每次右移一个\n\t* 时间o(n),空间o(1): 整体reverse,前k个reverse,剩下的reverse","slug":"面试经典编程题","published":1,"updated":"2018-01-04T08:30:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjckatu47003ihb58dmjx1r0o","content":"<ul>\n<li><p>1：给定一个字符串，删去几个字符，使其成为回文串，求最少要删去几个字符<br>A：reverse字符串，求两个字符串的最长公共子序列为len,总长度减去len就是结果</p>\n</li>\n<li><p>2：求最长回文子序列<br>A: reverse字符串，求两个串的最长公共子序列</p>\n</li>\n<li><p>3：最长回文子串<br> A:以一点为中心向外拓展法          </p>\n</li>\n<li><p>4：reverse链表    (I,II)<br><a href=\"https://leetcode.com/submissions/detail/84872614/\" target=\"_blank\" rel=\"external\">reverse I</a><br><a href=\"https://leetcode.com/submissions/detail/69092284/\" target=\"_blank\" rel=\"external\">reverse II</a></p>\n</li>\n<li><p>5：各种排序，冒泡，插入，选择，归并，快排，堆排序<br><a href=\"\">查看链接</a></p>\n</li>\n</ul>\n<ul>\n<li><p>6：最大子数组和(dp)<br><a href=\"https://leetcode.com/submissions/detail/84085745/\" target=\"_blank\" rel=\"external\">查看代码</a></p>\n</li>\n<li><p>7：编辑距离问题<br><a href=\"https://leetcode.com/submissions/detail/90513333/\" target=\"_blank\" rel=\"external\">查看代码</a></p>\n</li>\n<li><p>8：将一个字符串中的大写字母挪到后面去，相对位置不变，如将aAbcBd变成abcdAB<br>  A:类似冒泡排序，大写字母依次浮动到后面<br>  <a href=\"https://www.nowcoder.com/profile/330014/codeBookDetail?submissionId=8275254\" target=\"_blank\" rel=\"external\">查看代码</a></p>\n</li>\n<li>9: 给一个数组，求一个子区间，满足该区间的最小值*区间和最大，输出这个最大和的值和对应的区间(@今日头条)。  <ul>\n<li>暴力的解法是以枚举每个元素，以该元素为最小值向两边拓展，复杂度o(n^2)</li>\n<li>正确的解法：这是一道单调栈的典型例题，用单调栈来做复杂度o(n)。<a href=\"http://blog.csdn.net/u010885899/article/details/49148025\" target=\"_blank\" rel=\"external\">代码</a><ul>\n<li>所谓的单调栈就是维护一个栈，从栈底到栈顶递增。维护方法：数组元素依次入栈，比栈顶元素小就pop，知道插入合适的位置中。</li>\n<li>需要注意：用到栈的时候，自已用数组模拟比stl快很多，因为stl的push，top都是函数，数组模拟不是。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>10：给一个二维平面上的集合，求所有符合要求的点，该点满足：其他点的x和y不能同时&gt;它。也就是说不存在\u0010\u0010\u0010\u0010\u0010\u0010\u0010\u0010\u0010\u0010一个点，在它的右上方。<br>A: 设struct {int x,int y}.对结构体数组按照x的大小排序，然后从后往前遍历，期间维护一个最大的Y，如果某个点的y大于等于Y，则该点满足条件。  </li>\n<li><p>11： 有一个随机函数A以p的概率返回0,(1-p)的概率返回1，设计一个函数，该函数以1/2的概率返回0和1?<br>A: 一开始证明这个算法的我是将random函数调用i次返回0的概率相加，然后算等比数列的和是1/2<br>后来想想不管调用几层返回结果，每一层返回0和1的概率总是一样的。所以最终返回0和1的结果也是一样的。【二项分布】。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"> int random()&#123;\t\t\t\t</div><div class=\"line\"> \twhile(true)&#123;</div><div class=\"line\"> \t\tint i=A();</div><div class=\"line\"> \t\tint j=A();</div><div class=\"line\"> \t\tif(i==0&amp;&amp;j==1)&#123;</div><div class=\"line\"> \t\t\treturn 0;</div><div class=\"line\"> \t\t\tbreak;</div><div class=\"line\"> \t\t&#125;</div><div class=\"line\"> \t\tif(i==1&amp;&amp;j==0)&#123;</div><div class=\"line\"> \t\t\treturn 1;</div><div class=\"line\"> \t\t\tbreak;</div><div class=\"line\"> \t\t&#125;</div><div class=\"line\"> \t\tcontinue;</div><div class=\"line\"> \t&#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> ```\t</div><div class=\"line\">* 12 统计单词个数：</div><div class=\"line\">\t* 这道题本来非常简单，但是由于我在dennis ritchie的书上看到一种解法非常优雅，记录一下，常规做法要去掉两边的空格，这种解法不用。</div></pre></td></tr></table></figure>\n<pre><code>while(getline(cin,str)){\n    int state=0,count=0; //state=0表示当前状态不在一个单词中\n    string str;\n    int len=str.length();\n    for(int i=0;i&lt;n;i++){\n        if(str[i]==&apos; &apos;||str[i]==&apos;\\t&apos;||str[i]==&apos;\\n&apos;){\n            state=0;\n        }\n        else if(state==0){\n            count++;\n            state=1;\n        }\n    }\n    cout&lt;&lt;count&lt;&lt;endl;\n</code></pre><p>  }<br>  ```</p>\n</li>\n<li><p>数组右移k位:(就是把数组后面的k个挪到前面来)</p>\n<p>  1,2,3,4,5,6 -&gt; 5,6,1,2,3,4</p>\n<ul>\n<li>时间o(n)，空间o(n): 先把后面的k个存起来temp，然后再赋值给a的前面</li>\n<li>时间o(n*n)，空间o(1)：每次右移一个</li>\n<li>时间o(n),空间o(1): 整体reverse,前k个reverse,剩下的reverse</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li><p>1：给定一个字符串，删去几个字符，使其成为回文串，求最少要删去几个字符<br>A：reverse字符串，求两个字符串的最长公共子序列为len,总长度减去len就是结果</p>\n</li>\n<li><p>2：求最长回文子序列<br>A: reverse字符串，求两个串的最长公共子序列</p>\n</li>\n<li><p>3：最长回文子串<br> A:以一点为中心向外拓展法          </p>\n</li>\n<li><p>4：reverse链表    (I,II)<br><a href=\"https://leetcode.com/submissions/detail/84872614/\">reverse I</a><br><a href=\"https://leetcode.com/submissions/detail/69092284/\">reverse II</a></p>\n</li>\n<li><p>5：各种排序，冒泡，插入，选择，归并，快排，堆排序<br><a href=\"\">查看链接</a></p>\n</li>\n</ul>\n<ul>\n<li><p>6：最大子数组和(dp)<br><a href=\"https://leetcode.com/submissions/detail/84085745/\">查看代码</a></p>\n</li>\n<li><p>7：编辑距离问题<br><a href=\"https://leetcode.com/submissions/detail/90513333/\">查看代码</a></p>\n</li>\n<li><p>8：将一个字符串中的大写字母挪到后面去，相对位置不变，如将aAbcBd变成abcdAB<br>  A:类似冒泡排序，大写字母依次浮动到后面<br>  <a href=\"https://www.nowcoder.com/profile/330014/codeBookDetail?submissionId=8275254\">查看代码</a></p>\n</li>\n<li>9: 给一个数组，求一个子区间，满足该区间的最小值*区间和最大，输出这个最大和的值和对应的区间(@今日头条)。  <ul>\n<li>暴力的解法是以枚举每个元素，以该元素为最小值向两边拓展，复杂度o(n^2)</li>\n<li>正确的解法：这是一道单调栈的典型例题，用单调栈来做复杂度o(n)。<a href=\"http://blog.csdn.net/u010885899/article/details/49148025\">代码</a><ul>\n<li>所谓的单调栈就是维护一个栈，从栈底到栈顶递增。维护方法：数组元素依次入栈，比栈顶元素小就pop，知道插入合适的位置中。</li>\n<li>需要注意：用到栈的时候，自已用数组模拟比stl快很多，因为stl的push，top都是函数，数组模拟不是。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>10：给一个二维平面上的集合，求所有符合要求的点，该点满足：其他点的x和y不能同时&gt;它。也就是说不存在\u0010\u0010\u0010\u0010\u0010\u0010\u0010\u0010\u0010\u0010一个点，在它的右上方。<br>A: 设struct {int x,int y}.对结构体数组按照x的大小排序，然后从后往前遍历，期间维护一个最大的Y，如果某个点的y大于等于Y，则该点满足条件。  </li>\n<li><p>11： 有一个随机函数A以p的概率返回0,(1-p)的概率返回1，设计一个函数，该函数以1/2的概率返回0和1?<br>A: 一开始证明这个算法的我是将random函数调用i次返回0的概率相加，然后算等比数列的和是1/2<br>后来想想不管调用几层返回结果，每一层返回0和1的概率总是一样的。所以最终返回0和1的结果也是一样的。【二项分布】。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"> int random()&#123;\t\t\t\t</div><div class=\"line\"> \twhile(true)&#123;</div><div class=\"line\"> \t\tint i=A();</div><div class=\"line\"> \t\tint j=A();</div><div class=\"line\"> \t\tif(i==0&amp;&amp;j==1)&#123;</div><div class=\"line\"> \t\t\treturn 0;</div><div class=\"line\"> \t\t\tbreak;</div><div class=\"line\"> \t\t&#125;</div><div class=\"line\"> \t\tif(i==1&amp;&amp;j==0)&#123;</div><div class=\"line\"> \t\t\treturn 1;</div><div class=\"line\"> \t\t\tbreak;</div><div class=\"line\"> \t\t&#125;</div><div class=\"line\"> \t\tcontinue;</div><div class=\"line\"> \t&#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> ```\t</div><div class=\"line\">* 12 统计单词个数：</div><div class=\"line\">\t* 这道题本来非常简单，但是由于我在dennis ritchie的书上看到一种解法非常优雅，记录一下，常规做法要去掉两边的空格，这种解法不用。</div></pre></td></tr></table></figure>\n<pre><code>while(getline(cin,str)){\n    int state=0,count=0; //state=0表示当前状态不在一个单词中\n    string str;\n    int len=str.length();\n    for(int i=0;i&lt;n;i++){\n        if(str[i]==&apos; &apos;||str[i]==&apos;\\t&apos;||str[i]==&apos;\\n&apos;){\n            state=0;\n        }\n        else if(state==0){\n            count++;\n            state=1;\n        }\n    }\n    cout&lt;&lt;count&lt;&lt;endl;\n</code></pre><p>  }<br>  ```</p>\n</li>\n<li><p>数组右移k位:(就是把数组后面的k个挪到前面来)</p>\n<p>  1,2,3,4,5,6 -&gt; 5,6,1,2,3,4</p>\n<ul>\n<li>时间o(n)，空间o(n): 先把后面的k个存起来temp，然后再赋值给a的前面</li>\n<li>时间o(n*n)，空间o(1)：每次右移一个</li>\n<li>时间o(n),空间o(1): 整体reverse,前k个reverse,剩下的reverse</li>\n</ul>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjckatu110003hb581ng9ol97","category_id":"cjckatu190006hb58njk4021z","_id":"cjckatu1q000ghb58qcaxiuw4"},{"post_id":"cjckatu1p000fhb58pb871lqv","category_id":"cjckatu1n000chb58yjfofhzg","_id":"cjckatu1w000lhb58v5cr0h3z"},{"post_id":"cjckatu160005hb58at9ibud1","category_id":"cjckatu1n000chb58yjfofhzg","_id":"cjckatu1z000phb588qs4lszo"},{"post_id":"cjckatu1r000hhb58nr1gq0sy","category_id":"cjckatu1n000chb58yjfofhzg","_id":"cjckatu21000shb58hiiniuns"},{"post_id":"cjckatu1h0009hb585hzm9gy4","category_id":"cjckatu1t000ihb58m8rp22v6","_id":"cjckatu23000vhb582k8cr77z"},{"post_id":"cjckatu1w000mhb58oxze1l1f","category_id":"cjckatu1n000chb58yjfofhzg","_id":"cjckatu28000zhb58ha9n0ofh"},{"post_id":"cjckatu1z000qhb58co6x6811","category_id":"cjckatu1n000chb58yjfofhzg","_id":"cjckatu2a0011hb581jvk1up1"},{"post_id":"cjckatu1j000ahb58cphgmhve","category_id":"cjckatu1y000nhb580uzxaf34","_id":"cjckatu2d0015hb58yinczqa3"},{"post_id":"cjckatu21000thb58fbup3tfc","category_id":"cjckatu1n000chb58yjfofhzg","_id":"cjckatu2g0018hb58s3ka44w8"},{"post_id":"cjckatu1l000bhb58c3j6w559","category_id":"cjckatu1t000ihb58m8rp22v6","_id":"cjckatu2j001dhb58uafqywnh"},{"post_id":"cjckatu1u000khb58g5cu3iv3","category_id":"cjckatu2a0012hb58yrqowemo","_id":"cjckatu2l001ghb58sevsdlkl"},{"post_id":"cjckatu2j001ehb58nbo3zgbx","category_id":"cjckatu1n000chb58yjfofhzg","_id":"cjckatu2p001lhb58e4cxi3mj"},{"post_id":"cjckatu24000yhb58oz4w6pyh","category_id":"cjckatu2i001bhb58f1mr5twx","_id":"cjckatu2t001ohb58j1eeqqjq"},{"post_id":"cjckatu2l001hhb58yd9hdqd6","category_id":"cjckatu1n000chb58yjfofhzg","_id":"cjckatu2y001rhb5829ytvx4y"},{"post_id":"cjckatu2n001khb58t2ha4ynt","category_id":"cjckatu2i001bhb58f1mr5twx","_id":"cjckatu31001thb582md2mhk7"},{"post_id":"cjckatu280010hb58ufmihx5r","category_id":"cjckatu2m001ihb581s3a3gk7","_id":"cjckatu35001yhb58xgwf7omc"},{"post_id":"cjckatu2t001qhb58d3zt8bhs","category_id":"cjckatu2m001ihb581s3a3gk7","_id":"cjckatu360021hb58pqu41yb4"},{"post_id":"cjckatu2b0013hb58h2hjh96q","category_id":"cjckatu2s001nhb582pcqg9z7","_id":"cjckatu390026hb58zj43zzbp"},{"post_id":"cjckatu2z001shb580skx5xbu","category_id":"cjckatu190006hb58njk4021z","_id":"cjckatu3b0029hb58i5ej7zkx"},{"post_id":"cjckatu32001whb58fl7bw7oz","category_id":"cjckatu2i001bhb58f1mr5twx","_id":"cjckatu3g002dhb587rp8ijx3"},{"post_id":"cjckatu2e0017hb580qco1ejg","category_id":"cjckatu2i001bhb58f1mr5twx","_id":"cjckatu3i002fhb58weh7m6v1"},{"post_id":"cjckatu370023hb58dzl01dby","category_id":"cjckatu2i001bhb58f1mr5twx","_id":"cjckatu3k002jhb58kfpuzvjw"},{"post_id":"cjckatu2g001ahb58ocen7e91","category_id":"cjckatu2i001bhb58f1mr5twx","_id":"cjckatu3l002lhb58aqarrj5b"},{"post_id":"cjckatu3a0027hb58uixn7ugq","category_id":"cjckatu1n000chb58yjfofhzg","_id":"cjckatu3n002ohb587ag8gywb"},{"post_id":"cjckatu3b002bhb582vfdu7eb","category_id":"cjckatu2m001ihb581s3a3gk7","_id":"cjckatu3p002shb580h46lmy7"},{"post_id":"cjckatu3g002ehb58q8vyxlsj","category_id":"cjckatu1n000chb58yjfofhzg","_id":"cjckatu3t002whb58vutaou5r"},{"post_id":"cjckatu2q001mhb58npoyxbzy","category_id":"cjckatu3b002ahb584ef7y6my","_id":"cjckatu3x0030hb589kvkv2u1"},{"post_id":"cjckatu35001zhb58ycxwqolr","category_id":"cjckatu3j002hhb58koa97xzc","_id":"cjckatu3z0033hb58ul0gtgvv"},{"post_id":"cjckatu3l002mhb581s8gob80","category_id":"cjckatu1t000ihb58m8rp22v6","_id":"cjckatu410037hb5830y579mu"},{"post_id":"cjckatu3o002qhb58cr8ymb9b","category_id":"cjckatu2m001ihb581s3a3gk7","_id":"cjckatu43003ahb58bl6o5dar"},{"post_id":"cjckatu3i002ghb585pmye5rh","category_id":"cjckatu3n002nhb58hf8jkiz5","_id":"cjckatu45003ehb58rxd96l17"},{"post_id":"cjckatu3q002thb58kix93yuw","category_id":"cjckatu2m001ihb581s3a3gk7","_id":"cjckatu46003hhb58bl4amjvc"},{"post_id":"cjckatu3u002xhb58zapby1t8","category_id":"cjckatu2a0012hb58yrqowemo","_id":"cjckatu49003khb58wnffy1q5"},{"post_id":"cjckatu3k002khb58sqgni7ru","category_id":"cjckatu3n002nhb58hf8jkiz5","_id":"cjckatu49003mhb58hrmdx922"},{"post_id":"cjckatu3z0034hb58gvrskulp","category_id":"cjckatu2a0012hb58yrqowemo","_id":"cjckatu4a003ohb58igumnglj"},{"post_id":"cjckatu43003bhb58jhudcq43","category_id":"cjckatu2m001ihb581s3a3gk7","_id":"cjckatu4a003phb58x1txjock"},{"post_id":"cjckatu47003ihb58dmjx1r0o","category_id":"cjckatu2a0012hb58yrqowemo","_id":"cjckatu4a003rhb584a6t8ox9"},{"post_id":"cjckatu410038hb58lcepq03y","category_id":"cjckatu45003dhb587irx53d9","_id":"cjckatu4a003thb58d33w4qvy"},{"post_id":"cjckatu45003ghb58iv37cl23","category_id":"cjckatu49003lhb58rbeijri8","_id":"cjckatu4b003whb58hw39xmfs"}],"PostTag":[{"post_id":"cjckatu110003hb581ng9ol97","tag_id":"cjckatu1c0007hb58klu7dt8z","_id":"cjckatu1o000ehb58k2synjze"},{"post_id":"cjckatu160005hb58at9ibud1","tag_id":"cjckatu1n000dhb588j12aaop","_id":"cjckatu21000rhb58u9si56fy"},{"post_id":"cjckatu160005hb58at9ibud1","tag_id":"cjckatu1t000jhb58xpqun22f","_id":"cjckatu23000uhb58w95g5luo"},{"post_id":"cjckatu1h0009hb585hzm9gy4","tag_id":"cjckatu1y000ohb58q4shixki","_id":"cjckatu2d0016hb58lbsw3otu"},{"post_id":"cjckatu1h0009hb585hzm9gy4","tag_id":"cjckatu24000xhb582kcyxpbg","_id":"cjckatu2g0019hb5863in5uhu"},{"post_id":"cjckatu1j000ahb58cphgmhve","tag_id":"cjckatu2d0014hb58urna4pob","_id":"cjckatu2k001fhb58f2p3br5s"},{"post_id":"cjckatu1l000bhb58c3j6w559","tag_id":"cjckatu2i001chb58j3l5vltn","_id":"cjckatu34001xhb586zxenh0q"},{"post_id":"cjckatu1l000bhb58c3j6w559","tag_id":"cjckatu2n001jhb58c7n4fpjt","_id":"cjckatu360020hb58y3cto4xd"},{"post_id":"cjckatu1l000bhb58c3j6w559","tag_id":"cjckatu24000xhb582kcyxpbg","_id":"cjckatu390025hb58w7i9v39k"},{"post_id":"cjckatu1p000fhb58pb871lqv","tag_id":"cjckatu32001vhb58e8u90sgu","_id":"cjckatu3b0028hb5865ydmgwl"},{"post_id":"cjckatu1r000hhb58nr1gq0sy","tag_id":"cjckatu390024hb5890vzppud","_id":"cjckatu3p002rhb5842t6ze2c"},{"post_id":"cjckatu1r000hhb58nr1gq0sy","tag_id":"cjckatu3f002chb58adcpdrso","_id":"cjckatu3t002vhb58a76n8mgw"},{"post_id":"cjckatu1r000hhb58nr1gq0sy","tag_id":"cjckatu3j002ihb58jb4ngteo","_id":"cjckatu3x002zhb58at69z7qx"},{"post_id":"cjckatu1u000khb58g5cu3iv3","tag_id":"cjckatu1n000dhb588j12aaop","_id":"cjckatu3z0032hb58x2eb8l3k"},{"post_id":"cjckatu1u000khb58g5cu3iv3","tag_id":"cjckatu3n002phb58k6eg8hlz","_id":"cjckatu410036hb587amtwg9r"},{"post_id":"cjckatu1w000mhb58oxze1l1f","tag_id":"cjckatu32001vhb58e8u90sgu","_id":"cjckatu430039hb58oh00wu20"},{"post_id":"cjckatu1z000qhb58co6x6811","tag_id":"cjckatu32001vhb58e8u90sgu","_id":"cjckatu45003fhb58q6bgrpjp"},{"post_id":"cjckatu21000thb58fbup3tfc","tag_id":"cjckatu44003chb58qazhkwir","_id":"cjckatu4a003shb587dzyauqb"},{"post_id":"cjckatu21000thb58fbup3tfc","tag_id":"cjckatu390024hb5890vzppud","_id":"cjckatu4b003uhb58t4njpbwz"},{"post_id":"cjckatu21000thb58fbup3tfc","tag_id":"cjckatu24000xhb582kcyxpbg","_id":"cjckatu4b003xhb58yw956vqi"},{"post_id":"cjckatu24000yhb58oz4w6pyh","tag_id":"cjckatu4a003qhb58b1wpr2qm","_id":"cjckatu4b003yhb58hslpu8ll"},{"post_id":"cjckatu280010hb58ufmihx5r","tag_id":"cjckatu4b003vhb58l4qemn4d","_id":"cjckatu4c0041hb58f7hp30sz"},{"post_id":"cjckatu280010hb58ufmihx5r","tag_id":"cjckatu4b003zhb58cbx71ntk","_id":"cjckatu4c0042hb58ehf1b1f2"},{"post_id":"cjckatu2b0013hb58h2hjh96q","tag_id":"cjckatu4b0040hb583dxfnjiu","_id":"cjckatu4c0044hb58xs0xudk2"},{"post_id":"cjckatu2e0017hb580qco1ejg","tag_id":"cjckatu4c0043hb586cb33754","_id":"cjckatu4d0046hb581tvji55o"},{"post_id":"cjckatu2g001ahb58ocen7e91","tag_id":"cjckatu4c0045hb58zl35xusl","_id":"cjckatu4d0048hb585wkv841p"},{"post_id":"cjckatu2j001ehb58nbo3zgbx","tag_id":"cjckatu390024hb5890vzppud","_id":"cjckatu4e004bhb58q0uy1p9q"},{"post_id":"cjckatu2j001ehb58nbo3zgbx","tag_id":"cjckatu4e0049hb58y225nc4t","_id":"cjckatu4e004chb584ktj5o4e"},{"post_id":"cjckatu2l001hhb58yd9hdqd6","tag_id":"cjckatu4e004ahb58cw1px09l","_id":"cjckatu4f004fhb58a1zz3ugp"},{"post_id":"cjckatu2l001hhb58yd9hdqd6","tag_id":"cjckatu32001vhb58e8u90sgu","_id":"cjckatu4f004ghb58vvl7cbrk"},{"post_id":"cjckatu2n001khb58t2ha4ynt","tag_id":"cjckatu4f004ehb58vah701kv","_id":"cjckatu4g004ihb589o0e6ctg"},{"post_id":"cjckatu2q001mhb58npoyxbzy","tag_id":"cjckatu4f004ehb58vah701kv","_id":"cjckatu4h004khb58dv70m17a"},{"post_id":"cjckatu2t001qhb58d3zt8bhs","tag_id":"cjckatu4g004jhb585nv8waja","_id":"cjckatu4i004phb587edzl5oc"},{"post_id":"cjckatu2t001qhb58d3zt8bhs","tag_id":"cjckatu4h004lhb586rrz8o7h","_id":"cjckatu4i004qhb58k3wlifi0"},{"post_id":"cjckatu2t001qhb58d3zt8bhs","tag_id":"cjckatu4h004mhb58gv7pk59p","_id":"cjckatu4i004shb58bzpd2r55"},{"post_id":"cjckatu2t001qhb58d3zt8bhs","tag_id":"cjckatu4h004nhb58yaehvp1c","_id":"cjckatu4i004thb58bfwx57cf"},{"post_id":"cjckatu2z001shb580skx5xbu","tag_id":"cjckatu4i004ohb58108vzvmb","_id":"cjckatu4j004vhb58gn4snfre"},{"post_id":"cjckatu32001whb58fl7bw7oz","tag_id":"cjckatu24000xhb582kcyxpbg","_id":"cjckatu4j004xhb5838abmk8h"},{"post_id":"cjckatu32001whb58fl7bw7oz","tag_id":"cjckatu4i004rhb58869818ei","_id":"cjckatu4j004yhb5860ngj1ml"},{"post_id":"cjckatu32001whb58fl7bw7oz","tag_id":"cjckatu4j004uhb58lic33ylj","_id":"cjckatu4k0050hb58xdcvxd21"},{"post_id":"cjckatu35001zhb58ycxwqolr","tag_id":"cjckatu4j004whb58ym9y3ff5","_id":"cjckatu4k0052hb58nubbrbs6"},{"post_id":"cjckatu35001zhb58ycxwqolr","tag_id":"cjckatu4j004zhb58bpyeclv0","_id":"cjckatu4k0053hb58mpdrmxpt"},{"post_id":"cjckatu370023hb58dzl01dby","tag_id":"cjckatu4k0051hb58elvzeahu","_id":"cjckatu4k0055hb58oum99fs5"},{"post_id":"cjckatu3a0027hb58uixn7ugq","tag_id":"cjckatu32001vhb58e8u90sgu","_id":"cjckatu4l0057hb58qo8decw9"},{"post_id":"cjckatu3a0027hb58uixn7ugq","tag_id":"cjckatu4k0054hb58al0kqrih","_id":"cjckatu4l0058hb58ruafluur"},{"post_id":"cjckatu3b002bhb582vfdu7eb","tag_id":"cjckatu4k0056hb588oqypqrh","_id":"cjckatu4o005dhb583jxiglfc"},{"post_id":"cjckatu3b002bhb582vfdu7eb","tag_id":"cjckatu4l0059hb58oghsmfz3","_id":"cjckatu4o005ehb58n6c9gnzw"},{"post_id":"cjckatu3b002bhb582vfdu7eb","tag_id":"cjckatu4l005ahb58k6yfvp7h","_id":"cjckatu4p005ghb58062nis8q"},{"post_id":"cjckatu3b002bhb582vfdu7eb","tag_id":"cjckatu4m005bhb589j0mwyl6","_id":"cjckatu4p005hhb58om1rio1d"},{"post_id":"cjckatu3g002ehb58q8vyxlsj","tag_id":"cjckatu4n005chb584dt8ejpm","_id":"cjckatu4r005jhb580yeo21c0"},{"post_id":"cjckatu3g002ehb58q8vyxlsj","tag_id":"cjckatu32001vhb58e8u90sgu","_id":"cjckatu4r005khb58bzikz4q3"},{"post_id":"cjckatu3g002ehb58q8vyxlsj","tag_id":"cjckatu4o005fhb58b2ofo83l","_id":"cjckatu4s005mhb58i9dxeprs"},{"post_id":"cjckatu3i002ghb585pmye5rh","tag_id":"cjckatu4p005ihb58yhdt6qu4","_id":"cjckatu4s005ohb580nkliz4c"},{"post_id":"cjckatu3i002ghb585pmye5rh","tag_id":"cjckatu4r005lhb586iziki93","_id":"cjckatu4s005phb58a3kwjl8x"},{"post_id":"cjckatu3k002khb58sqgni7ru","tag_id":"cjckatu4s005nhb58sihyv2n1","_id":"cjckatu4t005rhb582thp82ru"},{"post_id":"cjckatu3l002mhb581s8gob80","tag_id":"cjckatu4s005qhb586isiq7lo","_id":"cjckatu4v005vhb58jya7vrwf"},{"post_id":"cjckatu3l002mhb581s8gob80","tag_id":"cjckatu4t005shb58m8hbu77y","_id":"cjckatu4w005whb58fzf4ji6f"},{"post_id":"cjckatu3l002mhb581s8gob80","tag_id":"cjckatu4u005thb58wmsvqvhd","_id":"cjckatu4w005yhb5870b5qvuo"},{"post_id":"cjckatu3o002qhb58cr8ymb9b","tag_id":"cjckatu4v005uhb58h09nbzjp","_id":"cjckatu4x005zhb58ei1m2blg"},{"post_id":"cjckatu3q002thb58kix93yuw","tag_id":"cjckatu4w005xhb5804j1pf9j","_id":"cjckatu4y0061hb58ppvvnrz8"},{"post_id":"cjckatu3u002xhb58zapby1t8","tag_id":"cjckatu4x0060hb58ledvoy26","_id":"cjckatu4z0066hb58zppu798t"},{"post_id":"cjckatu3u002xhb58zapby1t8","tag_id":"cjckatu4y0062hb58sbkah1m2","_id":"cjckatu500067hb58tx6wri5y"},{"post_id":"cjckatu3u002xhb58zapby1t8","tag_id":"cjckatu4y0063hb58ukh4z2wk","_id":"cjckatu500069hb580ndhp3b1"},{"post_id":"cjckatu3u002xhb58zapby1t8","tag_id":"cjckatu4z0064hb58p0sxra5j","_id":"cjckatu50006ahb58niblxpt1"},{"post_id":"cjckatu3x0031hb58ks4abgv6","tag_id":"cjckatu4z0065hb586dcron8k","_id":"cjckatu50006chb58561pz250"},{"post_id":"cjckatu3z0034hb58gvrskulp","tag_id":"cjckatu500068hb586kind1qs","_id":"cjckatu51006dhb58fexsnk6s"},{"post_id":"cjckatu410038hb58lcepq03y","tag_id":"cjckatu4x0060hb58ledvoy26","_id":"cjckatu52006ghb58dbl0ylvv"},{"post_id":"cjckatu410038hb58lcepq03y","tag_id":"cjckatu4z0064hb58p0sxra5j","_id":"cjckatu52006hhb58mo5nyxce"},{"post_id":"cjckatu43003bhb58jhudcq43","tag_id":"cjckatu51006fhb58lla97fcj","_id":"cjckatu53006lhb58479agii2"},{"post_id":"cjckatu43003bhb58jhudcq43","tag_id":"cjckatu52006ihb58pi7nefe8","_id":"cjckatu53006mhb58icx1c65l"},{"post_id":"cjckatu43003bhb58jhudcq43","tag_id":"cjckatu52006jhb58mxc5xpzf","_id":"cjckatu53006ohb58qr6yreo6"},{"post_id":"cjckatu45003ghb58iv37cl23","tag_id":"cjckatu52006khb587rpwpo4w","_id":"cjckatu54006qhb58x875xai5"},{"post_id":"cjckatu45003ghb58iv37cl23","tag_id":"cjckatu53006nhb58975pigrx","_id":"cjckatu54006rhb589fwo8xeq"},{"post_id":"cjckatu47003ihb58dmjx1r0o","tag_id":"cjckatu53006phb581ojyxzk1","_id":"cjckatu55006thb58pu29edw5"},{"post_id":"cjckatu47003ihb58dmjx1r0o","tag_id":"cjckatu54006shb58jrsytlxw","_id":"cjckatu55006uhb58s6u0krbb"}],"Tag":[{"name":"hello hexo","_id":"cjckatu1c0007hb58klu7dt8z"},{"name":"leetcode","_id":"cjckatu1n000dhb588j12aaop"},{"name":"stl","_id":"cjckatu1t000jhb58xpqun22f"},{"name":"环境变量","_id":"cjckatu1y000ohb58q4shixki"},{"name":"Linux","_id":"cjckatu24000xhb582kcyxpbg"},{"name":"Vim","_id":"cjckatu2d0014hb58urna4pob"},{"name":"操作系统","_id":"cjckatu2i001chb58j3l5vltn"},{"name":"进程控制","_id":"cjckatu2n001jhb58c7n4fpjt"},{"name":"c/c++","_id":"cjckatu32001vhb58e8u90sgu"},{"name":"c语言","_id":"cjckatu390024hb5890vzppud"},{"name":"gets","_id":"cjckatu3f002chb58adcpdrso"},{"name":"scanf","_id":"cjckatu3j002ihb58jb4ngteo"},{"name":"BFS","_id":"cjckatu3n002phb58k6eg8hlz"},{"name":"时间函数","_id":"cjckatu44003chb58qazhkwir"},{"name":"gdb命令","_id":"cjckatu4a003qhb58b1wpr2qm"},{"name":"git","_id":"cjckatu4b003vhb58l4qemn4d"},{"name":"github","_id":"cjckatu4b003zhb58cbx71ntk"},{"name":"java","_id":"cjckatu4b0040hb583dxfnjiu"},{"name":"linux命令","_id":"cjckatu4c0043hb586cb33754"},{"name":"linux","_id":"cjckatu4c0045hb58zl35xusl"},{"name":"指针","_id":"cjckatu4e0049hb58y225nc4t"},{"name":"makefile","_id":"cjckatu4e004ahb58cw1px09l"},{"name":"python","_id":"cjckatu4f004ehb58vah701kv"},{"name":"编码","_id":"cjckatu4g004jhb585nv8waja"},{"name":"utf-8","_id":"cjckatu4h004lhb586rrz8o7h"},{"name":"unicode","_id":"cjckatu4h004mhb58gv7pk59p"},{"name":"GB2312","_id":"cjckatu4h004nhb58yaehvp1c"},{"name":"markdown","_id":"cjckatu4i004ohb58108vzvmb"},{"name":"服务器","_id":"cjckatu4i004rhb58869818ei"},{"name":"教训","_id":"cjckatu4j004uhb58lic33ylj"},{"name":"信息安全","_id":"cjckatu4j004whb58ym9y3ff5"},{"name":"ssh","_id":"cjckatu4j004zhb58bpyeclv0"},{"name":"mysql","_id":"cjckatu4k0051hb58elvzeahu"},{"name":"CR","_id":"cjckatu4k0054hb58al0kqrih"},{"name":"nginx","_id":"cjckatu4k0056hb588oqypqrh"},{"name":"tomcat","_id":"cjckatu4l0059hb58oghsmfz3"},{"name":"apache","_id":"cjckatu4l005ahb58k6yfvp7h"},{"name":"jvm","_id":"cjckatu4m005bhb589j0mwyl6"},{"name":"声明和定义","_id":"cjckatu4n005chb584dt8ejpm"},{"name":"外部变量","_id":"cjckatu4o005fhb58b2ofo83l"},{"name":"分辨率","_id":"cjckatu4p005ihb58yhdt6qu4"},{"name":"像素","_id":"cjckatu4r005lhb586iziki93"},{"name":"AE","_id":"cjckatu4s005nhb58sihyv2n1"},{"name":"多线程","_id":"cjckatu4s005qhb586isiq7lo"},{"name":"锁","_id":"cjckatu4t005shb58m8hbu77y"},{"name":"并发","_id":"cjckatu4u005thb58wmsvqvhd"},{"name":"数据库","_id":"cjckatu4v005uhb58h09nbzjp"},{"name":"编译原理","_id":"cjckatu4w005xhb5804j1pf9j"},{"name":"百度","_id":"cjckatu4x0060hb58ledvoy26"},{"name":"内容生态质量部","_id":"cjckatu4y0062hb58sbkah1m2"},{"name":"测试开发","_id":"cjckatu4y0063hb58ukh4z2wk"},{"name":"实习","_id":"cjckatu4z0064hb58p0sxra5j"},{"name":"代理","_id":"cjckatu4z0065hb586dcron8k"},{"name":"百度地图  实习生  面试","_id":"cjckatu500068hb586kind1qs"},{"name":"总线","_id":"cjckatu51006fhb58lla97fcj"},{"name":"cpu位数","_id":"cjckatu52006ihb58pi7nefe8"},{"name":"计算机组成原理","_id":"cjckatu52006jhb58mxc5xpzf"},{"name":"arp","_id":"cjckatu52006khb587rpwpo4w"},{"name":"网络","_id":"cjckatu53006nhb58975pigrx"},{"name":"面试","_id":"cjckatu53006phb581ojyxzk1"},{"name":"编程题","_id":"cjckatu54006shb58jrsytlxw"}]}}